// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.1
// source: MedBaike.proto

package MedBaike

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IGNORE_TYPE int32

const (
	IGNORE_TYPE_IGNORE_TYPE_DISEASE_TAG    IGNORE_TYPE = 0 // 疾病feed标签
	IGNORE_TYPE_IGNORE_TYPE_HOME_EMERGENCY IGNORE_TYPE = 1 // 首页急救标签(例如: tag = "食物中毒")
	IGNORE_TYPE_IGNORE_TYPE_HOME_DISEASE   IGNORE_TYPE = 2 // 首页疾病标签(例如: disease = "流行性感冒")
)

// Enum value maps for IGNORE_TYPE.
var (
	IGNORE_TYPE_name = map[int32]string{
		0: "IGNORE_TYPE_DISEASE_TAG",
		1: "IGNORE_TYPE_HOME_EMERGENCY",
		2: "IGNORE_TYPE_HOME_DISEASE",
	}
	IGNORE_TYPE_value = map[string]int32{
		"IGNORE_TYPE_DISEASE_TAG":    0,
		"IGNORE_TYPE_HOME_EMERGENCY": 1,
		"IGNORE_TYPE_HOME_DISEASE":   2,
	}
)

func (x IGNORE_TYPE) Enum() *IGNORE_TYPE {
	p := new(IGNORE_TYPE)
	*p = x
	return p
}

func (x IGNORE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IGNORE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_MedBaike_proto_enumTypes[0].Descriptor()
}

func (IGNORE_TYPE) Type() protoreflect.EnumType {
	return &file_MedBaike_proto_enumTypes[0]
}

func (x IGNORE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IGNORE_TYPE.Descriptor instead.
func (IGNORE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{0}
}

type CONTENT_TYPE int32

const (
	CONTENT_TYPE_CONTENT_TYPE_DEFAULT        CONTENT_TYPE = 0  // 默认值
	CONTENT_TYPE_CONTENT_TYPE_RECOMMEND      CONTENT_TYPE = 1  // 首页推荐
	CONTENT_TYPE_CONTENT_TYPE_DOCS_TAGS      CONTENT_TYPE = 2  // 首页文章标签
	CONTENT_TYPE_CONTENT_TYPE_DOCS           CONTENT_TYPE = 3  // 首页文章
	CONTENT_TYPE_CONTENT_TYPE_VIDEOS         CONTENT_TYPE = 4  // 首页视频
	CONTENT_TYPE_CONTENT_TYPE_TOOLS          CONTENT_TYPE = 5  // 首页小工具
	CONTENT_TYPE_CONTENT_TYPE_TOPICS         CONTENT_TYPE = 6  // 首页专题
	CONTENT_TYPE_CONTENT_TYPE_HOME_TAGS      CONTENT_TYPE = 7  // 首页标签
	CONTENT_TYPE_CONTENT_TYPE_RECOMMENDV2    CONTENT_TYPE = 8  // 首页推荐V2
	CONTENT_TYPE_CONTENT_TYPE_QAS            CONTENT_TYPE = 9  // 首页问答
	CONTENT_TYPE_CONTENT_TYPE_QAS_TAGS       CONTENT_TYPE = 10 // 首页问答标签
	CONTENT_TYPE_CONTENT_TYPE_RECOMMEND_TAGS CONTENT_TYPE = 11 // 推荐健康主题
	CONTENT_TYPE_CONTENT_TYPE_DOCTOR         CONTENT_TYPE = 12 // 首页医生
	CONTENT_TYPE_CONTENT_TYPE_DISEASE        CONTENT_TYPE = 13 // 首页疾病
	CONTENT_TYPE_CONTENT_TYPE_BANNER         CONTENT_TYPE = 14 // 首页运营位
	CONTENT_TYPE_CONTENT_TYPE_EMERGENCY      CONTENT_TYPE = 15 // 首页急救
	CONTENT_TYPE_CONTENT_TYPE_SEARCH         CONTENT_TYPE = 16 // 首页搜索框
)

// Enum value maps for CONTENT_TYPE.
var (
	CONTENT_TYPE_name = map[int32]string{
		0:  "CONTENT_TYPE_DEFAULT",
		1:  "CONTENT_TYPE_RECOMMEND",
		2:  "CONTENT_TYPE_DOCS_TAGS",
		3:  "CONTENT_TYPE_DOCS",
		4:  "CONTENT_TYPE_VIDEOS",
		5:  "CONTENT_TYPE_TOOLS",
		6:  "CONTENT_TYPE_TOPICS",
		7:  "CONTENT_TYPE_HOME_TAGS",
		8:  "CONTENT_TYPE_RECOMMENDV2",
		9:  "CONTENT_TYPE_QAS",
		10: "CONTENT_TYPE_QAS_TAGS",
		11: "CONTENT_TYPE_RECOMMEND_TAGS",
		12: "CONTENT_TYPE_DOCTOR",
		13: "CONTENT_TYPE_DISEASE",
		14: "CONTENT_TYPE_BANNER",
		15: "CONTENT_TYPE_EMERGENCY",
		16: "CONTENT_TYPE_SEARCH",
	}
	CONTENT_TYPE_value = map[string]int32{
		"CONTENT_TYPE_DEFAULT":        0,
		"CONTENT_TYPE_RECOMMEND":      1,
		"CONTENT_TYPE_DOCS_TAGS":      2,
		"CONTENT_TYPE_DOCS":           3,
		"CONTENT_TYPE_VIDEOS":         4,
		"CONTENT_TYPE_TOOLS":          5,
		"CONTENT_TYPE_TOPICS":         6,
		"CONTENT_TYPE_HOME_TAGS":      7,
		"CONTENT_TYPE_RECOMMENDV2":    8,
		"CONTENT_TYPE_QAS":            9,
		"CONTENT_TYPE_QAS_TAGS":       10,
		"CONTENT_TYPE_RECOMMEND_TAGS": 11,
		"CONTENT_TYPE_DOCTOR":         12,
		"CONTENT_TYPE_DISEASE":        13,
		"CONTENT_TYPE_BANNER":         14,
		"CONTENT_TYPE_EMERGENCY":      15,
		"CONTENT_TYPE_SEARCH":         16,
	}
)

func (x CONTENT_TYPE) Enum() *CONTENT_TYPE {
	p := new(CONTENT_TYPE)
	*p = x
	return p
}

func (x CONTENT_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CONTENT_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_MedBaike_proto_enumTypes[1].Descriptor()
}

func (CONTENT_TYPE) Type() protoreflect.EnumType {
	return &file_MedBaike_proto_enumTypes[1]
}

func (x CONTENT_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CONTENT_TYPE.Descriptor instead.
func (CONTENT_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{1}
}

type DISEASE_COST_FILTER_TYPE int32

const (
	DISEASE_COST_FILTER_TYPE_DISEASE_COST_FILTER_TYPE_CITY          DISEASE_COST_FILTER_TYPE = 0 // 城市
	DISEASE_COST_FILTER_TYPE_DISEASE_COST_FILTER_TYPE_INSURETYPE    DISEASE_COST_FILTER_TYPE = 1 // 医保类型
	DISEASE_COST_FILTER_TYPE_DISEASE_COST_FILTER_TYPE_INSUREPERSON  DISEASE_COST_FILTER_TYPE = 2 // 参保人员
	DISEASE_COST_FILTER_TYPE_DISEASE_COST_FILTER_TYPE_HOSPITALGRADE DISEASE_COST_FILTER_TYPE = 3 // 医疗机构等级
)

// Enum value maps for DISEASE_COST_FILTER_TYPE.
var (
	DISEASE_COST_FILTER_TYPE_name = map[int32]string{
		0: "DISEASE_COST_FILTER_TYPE_CITY",
		1: "DISEASE_COST_FILTER_TYPE_INSURETYPE",
		2: "DISEASE_COST_FILTER_TYPE_INSUREPERSON",
		3: "DISEASE_COST_FILTER_TYPE_HOSPITALGRADE",
	}
	DISEASE_COST_FILTER_TYPE_value = map[string]int32{
		"DISEASE_COST_FILTER_TYPE_CITY":          0,
		"DISEASE_COST_FILTER_TYPE_INSURETYPE":    1,
		"DISEASE_COST_FILTER_TYPE_INSUREPERSON":  2,
		"DISEASE_COST_FILTER_TYPE_HOSPITALGRADE": 3,
	}
)

func (x DISEASE_COST_FILTER_TYPE) Enum() *DISEASE_COST_FILTER_TYPE {
	p := new(DISEASE_COST_FILTER_TYPE)
	*p = x
	return p
}

func (x DISEASE_COST_FILTER_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DISEASE_COST_FILTER_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_MedBaike_proto_enumTypes[2].Descriptor()
}

func (DISEASE_COST_FILTER_TYPE) Type() protoreflect.EnumType {
	return &file_MedBaike_proto_enumTypes[2]
}

func (x DISEASE_COST_FILTER_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DISEASE_COST_FILTER_TYPE.Descriptor instead.
func (DISEASE_COST_FILTER_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{2}
}

type DRUG_COST_FILTER_TYPE int32

const (
	DRUG_COST_FILTER_TYPE_DRUG_COST_FILTER_TYPE_DEFAULT    DRUG_COST_FILTER_TYPE = 0 // 默认值
	DRUG_COST_FILTER_TYPE_DRUG_COST_FILTER_TYPE_DISEASE    DRUG_COST_FILTER_TYPE = 1 // 疾病
	DRUG_COST_FILTER_TYPE_DRUG_COST_FILTER_TYPE_CITY       DRUG_COST_FILTER_TYPE = 2 // 城市
	DRUG_COST_FILTER_TYPE_DRUG_COST_FILTER_TYPE_COMMON     DRUG_COST_FILTER_TYPE = 3 // 药品名
	DRUG_COST_FILTER_TYPE_DRUG_COST_FILTER_TYPE_TRADE      DRUG_COST_FILTER_TYPE = 4 // 商品名
	DRUG_COST_FILTER_TYPE_DRUG_COST_FILTER_TYPE_ENTERPRISE DRUG_COST_FILTER_TYPE = 5 // 厂商
)

// Enum value maps for DRUG_COST_FILTER_TYPE.
var (
	DRUG_COST_FILTER_TYPE_name = map[int32]string{
		0: "DRUG_COST_FILTER_TYPE_DEFAULT",
		1: "DRUG_COST_FILTER_TYPE_DISEASE",
		2: "DRUG_COST_FILTER_TYPE_CITY",
		3: "DRUG_COST_FILTER_TYPE_COMMON",
		4: "DRUG_COST_FILTER_TYPE_TRADE",
		5: "DRUG_COST_FILTER_TYPE_ENTERPRISE",
	}
	DRUG_COST_FILTER_TYPE_value = map[string]int32{
		"DRUG_COST_FILTER_TYPE_DEFAULT":    0,
		"DRUG_COST_FILTER_TYPE_DISEASE":    1,
		"DRUG_COST_FILTER_TYPE_CITY":       2,
		"DRUG_COST_FILTER_TYPE_COMMON":     3,
		"DRUG_COST_FILTER_TYPE_TRADE":      4,
		"DRUG_COST_FILTER_TYPE_ENTERPRISE": 5,
	}
)

func (x DRUG_COST_FILTER_TYPE) Enum() *DRUG_COST_FILTER_TYPE {
	p := new(DRUG_COST_FILTER_TYPE)
	*p = x
	return p
}

func (x DRUG_COST_FILTER_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DRUG_COST_FILTER_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_MedBaike_proto_enumTypes[3].Descriptor()
}

func (DRUG_COST_FILTER_TYPE) Type() protoreflect.EnumType {
	return &file_MedBaike_proto_enumTypes[3]
}

func (x DRUG_COST_FILTER_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DRUG_COST_FILTER_TYPE.Descriptor instead.
func (DRUG_COST_FILTER_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{3}
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Street string `protobuf:"bytes,1,opt,name=street,proto3" json:"street,omitempty"`
	City   string `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{0}
}

func (x *Address) GetStreet() string {
	if x != nil {
		return x.Street
	}
	return ""
}

func (x *Address) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

type Person struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Age     int32    `protobuf:"varint,2,opt,name=age,proto3" json:"age,omitempty"`
	Address *Address `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Person) Reset() {
	*x = Person{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Person) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Person) ProtoMessage() {}

func (x *Person) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Person.ProtoReflect.Descriptor instead.
func (*Person) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{1}
}

func (x *Person) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Person) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *Person) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

type GetDocDataInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Docid string `protobuf:"bytes,1,opt,name=docid,proto3" json:"docid,omitempty"`
}

func (x *GetDocDataInfoReq) Reset() {
	*x = GetDocDataInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDocDataInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocDataInfoReq) ProtoMessage() {}

func (x *GetDocDataInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocDataInfoReq.ProtoReflect.Descriptor instead.
func (*GetDocDataInfoReq) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{2}
}

func (x *GetDocDataInfoReq) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

type GetDocDataInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data         *Tid_DocData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`                                        // 文章内容
	Favorite     int32        `protobuf:"varint,2,opt,name=favorite,proto3" json:"favorite,omitempty"`                               // 用户收藏
	Helpful      int32        `protobuf:"varint,3,opt,name=helpful,proto3" json:"helpful,omitempty"`                                 // 用户点击有帮助
	HelpfulCount int32        `protobuf:"varint,4,opt,name=helpfulCount,proto3" json:"helpfulCount,omitempty"`                       // 用户点击有帮助数量
	Feedback     int32        `protobuf:"varint,5,opt,name=feedback,proto3" json:"feedback,omitempty"`                               // 用户反馈
	Pv           int32        `protobuf:"varint,6,opt,name=pv,proto3" json:"pv,omitempty"`                                           // pv
	ShowFullText int32        `protobuf:"varint,8,opt,name=show_full_text,json=showFullText,proto3" json:"show_full_text,omitempty"` // 展示全文，默认0为折叠，1展开
}

func (x *GetDocDataInfoResp) Reset() {
	*x = GetDocDataInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDocDataInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocDataInfoResp) ProtoMessage() {}

func (x *GetDocDataInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocDataInfoResp.ProtoReflect.Descriptor instead.
func (*GetDocDataInfoResp) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{3}
}

func (x *GetDocDataInfoResp) GetData() *Tid_DocData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetDocDataInfoResp) GetFavorite() int32 {
	if x != nil {
		return x.Favorite
	}
	return 0
}

func (x *GetDocDataInfoResp) GetHelpful() int32 {
	if x != nil {
		return x.Helpful
	}
	return 0
}

func (x *GetDocDataInfoResp) GetHelpfulCount() int32 {
	if x != nil {
		return x.HelpfulCount
	}
	return 0
}

func (x *GetDocDataInfoResp) GetFeedback() int32 {
	if x != nil {
		return x.Feedback
	}
	return 0
}

func (x *GetDocDataInfoResp) GetPv() int32 {
	if x != nil {
		return x.Pv
	}
	return 0
}

func (x *GetDocDataInfoResp) GetShowFullText() int32 {
	if x != nil {
		return x.ShowFullText
	}
	return 0
}

type TagObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid  int32  `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`  // 二级分类id
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // 二级分类名
}

func (x *TagObject) Reset() {
	*x = TagObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagObject) ProtoMessage() {}

func (x *TagObject) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagObject.ProtoReflect.Descriptor instead.
func (*TagObject) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{4}
}

func (x *TagObject) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *TagObject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ********************************************** tid 0
// *******************************************************
type Tid0_Review struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoctorId  string `protobuf:"bytes,1,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id,omitempty"` // 医生ID
	Text      string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`                         // 组合好的审阅描述信息，用于展示
	Clickable int32  `protobuf:"varint,3,opt,name=clickable,proto3" json:"clickable,omitempty"`              // 0:不可点击;1:可点击
}

func (x *Tid0_Review) Reset() {
	*x = Tid0_Review{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid0_Review) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid0_Review) ProtoMessage() {}

func (x *Tid0_Review) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid0_Review.ProtoReflect.Descriptor instead.
func (*Tid0_Review) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{5}
}

func (x *Tid0_Review) GetDoctorId() string {
	if x != nil {
		return x.DoctorId
	}
	return ""
}

func (x *Tid0_Review) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Tid0_Review) GetClickable() int32 {
	if x != nil {
		return x.Clickable
	}
	return 0
}

type Tid0_Video struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Docid    string `protobuf:"bytes,1,opt,name=docid,proto3" json:"docid,omitempty"`        // 视频文章ID
	Src      string `protobuf:"bytes,2,opt,name=src,proto3" json:"src,omitempty"`            // 视频源
	Duration int32  `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"` // 时长，单位是分钟
	Timelen  int32  `protobuf:"varint,4,opt,name=timelen,proto3" json:"timelen,omitempty"`   // 时长，单位是秒
	Image    string `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`        // 视频截图
}

func (x *Tid0_Video) Reset() {
	*x = Tid0_Video{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid0_Video) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid0_Video) ProtoMessage() {}

func (x *Tid0_Video) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid0_Video.ProtoReflect.Descriptor instead.
func (*Tid0_Video) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{6}
}

func (x *Tid0_Video) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

func (x *Tid0_Video) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *Tid0_Video) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Tid0_Video) GetTimelen() int32 {
	if x != nil {
		return x.Timelen
	}
	return 0
}

func (x *Tid0_Video) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type Tid0_Reviews struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Drid              int32  `protobuf:"varint,1,opt,name=drid,proto3" json:"drid,omitempty"`                                                    // 医生ID
	Hpid              int32  `protobuf:"varint,2,opt,name=hpid,proto3" json:"hpid,omitempty"`                                                    // 医院ID
	Name              string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                     // 医生名字
	Icon              string `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`                                                     // 医生头像
	Position          string `protobuf:"bytes,5,opt,name=position,proto3" json:"position,omitempty"`                                             // 职称
	Hospital          string `protobuf:"bytes,6,opt,name=hospital,proto3" json:"hospital,omitempty"`                                             // 医院名称
	Department        string `protobuf:"bytes,7,opt,name=department,proto3" json:"department,omitempty"`                                         // 科室
	DoctorClickable   int32  `protobuf:"varint,8,opt,name=doctor_clickable,json=doctorClickable,proto3" json:"doctor_clickable,omitempty"`       // 0:不可点击;1:可点击
	HospitalClickable int32  `protobuf:"varint,9,opt,name=hospital_clickable,json=hospitalClickable,proto3" json:"hospital_clickable,omitempty"` // 0:不可点击;1:可点击
	Text              string `protobuf:"bytes,10,opt,name=text,proto3" json:"text,omitempty"`                                                    // 组合好的审阅描述信息，用于展示
	Weight            int32  `protobuf:"varint,11,opt,name=weight,proto3" json:"weight,omitempty"`                                               // 0:普通医生;2:顾问级专家
	Sole              int32  `protobuf:"varint,12,opt,name=sole,proto3" json:"sole,omitempty"`                                                   // 是否特约作者，默认为0表示不是特约作者，1表示是特约作者
	Socialtitle       string `protobuf:"bytes,13,opt,name=socialtitle,proto3" json:"socialtitle,omitempty"`                                      // 社会职称
	Hprank            string `protobuf:"bytes,14,opt,name=hprank,proto3" json:"hprank,omitempty"`                                                // 医院等级信息
}

func (x *Tid0_Reviews) Reset() {
	*x = Tid0_Reviews{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid0_Reviews) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid0_Reviews) ProtoMessage() {}

func (x *Tid0_Reviews) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid0_Reviews.ProtoReflect.Descriptor instead.
func (*Tid0_Reviews) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{7}
}

func (x *Tid0_Reviews) GetDrid() int32 {
	if x != nil {
		return x.Drid
	}
	return 0
}

func (x *Tid0_Reviews) GetHpid() int32 {
	if x != nil {
		return x.Hpid
	}
	return 0
}

func (x *Tid0_Reviews) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tid0_Reviews) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Tid0_Reviews) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Tid0_Reviews) GetHospital() string {
	if x != nil {
		return x.Hospital
	}
	return ""
}

func (x *Tid0_Reviews) GetDepartment() string {
	if x != nil {
		return x.Department
	}
	return ""
}

func (x *Tid0_Reviews) GetDoctorClickable() int32 {
	if x != nil {
		return x.DoctorClickable
	}
	return 0
}

func (x *Tid0_Reviews) GetHospitalClickable() int32 {
	if x != nil {
		return x.HospitalClickable
	}
	return 0
}

func (x *Tid0_Reviews) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Tid0_Reviews) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Tid0_Reviews) GetSole() int32 {
	if x != nil {
		return x.Sole
	}
	return 0
}

func (x *Tid0_Reviews) GetSocialtitle() string {
	if x != nil {
		return x.Socialtitle
	}
	return ""
}

func (x *Tid0_Reviews) GetHprank() string {
	if x != nil {
		return x.Hprank
	}
	return ""
}

type Tid0_DisVideo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src       string `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`              // 视频源
	Duration  int32  `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`   // 时长，单位秒
	Size      int32  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`           // 视频大小，单位KB
	Image     string `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`          // 图片
	Direction int32  `protobuf:"varint,5,opt,name=direction,proto3" json:"direction,omitempty"` // 1:横屏;2:竖屏
}

func (x *Tid0_DisVideo) Reset() {
	*x = Tid0_DisVideo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid0_DisVideo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid0_DisVideo) ProtoMessage() {}

func (x *Tid0_DisVideo) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid0_DisVideo.ProtoReflect.Descriptor instead.
func (*Tid0_DisVideo) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{8}
}

func (x *Tid0_DisVideo) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *Tid0_DisVideo) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Tid0_DisVideo) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Tid0_DisVideo) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Tid0_DisVideo) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

type Tid0 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid             int32            `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`                                     // 模版ID
	Isrc            int32            `protobuf:"varint,2,opt,name=isrc,proto3" json:"isrc,omitempty"`                                   // 0表示tencent;1表示healthwise;后续有的话再递增
	OpTname         string           `protobuf:"bytes,3,opt,name=op_tname,json=opTname,proto3" json:"op_tname,omitempty"`               // 模板目录名
	OpTnameIcon     string           `protobuf:"bytes,4,opt,name=op_tname_icon,json=opTnameIcon,proto3" json:"op_tname_icon,omitempty"` // 模版目录图标
	Name            string           `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                                    // 疾病名
	OpAlias         []string         `protobuf:"bytes,6,rep,name=op_alias,json=opAlias,proto3" json:"op_alias,omitempty"`
	Image           string           `protobuf:"bytes,7,opt,name=image,proto3" json:"image,omitempty"`                       // 疾病图片
	OpReview        *Tid0_Review     `protobuf:"bytes,8,opt,name=op_review,json=opReview,proto3" json:"op_review,omitempty"` // 疾病审核信息
	OpIcon          string           `protobuf:"bytes,9,opt,name=op_icon,json=opIcon,proto3" json:"op_icon,omitempty"`       // 器官图片url
	OpVideo         *Tid0_Video      `protobuf:"bytes,10,opt,name=op_video,json=opVideo,proto3" json:"op_video,omitempty"`   // 视频信息
	OpSummarys      []string         `protobuf:"bytes,11,rep,name=op_summarys,json=opSummarys,proto3" json:"op_summarys,omitempty"`
	MdDefinition    string           `protobuf:"bytes,12,opt,name=md_definition,json=mdDefinition,proto3" json:"md_definition,omitempty"`          // 定义，markdown类型
	Definition      string           `protobuf:"bytes,13,opt,name=definition,proto3" json:"definition,omitempty"`                                  // 定义
	OpQuickoverview string           `protobuf:"bytes,14,opt,name=op_quickoverview,json=opQuickoverview,proto3" json:"op_quickoverview,omitempty"` // 秒懂
	Thumb           string           `protobuf:"bytes,15,opt,name=thumb,proto3" json:"thumb,omitempty"`                                            // 缩略图url
	Reviews         []*Tid0_Reviews  `protobuf:"bytes,16,rep,name=reviews,proto3" json:"reviews,omitempty"`
	Pinyin          string           `protobuf:"bytes,17,opt,name=pinyin,proto3" json:"pinyin,omitempty"` // 拼音
	Disvideo        []*Tid0_DisVideo `protobuf:"bytes,18,rep,name=disvideo,proto3" json:"disvideo,omitempty"`
	Ename           string           `protobuf:"bytes,19,opt,name=ename,proto3" json:"ename,omitempty"`           // 疾病英文名
	Updatetime      string           `protobuf:"bytes,20,opt,name=updatetime,proto3" json:"updatetime,omitempty"` // 最后发布时间
}

func (x *Tid0) Reset() {
	*x = Tid0{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid0) ProtoMessage() {}

func (x *Tid0) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid0.ProtoReflect.Descriptor instead.
func (*Tid0) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{9}
}

func (x *Tid0) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Tid0) GetIsrc() int32 {
	if x != nil {
		return x.Isrc
	}
	return 0
}

func (x *Tid0) GetOpTname() string {
	if x != nil {
		return x.OpTname
	}
	return ""
}

func (x *Tid0) GetOpTnameIcon() string {
	if x != nil {
		return x.OpTnameIcon
	}
	return ""
}

func (x *Tid0) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tid0) GetOpAlias() []string {
	if x != nil {
		return x.OpAlias
	}
	return nil
}

func (x *Tid0) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Tid0) GetOpReview() *Tid0_Review {
	if x != nil {
		return x.OpReview
	}
	return nil
}

func (x *Tid0) GetOpIcon() string {
	if x != nil {
		return x.OpIcon
	}
	return ""
}

func (x *Tid0) GetOpVideo() *Tid0_Video {
	if x != nil {
		return x.OpVideo
	}
	return nil
}

func (x *Tid0) GetOpSummarys() []string {
	if x != nil {
		return x.OpSummarys
	}
	return nil
}

func (x *Tid0) GetMdDefinition() string {
	if x != nil {
		return x.MdDefinition
	}
	return ""
}

func (x *Tid0) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *Tid0) GetOpQuickoverview() string {
	if x != nil {
		return x.OpQuickoverview
	}
	return ""
}

func (x *Tid0) GetThumb() string {
	if x != nil {
		return x.Thumb
	}
	return ""
}

func (x *Tid0) GetReviews() []*Tid0_Reviews {
	if x != nil {
		return x.Reviews
	}
	return nil
}

func (x *Tid0) GetPinyin() string {
	if x != nil {
		return x.Pinyin
	}
	return ""
}

func (x *Tid0) GetDisvideo() []*Tid0_DisVideo {
	if x != nil {
		return x.Disvideo
	}
	return nil
}

func (x *Tid0) GetEname() string {
	if x != nil {
		return x.Ename
	}
	return ""
}

func (x *Tid0) GetUpdatetime() string {
	if x != nil {
		return x.Updatetime
	}
	return ""
}

// ********************************************** tid 1
// *******************************************************
type Tid1_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon    string `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`                       // 图标
	Key_    string `protobuf:"bytes,2,opt,name=key_,json=key,proto3" json:"key_,omitempty"`              // key，JCE的成员变量名不能是key
	MdValue int32  `protobuf:"varint,3,opt,name=md_value,json=mdValue,proto3" json:"md_value,omitempty"` // value
}

func (x *Tid1_Data) Reset() {
	*x = Tid1_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid1_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid1_Data) ProtoMessage() {}

func (x *Tid1_Data) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid1_Data.ProtoReflect.Descriptor instead.
func (*Tid1_Data) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{10}
}

func (x *Tid1_Data) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Tid1_Data) GetKey_() string {
	if x != nil {
		return x.Key_
	}
	return ""
}

func (x *Tid1_Data) GetMdValue() int32 {
	if x != nil {
		return x.MdValue
	}
	return 0
}

type Tid1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid         int32        `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`                                     // 模版ID
	OpTname     string       `protobuf:"bytes,2,opt,name=op_tname,json=opTname,proto3" json:"op_tname,omitempty"`               // 模板目录名
	OpTnameIcon string       `protobuf:"bytes,3,opt,name=op_tname_icon,json=opTnameIcon,proto3" json:"op_tname_icon,omitempty"` // 模版目录图标
	Data        []*Tid1_Data `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *Tid1) Reset() {
	*x = Tid1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid1) ProtoMessage() {}

func (x *Tid1) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid1.ProtoReflect.Descriptor instead.
func (*Tid1) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{11}
}

func (x *Tid1) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Tid1) GetOpTname() string {
	if x != nil {
		return x.OpTname
	}
	return ""
}

func (x *Tid1) GetOpTnameIcon() string {
	if x != nil {
		return x.OpTnameIcon
	}
	return ""
}

func (x *Tid1) GetData() []*Tid1_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// ********************************************** tid 2
// *******************************************************
type Tid2_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`            // 名称
	Clickable int32  `protobuf:"varint,2,opt,name=clickable,proto3" json:"clickable,omitempty"` // 0:不可点击;1:可点击
}

func (x *Tid2_Data) Reset() {
	*x = Tid2_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid2_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid2_Data) ProtoMessage() {}

func (x *Tid2_Data) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid2_Data.ProtoReflect.Descriptor instead.
func (*Tid2_Data) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{12}
}

func (x *Tid2_Data) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tid2_Data) GetClickable() int32 {
	if x != nil {
		return x.Clickable
	}
	return 0
}

type Tid2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid         int32        `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`                                     // 模版ID
	OpTname     string       `protobuf:"bytes,2,opt,name=op_tname,json=opTname,proto3" json:"op_tname,omitempty"`               // 模板目录名
	OpTnameIcon string       `protobuf:"bytes,3,opt,name=op_tname_icon,json=opTnameIcon,proto3" json:"op_tname_icon,omitempty"` // 模版目录图标
	Title       string       `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`                                  // 标题
	Data        []*Tid2_Data `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *Tid2) Reset() {
	*x = Tid2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid2) ProtoMessage() {}

func (x *Tid2) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid2.ProtoReflect.Descriptor instead.
func (*Tid2) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{13}
}

func (x *Tid2) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Tid2) GetOpTname() string {
	if x != nil {
		return x.OpTname
	}
	return ""
}

func (x *Tid2) GetOpTnameIcon() string {
	if x != nil {
		return x.OpTnameIcon
	}
	return ""
}

func (x *Tid2) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tid2) GetData() []*Tid2_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// ********************************************** tid 4
// *******************************************************
type Tid4_Related struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"` // 文章标题
	Docid string `protobuf:"bytes,2,opt,name=docid,proto3" json:"docid,omitempty"` // 文章ID
}

func (x *Tid4_Related) Reset() {
	*x = Tid4_Related{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid4_Related) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid4_Related) ProtoMessage() {}

func (x *Tid4_Related) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid4_Related.ProtoReflect.Descriptor instead.
func (*Tid4_Related) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{14}
}

func (x *Tid4_Related) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tid4_Related) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

type Tid4_Doctor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Drid              int32  `protobuf:"varint,1,opt,name=drid,proto3" json:"drid,omitempty"`                                                    // 医生ID
	Hpid              int32  `protobuf:"varint,2,opt,name=hpid,proto3" json:"hpid,omitempty"`                                                    // 医院ID
	Name              string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                     // 医生名字
	Icon              string `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`                                                     // 医生头像
	Position          string `protobuf:"bytes,5,opt,name=position,proto3" json:"position,omitempty"`                                             // 职称
	Hospital          string `protobuf:"bytes,6,opt,name=hospital,proto3" json:"hospital,omitempty"`                                             // 医院名称
	Department        string `protobuf:"bytes,7,opt,name=department,proto3" json:"department,omitempty"`                                         // 科室
	DoctorClickable   int32  `protobuf:"varint,8,opt,name=doctor_clickable,json=doctorClickable,proto3" json:"doctor_clickable,omitempty"`       // 0:不可点击;1:可点击
	HospitalClickable int32  `protobuf:"varint,9,opt,name=hospital_clickable,json=hospitalClickable,proto3" json:"hospital_clickable,omitempty"` // 0:不可点击;1:可点击
	Text              string `protobuf:"bytes,10,opt,name=text,proto3" json:"text,omitempty"`                                                    // 组合好的审阅描述信息，用于展示
	Weight            int32  `protobuf:"varint,11,opt,name=weight,proto3" json:"weight,omitempty"`                                               // 0:普通医生;2:顾问级专家
	Follow            int32  `protobuf:"varint,12,opt,name=follow,proto3" json:"follow,omitempty"`                                               // 用户是否关注医生
	Sole              int32  `protobuf:"varint,13,opt,name=sole,proto3" json:"sole,omitempty"`                                                   // 是否特约作者，默认为0表示不是特约作者，1表示是特约作者
	Hprank            string `protobuf:"bytes,14,opt,name=hprank,proto3" json:"hprank,omitempty"`                                                // 医院等级信息
	Prefix            string `protobuf:"bytes,15,opt,name=prefix,proto3" json:"prefix,omitempty"`                                                // 前缀;例如:审核专家
	DoctorType        int32  `protobuf:"varint,16,opt,name=doctor_type,json=doctorType,proto3" json:"doctor_type,omitempty"`                     // 1-医生，2-患者；默认1
}

func (x *Tid4_Doctor) Reset() {
	*x = Tid4_Doctor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid4_Doctor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid4_Doctor) ProtoMessage() {}

func (x *Tid4_Doctor) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid4_Doctor.ProtoReflect.Descriptor instead.
func (*Tid4_Doctor) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{15}
}

func (x *Tid4_Doctor) GetDrid() int32 {
	if x != nil {
		return x.Drid
	}
	return 0
}

func (x *Tid4_Doctor) GetHpid() int32 {
	if x != nil {
		return x.Hpid
	}
	return 0
}

func (x *Tid4_Doctor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tid4_Doctor) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Tid4_Doctor) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Tid4_Doctor) GetHospital() string {
	if x != nil {
		return x.Hospital
	}
	return ""
}

func (x *Tid4_Doctor) GetDepartment() string {
	if x != nil {
		return x.Department
	}
	return ""
}

func (x *Tid4_Doctor) GetDoctorClickable() int32 {
	if x != nil {
		return x.DoctorClickable
	}
	return 0
}

func (x *Tid4_Doctor) GetHospitalClickable() int32 {
	if x != nil {
		return x.HospitalClickable
	}
	return 0
}

func (x *Tid4_Doctor) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Tid4_Doctor) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Tid4_Doctor) GetFollow() int32 {
	if x != nil {
		return x.Follow
	}
	return 0
}

func (x *Tid4_Doctor) GetSole() int32 {
	if x != nil {
		return x.Sole
	}
	return 0
}

func (x *Tid4_Doctor) GetHprank() string {
	if x != nil {
		return x.Hprank
	}
	return ""
}

func (x *Tid4_Doctor) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Tid4_Doctor) GetDoctorType() int32 {
	if x != nil {
		return x.DoctorType
	}
	return 0
}

type Tid4_Hospital struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hpid      int32  `protobuf:"varint,1,opt,name=hpid,proto3" json:"hpid,omitempty"`           // 医院ID
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`            // 医院名字
	Clickable int32  `protobuf:"varint,3,opt,name=clickable,proto3" json:"clickable,omitempty"` // 0:不可点击;1:可点击
	Icon      string `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`            // 医院头像
	Hprank    string `protobuf:"bytes,5,opt,name=hprank,proto3" json:"hprank,omitempty"`        // 医院等级信息
	Prefix    string `protobuf:"bytes,6,opt,name=prefix,proto3" json:"prefix,omitempty"`        // 前缀;例如:审核专家
	Info      string `protobuf:"bytes,7,opt,name=info,proto3" json:"info,omitempty"`            // 医院名称信息
}

func (x *Tid4_Hospital) Reset() {
	*x = Tid4_Hospital{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid4_Hospital) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid4_Hospital) ProtoMessage() {}

func (x *Tid4_Hospital) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid4_Hospital.ProtoReflect.Descriptor instead.
func (*Tid4_Hospital) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{16}
}

func (x *Tid4_Hospital) GetHpid() int32 {
	if x != nil {
		return x.Hpid
	}
	return 0
}

func (x *Tid4_Hospital) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tid4_Hospital) GetClickable() int32 {
	if x != nil {
		return x.Clickable
	}
	return 0
}

func (x *Tid4_Hospital) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Tid4_Hospital) GetHprank() string {
	if x != nil {
		return x.Hprank
	}
	return ""
}

func (x *Tid4_Hospital) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Tid4_Hospital) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type Tid4_Author struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpDoctor   []*Tid4_Doctor `protobuf:"bytes,1,rep,name=op_doctor,json=opDoctor,proto3" json:"op_doctor,omitempty"`
	OpHospital *Tid4_Hospital `protobuf:"bytes,2,opt,name=op_hospital,json=opHospital,proto3" json:"op_hospital,omitempty"` // 医院背书信息
}

func (x *Tid4_Author) Reset() {
	*x = Tid4_Author{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid4_Author) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid4_Author) ProtoMessage() {}

func (x *Tid4_Author) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid4_Author.ProtoReflect.Descriptor instead.
func (*Tid4_Author) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{17}
}

func (x *Tid4_Author) GetOpDoctor() []*Tid4_Doctor {
	if x != nil {
		return x.OpDoctor
	}
	return nil
}

func (x *Tid4_Author) GetOpHospital() *Tid4_Hospital {
	if x != nil {
		return x.OpHospital
	}
	return nil
}

type Tid4_Review struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpDoctor   []*Tid4_Doctor `protobuf:"bytes,1,rep,name=op_doctor,json=opDoctor,proto3" json:"op_doctor,omitempty"`
	OpHospital *Tid4_Hospital `protobuf:"bytes,2,opt,name=op_hospital,json=opHospital,proto3" json:"op_hospital,omitempty"` // 医院背书信息
}

func (x *Tid4_Review) Reset() {
	*x = Tid4_Review{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid4_Review) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid4_Review) ProtoMessage() {}

func (x *Tid4_Review) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid4_Review.ProtoReflect.Descriptor instead.
func (*Tid4_Review) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{18}
}

func (x *Tid4_Review) GetOpDoctor() []*Tid4_Doctor {
	if x != nil {
		return x.OpDoctor
	}
	return nil
}

func (x *Tid4_Review) GetOpHospital() *Tid4_Hospital {
	if x != nil {
		return x.OpHospital
	}
	return nil
}

type Tid4_Info_Extra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentClassify string `protobuf:"bytes,1,opt,name=content_classify,json=contentClassify,proto3" json:"content_classify,omitempty"` // 内容分类
	Medicine        string `protobuf:"bytes,2,opt,name=medicine,proto3" json:"medicine,omitempty"`                                      // 药品名称
	Indication      string `protobuf:"bytes,3,opt,name=indication,proto3" json:"indication,omitempty"`                                  // 标签
}

func (x *Tid4_Info_Extra) Reset() {
	*x = Tid4_Info_Extra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid4_Info_Extra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid4_Info_Extra) ProtoMessage() {}

func (x *Tid4_Info_Extra) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid4_Info_Extra.ProtoReflect.Descriptor instead.
func (*Tid4_Info_Extra) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{19}
}

func (x *Tid4_Info_Extra) GetContentClassify() string {
	if x != nil {
		return x.ContentClassify
	}
	return ""
}

func (x *Tid4_Info_Extra) GetMedicine() string {
	if x != nil {
		return x.Medicine
	}
	return ""
}

func (x *Tid4_Info_Extra) GetIndication() string {
	if x != nil {
		return x.Indication
	}
	return ""
}

type Tid_DiseaseItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // 疾病名称
}

func (x *Tid_DiseaseItem) Reset() {
	*x = Tid_DiseaseItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid_DiseaseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid_DiseaseItem) ProtoMessage() {}

func (x *Tid_DiseaseItem) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid_DiseaseItem.ProtoReflect.Descriptor instead.
func (*Tid_DiseaseItem) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{20}
}

func (x *Tid_DiseaseItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Tid_Recruit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disease   []string `protobuf:"bytes,1,rep,name=disease,proto3" json:"disease,omitempty"`
	Area      []string `protobuf:"bytes,2,rep,name=area,proto3" json:"area,omitempty"`
	Treatment []string `protobuf:"bytes,3,rep,name=treatment,proto3" json:"treatment,omitempty"`
	State     int32    `protobuf:"varint,4,opt,name=state,proto3" json:"state,omitempty"` // 招募状态(0:招募尚未开始;1:招募中;2:招募完成)
	Drug      []string `protobuf:"bytes,5,rep,name=drug,proto3" json:"drug,omitempty"`
	Target    string   `protobuf:"bytes,6,opt,name=target,proto3" json:"target,omitempty"` // 主要目标人群
	Count     string   `protobuf:"bytes,7,opt,name=count,proto3" json:"count,omitempty"`   // 招募人数
	Hospital  []string `protobuf:"bytes,8,rep,name=hospital,proto3" json:"hospital,omitempty"`
	Purpose   string   `protobuf:"bytes,9,opt,name=purpose,proto3" json:"purpose,omitempty"` // 试验目的
}

func (x *Tid_Recruit) Reset() {
	*x = Tid_Recruit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid_Recruit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid_Recruit) ProtoMessage() {}

func (x *Tid_Recruit) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid_Recruit.ProtoReflect.Descriptor instead.
func (*Tid_Recruit) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{21}
}

func (x *Tid_Recruit) GetDisease() []string {
	if x != nil {
		return x.Disease
	}
	return nil
}

func (x *Tid_Recruit) GetArea() []string {
	if x != nil {
		return x.Area
	}
	return nil
}

func (x *Tid_Recruit) GetTreatment() []string {
	if x != nil {
		return x.Treatment
	}
	return nil
}

func (x *Tid_Recruit) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *Tid_Recruit) GetDrug() []string {
	if x != nil {
		return x.Drug
	}
	return nil
}

func (x *Tid_Recruit) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Tid_Recruit) GetCount() string {
	if x != nil {
		return x.Count
	}
	return ""
}

func (x *Tid_Recruit) GetHospital() []string {
	if x != nil {
		return x.Hospital
	}
	return nil
}

func (x *Tid_Recruit) GetPurpose() string {
	if x != nil {
		return x.Purpose
	}
	return ""
}

type Tid_Thank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctype int32  `protobuf:"varint,1,opt,name=ctype,proto3" json:"ctype,omitempty"` // 200:医生;201:医院
	Id    int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`       // 医生/医院ID
	Info  string `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`    // 鸣谢正文(业务侧赋值;不通过Dcache获得)
}

func (x *Tid_Thank) Reset() {
	*x = Tid_Thank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid_Thank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid_Thank) ProtoMessage() {}

func (x *Tid_Thank) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid_Thank.ProtoReflect.Descriptor instead.
func (*Tid_Thank) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{22}
}

func (x *Tid_Thank) GetCtype() int32 {
	if x != nil {
		return x.Ctype
	}
	return 0
}

func (x *Tid_Thank) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tid_Thank) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type Tid4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid          int32              `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`                                     // 模版ID
	OpTname      string             `protobuf:"bytes,2,opt,name=op_tname,json=opTname,proto3" json:"op_tname,omitempty"`               // 模板目录名
	OpTnameIcon  string             `protobuf:"bytes,3,opt,name=op_tname_icon,json=opTnameIcon,proto3" json:"op_tname_icon,omitempty"` // 模版目录图标
	OpPinyin     string             `protobuf:"bytes,4,opt,name=op_pinyin,json=opPinyin,proto3" json:"op_pinyin,omitempty"`            // 模版目录拼音
	Title        string             `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`                                  // 标题
	OpImage      string             `protobuf:"bytes,6,opt,name=op_image,json=opImage,proto3" json:"op_image,omitempty"`               // 缩略图
	MdText       string             `protobuf:"bytes,7,opt,name=md_text,json=mdText,proto3" json:"md_text,omitempty"`                  // 摘要
	Docid        string             `protobuf:"bytes,8,opt,name=docid,proto3" json:"docid,omitempty"`                                  // 文章ID
	Clickable    int32              `protobuf:"varint,9,opt,name=clickable,proto3" json:"clickable,omitempty"`                         // 0:不可点击;1:可点击
	OpRelated    []*Tid4_Related    `protobuf:"bytes,10,rep,name=op_related,json=opRelated,proto3" json:"op_related,omitempty"`
	OpDoctor     *Tid4_Doctor       `protobuf:"bytes,11,opt,name=op_doctor,json=opDoctor,proto3" json:"op_doctor,omitempty"`       // 医生背书信息(废弃;改使用op_doctors)
	OpHospital   *Tid4_Hospital     `protobuf:"bytes,12,opt,name=op_hospital,json=opHospital,proto3" json:"op_hospital,omitempty"` // 医院背书信息
	OpAuthor     *Tid4_Author       `protobuf:"bytes,13,opt,name=op_author,json=opAuthor,proto3" json:"op_author,omitempty"`       // 作者信息
	OpKeyword    []string           `protobuf:"bytes,14,rep,name=op_keyword,json=opKeyword,proto3" json:"op_keyword,omitempty"`
	Source       string             `protobuf:"bytes,15,opt,name=source,proto3" json:"source,omitempty"`    // 文章来源
	Istop        int32              `protobuf:"varint,16,opt,name=istop,proto3" json:"istop,omitempty"`     // 置顶标志位;1:置顶;2:置底(不通过Dcache获得)
	Newflag      int32              `protobuf:"varint,17,opt,name=newflag,proto3" json:"newflag,omitempty"` // 1:新
	Diseases     []*Tid_DiseaseItem `protobuf:"bytes,18,rep,name=diseases,proto3" json:"diseases,omitempty"`
	Releasetime  string             `protobuf:"bytes,19,opt,name=releasetime,proto3" json:"releasetime,omitempty"` // 发布时间
	OpThumbs     []string           `protobuf:"bytes,20,rep,name=op_thumbs,json=opThumbs,proto3" json:"op_thumbs,omitempty"`
	OpSole       int32              `protobuf:"varint,21,opt,name=op_sole,json=opSole,proto3" json:"op_sole,omitempty"` // 1:特约独家作者
	Readflag     int32              `protobuf:"varint,22,opt,name=readflag,proto3" json:"readflag,omitempty"`           // 已读标志位;0--未读;1--已读(不通过Dcache获得)
	Type         int32              `protobuf:"varint,23,opt,name=type,proto3" json:"type,omitempty"`                   // 0:普通文章;1:患者故事;2:相关文章;4:热门文章(不通过Dcache获得)
	Getdataurl   string             `protobuf:"bytes,24,opt,name=getdataurl,proto3" json:"getdataurl,omitempty"`        // 获取文章详情链接(第三方使用;不通过Dcache获得)
	Tags         []string           `protobuf:"bytes,25,rep,name=tags,proto3" json:"tags,omitempty"`
	Duration     int32              `protobuf:"varint,26,opt,name=duration,proto3" json:"duration,omitempty"`         // 时长，单位是秒
	Size         int32              `protobuf:"varint,27,opt,name=size,proto3" json:"size,omitempty"`                 // 音频大小，单位KB
	Url          string             `protobuf:"bytes,28,opt,name=url,proto3" json:"url,omitempty"`                    // 音频地址
	Helpful      int32              `protobuf:"varint,29,opt,name=helpful,proto3" json:"helpful,omitempty"`           // 用户点击有帮助(患者文章列表返回;不通过Dcache获得)
	Helpfulcount int32              `protobuf:"varint,30,opt,name=helpfulcount,proto3" json:"helpfulcount,omitempty"` // 总赞数(患者文章列表返回;不通过Dcache获得)
	Paraid       string             `protobuf:"bytes,31,opt,name=paraid,proto3" json:"paraid,omitempty"`              // 段落id(不通过Dcache获得)
	OpDoctors    []*Tid4_Doctor     `protobuf:"bytes,32,rep,name=op_doctors,json=opDoctors,proto3" json:"op_doctors,omitempty"`
	SoleRecruit  *Tid_Recruit       `protobuf:"bytes,33,opt,name=sole_recruit,json=soleRecruit,proto3" json:"sole_recruit,omitempty"` // 临床招募信息
	Front        string             `protobuf:"bytes,34,opt,name=front,proto3" json:"front,omitempty"`                                // 封面图
	Custitle     string             `protobuf:"bytes,35,opt,name=custitle,proto3" json:"custitle,omitempty"`                          // 自定义标题
	Cusimage     string             `protobuf:"bytes,36,opt,name=cusimage,proto3" json:"cusimage,omitempty"`                          // 自定义图片
	Wxdurl       string             `protobuf:"bytes,37,opt,name=wxdurl,proto3" json:"wxdurl,omitempty"`                              // 微信文章URL
	Stitle       string             `protobuf:"bytes,38,opt,name=stitle,proto3" json:"stitle,omitempty"`                              // 短标题(不通过Dcache获得)
	BrowserTs    int64              `protobuf:"varint,39,opt,name=browser_ts,json=browserTs,proto3" json:"browser_ts,omitempty"`      // 浏览时间
	Cid          []*TagObject       `protobuf:"bytes,40,rep,name=cid,proto3" json:"cid,omitempty"`
	Review       *Tid4_Review       `protobuf:"bytes,41,opt,name=review,proto3" json:"review,omitempty"`
	Image        string             `protobuf:"bytes,42,opt,name=image,proto3" json:"image,omitempty"`                          // 图片
	InfoExtra    *Tid4_Info_Extra   `protobuf:"bytes,43,opt,name=info_extra,json=infoExtra,proto3" json:"info_extra,omitempty"` // 慧用药字段
}

func (x *Tid4) Reset() {
	*x = Tid4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid4) ProtoMessage() {}

func (x *Tid4) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid4.ProtoReflect.Descriptor instead.
func (*Tid4) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{23}
}

func (x *Tid4) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Tid4) GetOpTname() string {
	if x != nil {
		return x.OpTname
	}
	return ""
}

func (x *Tid4) GetOpTnameIcon() string {
	if x != nil {
		return x.OpTnameIcon
	}
	return ""
}

func (x *Tid4) GetOpPinyin() string {
	if x != nil {
		return x.OpPinyin
	}
	return ""
}

func (x *Tid4) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tid4) GetOpImage() string {
	if x != nil {
		return x.OpImage
	}
	return ""
}

func (x *Tid4) GetMdText() string {
	if x != nil {
		return x.MdText
	}
	return ""
}

func (x *Tid4) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

func (x *Tid4) GetClickable() int32 {
	if x != nil {
		return x.Clickable
	}
	return 0
}

func (x *Tid4) GetOpRelated() []*Tid4_Related {
	if x != nil {
		return x.OpRelated
	}
	return nil
}

func (x *Tid4) GetOpDoctor() *Tid4_Doctor {
	if x != nil {
		return x.OpDoctor
	}
	return nil
}

func (x *Tid4) GetOpHospital() *Tid4_Hospital {
	if x != nil {
		return x.OpHospital
	}
	return nil
}

func (x *Tid4) GetOpAuthor() *Tid4_Author {
	if x != nil {
		return x.OpAuthor
	}
	return nil
}

func (x *Tid4) GetOpKeyword() []string {
	if x != nil {
		return x.OpKeyword
	}
	return nil
}

func (x *Tid4) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Tid4) GetIstop() int32 {
	if x != nil {
		return x.Istop
	}
	return 0
}

func (x *Tid4) GetNewflag() int32 {
	if x != nil {
		return x.Newflag
	}
	return 0
}

func (x *Tid4) GetDiseases() []*Tid_DiseaseItem {
	if x != nil {
		return x.Diseases
	}
	return nil
}

func (x *Tid4) GetReleasetime() string {
	if x != nil {
		return x.Releasetime
	}
	return ""
}

func (x *Tid4) GetOpThumbs() []string {
	if x != nil {
		return x.OpThumbs
	}
	return nil
}

func (x *Tid4) GetOpSole() int32 {
	if x != nil {
		return x.OpSole
	}
	return 0
}

func (x *Tid4) GetReadflag() int32 {
	if x != nil {
		return x.Readflag
	}
	return 0
}

func (x *Tid4) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Tid4) GetGetdataurl() string {
	if x != nil {
		return x.Getdataurl
	}
	return ""
}

func (x *Tid4) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Tid4) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Tid4) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Tid4) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Tid4) GetHelpful() int32 {
	if x != nil {
		return x.Helpful
	}
	return 0
}

func (x *Tid4) GetHelpfulcount() int32 {
	if x != nil {
		return x.Helpfulcount
	}
	return 0
}

func (x *Tid4) GetParaid() string {
	if x != nil {
		return x.Paraid
	}
	return ""
}

func (x *Tid4) GetOpDoctors() []*Tid4_Doctor {
	if x != nil {
		return x.OpDoctors
	}
	return nil
}

func (x *Tid4) GetSoleRecruit() *Tid_Recruit {
	if x != nil {
		return x.SoleRecruit
	}
	return nil
}

func (x *Tid4) GetFront() string {
	if x != nil {
		return x.Front
	}
	return ""
}

func (x *Tid4) GetCustitle() string {
	if x != nil {
		return x.Custitle
	}
	return ""
}

func (x *Tid4) GetCusimage() string {
	if x != nil {
		return x.Cusimage
	}
	return ""
}

func (x *Tid4) GetWxdurl() string {
	if x != nil {
		return x.Wxdurl
	}
	return ""
}

func (x *Tid4) GetStitle() string {
	if x != nil {
		return x.Stitle
	}
	return ""
}

func (x *Tid4) GetBrowserTs() int64 {
	if x != nil {
		return x.BrowserTs
	}
	return 0
}

func (x *Tid4) GetCid() []*TagObject {
	if x != nil {
		return x.Cid
	}
	return nil
}

func (x *Tid4) GetReview() *Tid4_Review {
	if x != nil {
		return x.Review
	}
	return nil
}

func (x *Tid4) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Tid4) GetInfoExtra() *Tid4_Info_Extra {
	if x != nil {
		return x.InfoExtra
	}
	return nil
}

// ********************************************** tid 5
// *******************************************************
type Tid5 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid    int32  `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`                    // 模版ID
	Title  string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                 // 标题
	MdData string `protobuf:"bytes,3,opt,name=md_data,json=mdData,proto3" json:"md_data,omitempty"` // 正文;markdown
}

func (x *Tid5) Reset() {
	*x = Tid5{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid5) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid5) ProtoMessage() {}

func (x *Tid5) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid5.ProtoReflect.Descriptor instead.
func (*Tid5) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{24}
}

func (x *Tid5) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Tid5) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tid5) GetMdData() string {
	if x != nil {
		return x.MdData
	}
	return ""
}

// ********************************************** tid 6
// *******************************************************
type Tid6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid              int32              `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`                                // 模版ID
	Title            string             `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                             // 标题
	Abs              string             `protobuf:"bytes,3,opt,name=abs,proto3" json:"abs,omitempty"`                                 // 摘要
	Releasetime      string             `protobuf:"bytes,4,opt,name=releasetime,proto3" json:"releasetime,omitempty"`                 // 发布时间
	OpDoctor         *Tid4_Doctor       `protobuf:"bytes,5,opt,name=op_doctor,json=opDoctor,proto3" json:"op_doctor,omitempty"`       // 医生背书信息
	OpHospital       *Tid4_Hospital     `protobuf:"bytes,6,opt,name=op_hospital,json=opHospital,proto3" json:"op_hospital,omitempty"` // 医院背书信息(废弃;改使用op_doctors)
	Source           string             `protobuf:"bytes,7,opt,name=source,proto3" json:"source,omitempty"`                           // 文章来源
	MdText           string             `protobuf:"bytes,8,opt,name=md_text,json=mdText,proto3" json:"md_text,omitempty"`             // 正文
	OpClass          int32              `protobuf:"varint,9,opt,name=op_class,json=opClass,proto3" json:"op_class,omitempty"`         // 9--疑问;10--传闻
	OpKeyword        []string           `protobuf:"bytes,10,rep,name=op_keyword,json=opKeyword,proto3" json:"op_keyword,omitempty"`
	Diseases         []*Tid_DiseaseItem `protobuf:"bytes,11,rep,name=diseases,proto3" json:"diseases,omitempty"`
	OpAuthor         *Tid4_Author       `protobuf:"bytes,12,opt,name=op_author,json=opAuthor,proto3" json:"op_author,omitempty"`          // 作者信息
	OpSole           int32              `protobuf:"varint,13,opt,name=op_sole,json=opSole,proto3" json:"op_sole,omitempty"`               // 1:特约独家作者
	OpCopyright      string             `protobuf:"bytes,14,opt,name=op_copyright,json=opCopyright,proto3" json:"op_copyright,omitempty"` // 版权信息
	Ref              []string           `protobuf:"bytes,15,rep,name=ref,proto3" json:"ref,omitempty"`
	RefInfo          []string           `protobuf:"bytes,16,rep,name=ref_info,json=refInfo,proto3" json:"ref_info,omitempty"`
	Sourceid         int32              `protobuf:"varint,17,opt,name=sourceid,proto3" json:"sourceid,omitempty"`                               // 来源id;0表示自撰，1表示healthwise;2表示公众号，3表示webmd;4表示医生约稿，5表示外包约稿
	CopyrightHead    string             `protobuf:"bytes,18,opt,name=copyright_head,json=copyrightHead,proto3" json:"copyright_head,omitempty"` // 文章详情里面的头部版权展示，原创，授权转载，独家授权
	RecruitDiseases  []string           `protobuf:"bytes,19,rep,name=recruit_diseases,json=recruitDiseases,proto3" json:"recruit_diseases,omitempty"`
	RecruitArea      []string           `protobuf:"bytes,20,rep,name=recruit_area,json=recruitArea,proto3" json:"recruit_area,omitempty"`
	Duration         int32              `protobuf:"varint,21,opt,name=duration,proto3" json:"duration,omitempty"` // 时长，单位是秒
	Size             int32              `protobuf:"varint,22,opt,name=size,proto3" json:"size,omitempty"`         // 音频大小，单位KB
	Url              string             `protobuf:"bytes,23,opt,name=url,proto3" json:"url,omitempty"`            // 音频地址
	RelatedDocs      []string           `protobuf:"bytes,24,rep,name=related_docs,json=relatedDocs,proto3" json:"related_docs,omitempty"`
	OpDoctors        []*Tid4_Doctor     `protobuf:"bytes,25,rep,name=op_doctors,json=opDoctors,proto3" json:"op_doctors,omitempty"`
	InfoType         int32              `protobuf:"varint,26,opt,name=info_type,json=infoType,proto3" json:"info_type,omitempty"` // 0:常规资讯;1:深度资讯;2:前沿资讯
	Image            string             `protobuf:"bytes,27,opt,name=image,proto3" json:"image,omitempty"`                        // 背景图
	RecruitTreatment []string           `protobuf:"bytes,28,rep,name=recruit_treatment,json=recruitTreatment,proto3" json:"recruit_treatment,omitempty"`
	SoleRecruit      *Tid_Recruit       `protobuf:"bytes,29,opt,name=sole_recruit,json=soleRecruit,proto3" json:"sole_recruit,omitempty"` // 临床招募信息
	Docid            string             `protobuf:"bytes,30,opt,name=docid,proto3" json:"docid,omitempty"`                                // 文章ID
	SummaryUrl       string             `protobuf:"bytes,31,opt,name=summary_url,json=summaryUrl,proto3" json:"summary_url,omitempty"`    // 摘要图片url
	Ctype            int32              `protobuf:"varint,32,opt,name=ctype,proto3" json:"ctype,omitempty"`                               // 文章类型
	Thanks           []*Tid_Thank       `protobuf:"bytes,33,rep,name=thanks,proto3" json:"thanks,omitempty"`
	InfoExtra        *Tid4_Info_Extra   `protobuf:"bytes,34,opt,name=info_extra,json=infoExtra,proto3" json:"info_extra,omitempty"`
}

func (x *Tid6) Reset() {
	*x = Tid6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid6) ProtoMessage() {}

func (x *Tid6) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid6.ProtoReflect.Descriptor instead.
func (*Tid6) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{25}
}

func (x *Tid6) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Tid6) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tid6) GetAbs() string {
	if x != nil {
		return x.Abs
	}
	return ""
}

func (x *Tid6) GetReleasetime() string {
	if x != nil {
		return x.Releasetime
	}
	return ""
}

func (x *Tid6) GetOpDoctor() *Tid4_Doctor {
	if x != nil {
		return x.OpDoctor
	}
	return nil
}

func (x *Tid6) GetOpHospital() *Tid4_Hospital {
	if x != nil {
		return x.OpHospital
	}
	return nil
}

func (x *Tid6) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Tid6) GetMdText() string {
	if x != nil {
		return x.MdText
	}
	return ""
}

func (x *Tid6) GetOpClass() int32 {
	if x != nil {
		return x.OpClass
	}
	return 0
}

func (x *Tid6) GetOpKeyword() []string {
	if x != nil {
		return x.OpKeyword
	}
	return nil
}

func (x *Tid6) GetDiseases() []*Tid_DiseaseItem {
	if x != nil {
		return x.Diseases
	}
	return nil
}

func (x *Tid6) GetOpAuthor() *Tid4_Author {
	if x != nil {
		return x.OpAuthor
	}
	return nil
}

func (x *Tid6) GetOpSole() int32 {
	if x != nil {
		return x.OpSole
	}
	return 0
}

func (x *Tid6) GetOpCopyright() string {
	if x != nil {
		return x.OpCopyright
	}
	return ""
}

func (x *Tid6) GetRef() []string {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *Tid6) GetRefInfo() []string {
	if x != nil {
		return x.RefInfo
	}
	return nil
}

func (x *Tid6) GetSourceid() int32 {
	if x != nil {
		return x.Sourceid
	}
	return 0
}

func (x *Tid6) GetCopyrightHead() string {
	if x != nil {
		return x.CopyrightHead
	}
	return ""
}

func (x *Tid6) GetRecruitDiseases() []string {
	if x != nil {
		return x.RecruitDiseases
	}
	return nil
}

func (x *Tid6) GetRecruitArea() []string {
	if x != nil {
		return x.RecruitArea
	}
	return nil
}

func (x *Tid6) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Tid6) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Tid6) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Tid6) GetRelatedDocs() []string {
	if x != nil {
		return x.RelatedDocs
	}
	return nil
}

func (x *Tid6) GetOpDoctors() []*Tid4_Doctor {
	if x != nil {
		return x.OpDoctors
	}
	return nil
}

func (x *Tid6) GetInfoType() int32 {
	if x != nil {
		return x.InfoType
	}
	return 0
}

func (x *Tid6) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Tid6) GetRecruitTreatment() []string {
	if x != nil {
		return x.RecruitTreatment
	}
	return nil
}

func (x *Tid6) GetSoleRecruit() *Tid_Recruit {
	if x != nil {
		return x.SoleRecruit
	}
	return nil
}

func (x *Tid6) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

func (x *Tid6) GetSummaryUrl() string {
	if x != nil {
		return x.SummaryUrl
	}
	return ""
}

func (x *Tid6) GetCtype() int32 {
	if x != nil {
		return x.Ctype
	}
	return 0
}

func (x *Tid6) GetThanks() []*Tid_Thank {
	if x != nil {
		return x.Thanks
	}
	return nil
}

func (x *Tid6) GetInfoExtra() *Tid4_Info_Extra {
	if x != nil {
		return x.InfoExtra
	}
	return nil
}

// ********************************************** tid 7
// *******************************************************
type Tid7_ImageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image  string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`                 // 图片url
	Title  string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                 // 标题
	MdText string `protobuf:"bytes,3,opt,name=md_text,json=mdText,proto3" json:"md_text,omitempty"` // 正文
}

func (x *Tid7_ImageInfo) Reset() {
	*x = Tid7_ImageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid7_ImageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid7_ImageInfo) ProtoMessage() {}

func (x *Tid7_ImageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid7_ImageInfo.ProtoReflect.Descriptor instead.
func (*Tid7_ImageInfo) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{26}
}

func (x *Tid7_ImageInfo) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Tid7_ImageInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tid7_ImageInfo) GetMdText() string {
	if x != nil {
		return x.MdText
	}
	return ""
}

type Tid7 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid   int32             `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`    // 模版ID
	Title string            `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"` // 标题
	List  []*Tid7_ImageInfo `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *Tid7) Reset() {
	*x = Tid7{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid7) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid7) ProtoMessage() {}

func (x *Tid7) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid7.ProtoReflect.Descriptor instead.
func (*Tid7) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{27}
}

func (x *Tid7) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Tid7) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tid7) GetList() []*Tid7_ImageInfo {
	if x != nil {
		return x.List
	}
	return nil
}

// ********************************************** tid 9
// *******************************************************
type Tid9 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid         int32           `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`                                     // 模版ID
	OpTname     string          `protobuf:"bytes,2,opt,name=op_tname,json=opTname,proto3" json:"op_tname,omitempty"`               // 模板目录名
	OpTnameIcon string          `protobuf:"bytes,3,opt,name=op_tname_icon,json=opTnameIcon,proto3" json:"op_tname_icon,omitempty"` // 模版目录图标
	Title       string          `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`                                  // 标题
	Images      []string        `protobuf:"bytes,5,rep,name=images,proto3" json:"images,omitempty"`
	Docid       string          `protobuf:"bytes,6,opt,name=docid,proto3" json:"docid,omitempty"`          // 文章ID
	Clickable   int32           `protobuf:"varint,7,opt,name=clickable,proto3" json:"clickable,omitempty"` // 0:不可点击;1:可点击
	OpRelated   []*Tid4_Related `protobuf:"bytes,8,rep,name=op_related,json=opRelated,proto3" json:"op_related,omitempty"`
}

func (x *Tid9) Reset() {
	*x = Tid9{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid9) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid9) ProtoMessage() {}

func (x *Tid9) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid9.ProtoReflect.Descriptor instead.
func (*Tid9) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{28}
}

func (x *Tid9) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Tid9) GetOpTname() string {
	if x != nil {
		return x.OpTname
	}
	return ""
}

func (x *Tid9) GetOpTnameIcon() string {
	if x != nil {
		return x.OpTnameIcon
	}
	return ""
}

func (x *Tid9) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tid9) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *Tid9) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

func (x *Tid9) GetClickable() int32 {
	if x != nil {
		return x.Clickable
	}
	return 0
}

func (x *Tid9) GetOpRelated() []*Tid4_Related {
	if x != nil {
		return x.OpRelated
	}
	return nil
}

// ********************************************** tid 10
// *******************************************************
type Tid10 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid          int32              `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`                                     // 模版ID
	OpTname      string             `protobuf:"bytes,2,opt,name=op_tname,json=opTname,proto3" json:"op_tname,omitempty"`               // 模板目录名
	OpTnameIcon  string             `protobuf:"bytes,3,opt,name=op_tname_icon,json=opTnameIcon,proto3" json:"op_tname_icon,omitempty"` // 模版目录图标
	Title        string             `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`                                  // 标题
	Text         string             `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`                                    // 摘要
	Image        string             `protobuf:"bytes,6,opt,name=image,proto3" json:"image,omitempty"`                                  // 缩略图
	Duration     int32              `protobuf:"varint,7,opt,name=duration,proto3" json:"duration,omitempty"`                           // 时长，单位秒
	Docid        string             `protobuf:"bytes,8,opt,name=docid,proto3" json:"docid,omitempty"`                                  // 文章ID
	OpKeyword    []string           `protobuf:"bytes,9,rep,name=op_keyword,json=opKeyword,proto3" json:"op_keyword,omitempty"`
	Newflag      int32              `protobuf:"varint,10,opt,name=newflag,proto3" json:"newflag,omitempty"` // 1:新
	Istop        int32              `protobuf:"varint,11,opt,name=istop,proto3" json:"istop,omitempty"`     // 置顶标志位;1:置顶;2:置底(不通过Dcache获得)
	Source       string             `protobuf:"bytes,12,opt,name=source,proto3" json:"source,omitempty"`    // 文章来源
	Diseases     []*Tid_DiseaseItem `protobuf:"bytes,13,rep,name=diseases,proto3" json:"diseases,omitempty"`
	OpDoctor     *Tid4_Doctor       `protobuf:"bytes,14,opt,name=op_doctor,json=opDoctor,proto3" json:"op_doctor,omitempty"`       // 医生背书信息(废弃;改使用op_doctors)
	OpHospital   *Tid4_Hospital     `protobuf:"bytes,15,opt,name=op_hospital,json=opHospital,proto3" json:"op_hospital,omitempty"` // 医院背书信息
	OpSole       int32              `protobuf:"varint,16,opt,name=op_sole,json=opSole,proto3" json:"op_sole,omitempty"`            // 1:特约独家作者
	Readflag     int32              `protobuf:"varint,17,opt,name=readflag,proto3" json:"readflag,omitempty"`                      // 已读标志位;0--未读;1--已读
	Getdataurl   string             `protobuf:"bytes,18,opt,name=getdataurl,proto3" json:"getdataurl,omitempty"`                   // 获取文章详情链接
	Src          string             `protobuf:"bytes,19,opt,name=src,proto3" json:"src,omitempty"`                                 // 视频源
	Tags         []string           `protobuf:"bytes,20,rep,name=tags,proto3" json:"tags,omitempty"`
	Helpful      int32              `protobuf:"varint,21,opt,name=helpful,proto3" json:"helpful,omitempty"`           // 用户点击有帮助(患者文章列表返回;不通过Dcache获得)
	Helpfulcount int32              `protobuf:"varint,22,opt,name=helpfulcount,proto3" json:"helpfulcount,omitempty"` // 总赞数(患者文章列表返回;不通过Dcache获得)
	Type         int32              `protobuf:"varint,23,opt,name=type,proto3" json:"type,omitempty"`                 // 2:相关文章;4:热门文章(不通过Dcache获得)
	Paraid       string             `protobuf:"bytes,24,opt,name=paraid,proto3" json:"paraid,omitempty"`              // 段落id(不通过Dcache获得)
	OpDoctors    []*Tid4_Doctor     `protobuf:"bytes,25,rep,name=op_doctors,json=opDoctors,proto3" json:"op_doctors,omitempty"`
	MdText       string             `protobuf:"bytes,26,opt,name=md_text,json=mdText,proto3" json:"md_text,omitempty"`           // 正文
	Front        string             `protobuf:"bytes,27,opt,name=front,proto3" json:"front,omitempty"`                           // 封面图
	Custitle     string             `protobuf:"bytes,28,opt,name=custitle,proto3" json:"custitle,omitempty"`                     // 自定义标题
	Cusimage     string             `protobuf:"bytes,29,opt,name=cusimage,proto3" json:"cusimage,omitempty"`                     // 自定义图片
	Wxdurl       string             `protobuf:"bytes,30,opt,name=wxdurl,proto3" json:"wxdurl,omitempty"`                         // 微信文章URL
	Size         int32              `protobuf:"varint,31,opt,name=size,proto3" json:"size,omitempty"`                            // 视频大小，单位KB
	Stitle       string             `protobuf:"bytes,32,opt,name=stitle,proto3" json:"stitle,omitempty"`                         // 短标题(不通过Dcache获得)
	BrowserTs    int64              `protobuf:"varint,33,opt,name=browser_ts,json=browserTs,proto3" json:"browser_ts,omitempty"` // 浏览时间
	Doctype      int32              `protobuf:"varint,34,opt,name=doctype,proto3" json:"doctype,omitempty"`                      // 文章类型;8:视频;16:音频;18:直播
	Direction    int32              `protobuf:"varint,35,opt,name=direction,proto3" json:"direction,omitempty"`                  // 1:横屏;2:竖屏
	Cid          []*TagObject       `protobuf:"bytes,36,rep,name=cid,proto3" json:"cid,omitempty"`
	Liveid       string             `protobuf:"bytes,37,opt,name=liveid,proto3" json:"liveid,omitempty"`      // 直播ID
	Sourceid     int32              `protobuf:"varint,38,opt,name=sourceid,proto3" json:"sourceid,omitempty"` // 来源id;0表示自撰，1表示healthwise;2表示公众号，3表示webmd;4表示医生约稿，5表示外包约稿
	Review       *Tid4_Review       `protobuf:"bytes,40,opt,name=review,proto3" json:"review,omitempty"`
	Releasetime  string             `protobuf:"bytes,39,opt,name=releasetime,proto3" json:"releasetime,omitempty"` // 发布时间
}

func (x *Tid10) Reset() {
	*x = Tid10{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid10) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid10) ProtoMessage() {}

func (x *Tid10) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid10.ProtoReflect.Descriptor instead.
func (*Tid10) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{29}
}

func (x *Tid10) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Tid10) GetOpTname() string {
	if x != nil {
		return x.OpTname
	}
	return ""
}

func (x *Tid10) GetOpTnameIcon() string {
	if x != nil {
		return x.OpTnameIcon
	}
	return ""
}

func (x *Tid10) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tid10) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Tid10) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Tid10) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Tid10) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

func (x *Tid10) GetOpKeyword() []string {
	if x != nil {
		return x.OpKeyword
	}
	return nil
}

func (x *Tid10) GetNewflag() int32 {
	if x != nil {
		return x.Newflag
	}
	return 0
}

func (x *Tid10) GetIstop() int32 {
	if x != nil {
		return x.Istop
	}
	return 0
}

func (x *Tid10) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Tid10) GetDiseases() []*Tid_DiseaseItem {
	if x != nil {
		return x.Diseases
	}
	return nil
}

func (x *Tid10) GetOpDoctor() *Tid4_Doctor {
	if x != nil {
		return x.OpDoctor
	}
	return nil
}

func (x *Tid10) GetOpHospital() *Tid4_Hospital {
	if x != nil {
		return x.OpHospital
	}
	return nil
}

func (x *Tid10) GetOpSole() int32 {
	if x != nil {
		return x.OpSole
	}
	return 0
}

func (x *Tid10) GetReadflag() int32 {
	if x != nil {
		return x.Readflag
	}
	return 0
}

func (x *Tid10) GetGetdataurl() string {
	if x != nil {
		return x.Getdataurl
	}
	return ""
}

func (x *Tid10) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *Tid10) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Tid10) GetHelpful() int32 {
	if x != nil {
		return x.Helpful
	}
	return 0
}

func (x *Tid10) GetHelpfulcount() int32 {
	if x != nil {
		return x.Helpfulcount
	}
	return 0
}

func (x *Tid10) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Tid10) GetParaid() string {
	if x != nil {
		return x.Paraid
	}
	return ""
}

func (x *Tid10) GetOpDoctors() []*Tid4_Doctor {
	if x != nil {
		return x.OpDoctors
	}
	return nil
}

func (x *Tid10) GetMdText() string {
	if x != nil {
		return x.MdText
	}
	return ""
}

func (x *Tid10) GetFront() string {
	if x != nil {
		return x.Front
	}
	return ""
}

func (x *Tid10) GetCustitle() string {
	if x != nil {
		return x.Custitle
	}
	return ""
}

func (x *Tid10) GetCusimage() string {
	if x != nil {
		return x.Cusimage
	}
	return ""
}

func (x *Tid10) GetWxdurl() string {
	if x != nil {
		return x.Wxdurl
	}
	return ""
}

func (x *Tid10) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Tid10) GetStitle() string {
	if x != nil {
		return x.Stitle
	}
	return ""
}

func (x *Tid10) GetBrowserTs() int64 {
	if x != nil {
		return x.BrowserTs
	}
	return 0
}

func (x *Tid10) GetDoctype() int32 {
	if x != nil {
		return x.Doctype
	}
	return 0
}

func (x *Tid10) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *Tid10) GetCid() []*TagObject {
	if x != nil {
		return x.Cid
	}
	return nil
}

func (x *Tid10) GetLiveid() string {
	if x != nil {
		return x.Liveid
	}
	return ""
}

func (x *Tid10) GetSourceid() int32 {
	if x != nil {
		return x.Sourceid
	}
	return 0
}

func (x *Tid10) GetReview() *Tid4_Review {
	if x != nil {
		return x.Review
	}
	return nil
}

func (x *Tid10) GetReleasetime() string {
	if x != nil {
		return x.Releasetime
	}
	return ""
}

// ********************************************** tid 11
// *******************************************************
type Tid11 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid         int32  `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`                                     // 模版ID
	OpTname     string `protobuf:"bytes,2,opt,name=op_tname,json=opTname,proto3" json:"op_tname,omitempty"`               // 模板目录名
	OpTnameIcon string `protobuf:"bytes,3,opt,name=op_tname_icon,json=opTnameIcon,proto3" json:"op_tname_icon,omitempty"` // 模版目录图标
	Title       string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`                                  // 标题
	Text        string `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`                                    // 正文
	Image       string `protobuf:"bytes,6,opt,name=image,proto3" json:"image,omitempty"`                                  // 图片
	Docid       string `protobuf:"bytes,7,opt,name=docid,proto3" json:"docid,omitempty"`                                  // 文章ID
}

func (x *Tid11) Reset() {
	*x = Tid11{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid11) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid11) ProtoMessage() {}

func (x *Tid11) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid11.ProtoReflect.Descriptor instead.
func (*Tid11) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{30}
}

func (x *Tid11) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Tid11) GetOpTname() string {
	if x != nil {
		return x.OpTname
	}
	return ""
}

func (x *Tid11) GetOpTnameIcon() string {
	if x != nil {
		return x.OpTnameIcon
	}
	return ""
}

func (x *Tid11) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tid11) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Tid11) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Tid11) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

// ********************************************** tid 13
// *******************************************************
type Tid13 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid         int32  `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`                                     // 模版ID
	OpTname     string `protobuf:"bytes,2,opt,name=op_tname,json=opTname,proto3" json:"op_tname,omitempty"`               // 模板目录名
	OpTnameIcon string `protobuf:"bytes,3,opt,name=op_tname_icon,json=opTnameIcon,proto3" json:"op_tname_icon,omitempty"` // 模版目录图标
	Title       string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`                                  // 标题
	Abs         string `protobuf:"bytes,5,opt,name=abs,proto3" json:"abs,omitempty"`                                      // 摘要
	Image       string `protobuf:"bytes,6,opt,name=image,proto3" json:"image,omitempty"`                                  // 图片
	ImageBg     string `protobuf:"bytes,7,opt,name=image_bg,json=imageBg,proto3" json:"image_bg,omitempty"`               // 背景图片
	Jingpin     int32  `protobuf:"varint,8,opt,name=jingpin,proto3" json:"jingpin,omitempty"`                             // 0:普通版;1:完整版;2:母词条
	Type        int32  `protobuf:"varint,9,opt,name=type,proto3" json:"type,omitempty"`                                   // 疾病type
	Docid       string `protobuf:"bytes,10,opt,name=docid,proto3" json:"docid,omitempty"`                                 // 综述ID
}

func (x *Tid13) Reset() {
	*x = Tid13{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid13) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid13) ProtoMessage() {}

func (x *Tid13) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid13.ProtoReflect.Descriptor instead.
func (*Tid13) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{31}
}

func (x *Tid13) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Tid13) GetOpTname() string {
	if x != nil {
		return x.OpTname
	}
	return ""
}

func (x *Tid13) GetOpTnameIcon() string {
	if x != nil {
		return x.OpTnameIcon
	}
	return ""
}

func (x *Tid13) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tid13) GetAbs() string {
	if x != nil {
		return x.Abs
	}
	return ""
}

func (x *Tid13) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Tid13) GetImageBg() string {
	if x != nil {
		return x.ImageBg
	}
	return ""
}

func (x *Tid13) GetJingpin() int32 {
	if x != nil {
		return x.Jingpin
	}
	return 0
}

func (x *Tid13) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Tid13) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

// ********************************************** tid 14
// *******************************************************
type Tid14 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid         int32  `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`                                     // 模版ID
	OpTname     string `protobuf:"bytes,2,opt,name=op_tname,json=opTname,proto3" json:"op_tname,omitempty"`               // 模板目录名
	OpTnameIcon string `protobuf:"bytes,3,opt,name=op_tname_icon,json=opTnameIcon,proto3" json:"op_tname_icon,omitempty"` // 模版目录图标
	Title       string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`                                  // 标题
	Abs         string `protobuf:"bytes,5,opt,name=abs,proto3" json:"abs,omitempty"`                                      // 摘要
	Image       string `protobuf:"bytes,6,opt,name=image,proto3" json:"image,omitempty"`                                  // 图片
	OpMdText    string `protobuf:"bytes,7,opt,name=op_md_text,json=opMdText,proto3" json:"op_md_text,omitempty"`          // 正文
}

func (x *Tid14) Reset() {
	*x = Tid14{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid14) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid14) ProtoMessage() {}

func (x *Tid14) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid14.ProtoReflect.Descriptor instead.
func (*Tid14) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{32}
}

func (x *Tid14) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Tid14) GetOpTname() string {
	if x != nil {
		return x.OpTname
	}
	return ""
}

func (x *Tid14) GetOpTnameIcon() string {
	if x != nil {
		return x.OpTnameIcon
	}
	return ""
}

func (x *Tid14) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tid14) GetAbs() string {
	if x != nil {
		return x.Abs
	}
	return ""
}

func (x *Tid14) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Tid14) GetOpMdText() string {
	if x != nil {
		return x.OpMdText
	}
	return ""
}

// ********************************************** tid 15
// *******************************************************
type Tid15_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon string `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"` // 图标
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // 名称
}

func (x *Tid15_List) Reset() {
	*x = Tid15_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid15_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid15_List) ProtoMessage() {}

func (x *Tid15_List) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid15_List.ProtoReflect.Descriptor instead.
func (*Tid15_List) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{33}
}

func (x *Tid15_List) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Tid15_List) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Tid15 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid         int32         `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`                                     // 模版ID
	OpTname     string        `protobuf:"bytes,2,opt,name=op_tname,json=opTname,proto3" json:"op_tname,omitempty"`               // 模板目录名
	OpTnameIcon string        `protobuf:"bytes,3,opt,name=op_tname_icon,json=opTnameIcon,proto3" json:"op_tname_icon,omitempty"` // 模版目录图标
	Title       string        `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`                                  // 标题
	Icon        string        `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`                                    // 标题图标
	Text        string        `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`                                    // 正文
	List        []*Tid15_List `protobuf:"bytes,7,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *Tid15) Reset() {
	*x = Tid15{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid15) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid15) ProtoMessage() {}

func (x *Tid15) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid15.ProtoReflect.Descriptor instead.
func (*Tid15) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{34}
}

func (x *Tid15) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Tid15) GetOpTname() string {
	if x != nil {
		return x.OpTname
	}
	return ""
}

func (x *Tid15) GetOpTnameIcon() string {
	if x != nil {
		return x.OpTnameIcon
	}
	return ""
}

func (x *Tid15) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tid15) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Tid15) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Tid15) GetList() []*Tid15_List {
	if x != nil {
		return x.List
	}
	return nil
}

// ********************************************** tid 16
// *******************************************************
type Tid16 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid         int32    `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`                                     // 模版ID
	OpTname     string   `protobuf:"bytes,2,opt,name=op_tname,json=opTname,proto3" json:"op_tname,omitempty"`               // 模板目录名
	OpTnameIcon string   `protobuf:"bytes,3,opt,name=op_tname_icon,json=opTnameIcon,proto3" json:"op_tname_icon,omitempty"` // 模版目录图标
	Title       string   `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`                                  // 标题
	Icon        string   `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`                                    // 标题图标
	Docid       string   `protobuf:"bytes,6,opt,name=docid,proto3" json:"docid,omitempty"`                                  // 文章ID
	OpList      []string `protobuf:"bytes,7,rep,name=op_list,json=opList,proto3" json:"op_list,omitempty"`
}

func (x *Tid16) Reset() {
	*x = Tid16{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid16) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid16) ProtoMessage() {}

func (x *Tid16) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid16.ProtoReflect.Descriptor instead.
func (*Tid16) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{35}
}

func (x *Tid16) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Tid16) GetOpTname() string {
	if x != nil {
		return x.OpTname
	}
	return ""
}

func (x *Tid16) GetOpTnameIcon() string {
	if x != nil {
		return x.OpTnameIcon
	}
	return ""
}

func (x *Tid16) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tid16) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Tid16) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

func (x *Tid16) GetOpList() []string {
	if x != nil {
		return x.OpList
	}
	return nil
}

// ********************************************** tid 17
// *******************************************************
type Tid17 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid          int32              `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`                                     // 模版ID
	OpTname      string             `protobuf:"bytes,2,opt,name=op_tname,json=opTname,proto3" json:"op_tname,omitempty"`               // 模板目录名
	OpTnameIcon  string             `protobuf:"bytes,3,opt,name=op_tname_icon,json=opTnameIcon,proto3" json:"op_tname_icon,omitempty"` // 模版目录图标
	Title        string             `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`                                  // 标题
	Abs          string             `protobuf:"bytes,5,opt,name=abs,proto3" json:"abs,omitempty"`                                      // 摘要
	MdText       string             `protobuf:"bytes,6,opt,name=md_text,json=mdText,proto3" json:"md_text,omitempty"`                  // 正文
	Duration     int32              `protobuf:"varint,7,opt,name=duration,proto3" json:"duration,omitempty"`                           // 时长，单位秒
	Src          string             `protobuf:"bytes,8,opt,name=src,proto3" json:"src,omitempty"`                                      // 视频源
	Size         int32              `protobuf:"varint,9,opt,name=size,proto3" json:"size,omitempty"`                                   // 视频大小，单位KB
	OpKeyword    []string           `protobuf:"bytes,10,rep,name=op_keyword,json=opKeyword,proto3" json:"op_keyword,omitempty"`
	Diseases     []*Tid_DiseaseItem `protobuf:"bytes,11,rep,name=diseases,proto3" json:"diseases,omitempty"`
	OpDoctor     *Tid4_Doctor       `protobuf:"bytes,12,opt,name=op_doctor,json=opDoctor,proto3" json:"op_doctor,omitempty"`          // 医生背书信息(废弃;改使用op_doctors)
	OpHospital   *Tid4_Hospital     `protobuf:"bytes,13,opt,name=op_hospital,json=opHospital,proto3" json:"op_hospital,omitempty"`    // 医院背书信息
	Source       string             `protobuf:"bytes,14,opt,name=source,proto3" json:"source,omitempty"`                              // 文章来源
	OpSole       int32              `protobuf:"varint,15,opt,name=op_sole,json=opSole,proto3" json:"op_sole,omitempty"`               // 1:特约独家作者
	OpCopyright  string             `protobuf:"bytes,16,opt,name=op_copyright,json=opCopyright,proto3" json:"op_copyright,omitempty"` // 版权信息
	Image        string             `protobuf:"bytes,17,opt,name=image,proto3" json:"image,omitempty"`                                // 图片
	RelatedDocs  []string           `protobuf:"bytes,18,rep,name=related_docs,json=relatedDocs,proto3" json:"related_docs,omitempty"`
	OpDoctors    []*Tid4_Doctor     `protobuf:"bytes,19,rep,name=op_doctors,json=opDoctors,proto3" json:"op_doctors,omitempty"`
	Docid        string             `protobuf:"bytes,20,opt,name=docid,proto3" json:"docid,omitempty"`                                     // 文章ID
	Desc         string             `protobuf:"bytes,21,opt,name=desc,proto3" json:"desc,omitempty"`                                       // 语音标题
	Doctype      int32              `protobuf:"varint,22,opt,name=doctype,proto3" json:"doctype,omitempty"`                                // 文章类型;8:视频;16:音频
	Subjectname  string             `protobuf:"bytes,23,opt,name=subjectname,proto3" json:"subjectname,omitempty"`                         // 专栏名称
	Direction    int32              `protobuf:"varint,24,opt,name=direction,proto3" json:"direction,omitempty"`                            // 1:横屏;2:竖屏
	Sourceid     int32              `protobuf:"varint,25,opt,name=sourceid,proto3" json:"sourceid,omitempty"`                              // 来源id;0表示自撰，1表示healthwise;2表示公众号，3表示webmd;4表示医生约稿，5表示外包约稿
	AntiTheftUrl string             `protobuf:"bytes,26,opt,name=anti_theft_url,json=antiTheftUrl,proto3" json:"anti_theft_url,omitempty"` // vod 防盗链
	SrcUrl       string             `protobuf:"bytes,27,opt,name=src_url,json=srcUrl,proto3" json:"src_url,omitempty"`                     // vod 原始链接（永久链接）
}

func (x *Tid17) Reset() {
	*x = Tid17{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid17) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid17) ProtoMessage() {}

func (x *Tid17) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid17.ProtoReflect.Descriptor instead.
func (*Tid17) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{36}
}

func (x *Tid17) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Tid17) GetOpTname() string {
	if x != nil {
		return x.OpTname
	}
	return ""
}

func (x *Tid17) GetOpTnameIcon() string {
	if x != nil {
		return x.OpTnameIcon
	}
	return ""
}

func (x *Tid17) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tid17) GetAbs() string {
	if x != nil {
		return x.Abs
	}
	return ""
}

func (x *Tid17) GetMdText() string {
	if x != nil {
		return x.MdText
	}
	return ""
}

func (x *Tid17) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Tid17) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *Tid17) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Tid17) GetOpKeyword() []string {
	if x != nil {
		return x.OpKeyword
	}
	return nil
}

func (x *Tid17) GetDiseases() []*Tid_DiseaseItem {
	if x != nil {
		return x.Diseases
	}
	return nil
}

func (x *Tid17) GetOpDoctor() *Tid4_Doctor {
	if x != nil {
		return x.OpDoctor
	}
	return nil
}

func (x *Tid17) GetOpHospital() *Tid4_Hospital {
	if x != nil {
		return x.OpHospital
	}
	return nil
}

func (x *Tid17) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Tid17) GetOpSole() int32 {
	if x != nil {
		return x.OpSole
	}
	return 0
}

func (x *Tid17) GetOpCopyright() string {
	if x != nil {
		return x.OpCopyright
	}
	return ""
}

func (x *Tid17) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Tid17) GetRelatedDocs() []string {
	if x != nil {
		return x.RelatedDocs
	}
	return nil
}

func (x *Tid17) GetOpDoctors() []*Tid4_Doctor {
	if x != nil {
		return x.OpDoctors
	}
	return nil
}

func (x *Tid17) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

func (x *Tid17) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Tid17) GetDoctype() int32 {
	if x != nil {
		return x.Doctype
	}
	return 0
}

func (x *Tid17) GetSubjectname() string {
	if x != nil {
		return x.Subjectname
	}
	return ""
}

func (x *Tid17) GetDirection() int32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *Tid17) GetSourceid() int32 {
	if x != nil {
		return x.Sourceid
	}
	return 0
}

func (x *Tid17) GetAntiTheftUrl() string {
	if x != nil {
		return x.AntiTheftUrl
	}
	return ""
}

func (x *Tid17) GetSrcUrl() string {
	if x != nil {
		return x.SrcUrl
	}
	return ""
}

// ********************************************** tid 18
// *******************************************************
type Tid18_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`  // 名称
	Type int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"` // 类型
}

func (x *Tid18_List) Reset() {
	*x = Tid18_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid18_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid18_List) ProtoMessage() {}

func (x *Tid18_List) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid18_List.ProtoReflect.Descriptor instead.
func (*Tid18_List) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{37}
}

func (x *Tid18_List) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tid18_List) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type Tid18 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid          int32         `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`                                      // 模版ID
	OpHospital   string        `protobuf:"bytes,2,opt,name=op_hospital,json=opHospital,proto3" json:"op_hospital,omitempty"`       // 医院名称
	DepartmentCn string        `protobuf:"bytes,3,opt,name=department_cn,json=departmentCn,proto3" json:"department_cn,omitempty"` // 科室中文名
	DepartmentEn string        `protobuf:"bytes,4,opt,name=department_en,json=departmentEn,proto3" json:"department_en,omitempty"` // 科室英文名
	OpDoctor     string        `protobuf:"bytes,5,opt,name=op_doctor,json=opDoctor,proto3" json:"op_doctor,omitempty"`             // 医生名
	OpPosition   string        `protobuf:"bytes,6,opt,name=op_position,json=opPosition,proto3" json:"op_position,omitempty"`       // 医生职称
	OpIcon       string        `protobuf:"bytes,7,opt,name=op_icon,json=opIcon,proto3" json:"op_icon,omitempty"`                   // 图标地址
	Image        string        `protobuf:"bytes,8,opt,name=image,proto3" json:"image,omitempty"`                                   // 图片地址
	List         []*Tid18_List `protobuf:"bytes,9,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *Tid18) Reset() {
	*x = Tid18{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid18) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid18) ProtoMessage() {}

func (x *Tid18) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid18.ProtoReflect.Descriptor instead.
func (*Tid18) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{38}
}

func (x *Tid18) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Tid18) GetOpHospital() string {
	if x != nil {
		return x.OpHospital
	}
	return ""
}

func (x *Tid18) GetDepartmentCn() string {
	if x != nil {
		return x.DepartmentCn
	}
	return ""
}

func (x *Tid18) GetDepartmentEn() string {
	if x != nil {
		return x.DepartmentEn
	}
	return ""
}

func (x *Tid18) GetOpDoctor() string {
	if x != nil {
		return x.OpDoctor
	}
	return ""
}

func (x *Tid18) GetOpPosition() string {
	if x != nil {
		return x.OpPosition
	}
	return ""
}

func (x *Tid18) GetOpIcon() string {
	if x != nil {
		return x.OpIcon
	}
	return ""
}

func (x *Tid18) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Tid18) GetList() []*Tid18_List {
	if x != nil {
		return x.List
	}
	return nil
}

// ********************************************** tid 19
// *******************************************************
type Tid19_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`     // 名称(病因、症状)
	Pinyin string `protobuf:"bytes,2,opt,name=pinyin,proto3" json:"pinyin,omitempty"` // 拼音(bingyin、zhengzhuang)
	Icon   string `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`     // 图标
}

func (x *Tid19_List) Reset() {
	*x = Tid19_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid19_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid19_List) ProtoMessage() {}

func (x *Tid19_List) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid19_List.ProtoReflect.Descriptor instead.
func (*Tid19_List) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{39}
}

func (x *Tid19_List) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tid19_List) GetPinyin() string {
	if x != nil {
		return x.Pinyin
	}
	return ""
}

func (x *Tid19_List) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type Tid19 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid  int32         `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"` // 模版ID
	List []*Tid19_List `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *Tid19) Reset() {
	*x = Tid19{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid19) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid19) ProtoMessage() {}

func (x *Tid19) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid19.ProtoReflect.Descriptor instead.
func (*Tid19) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{40}
}

func (x *Tid19) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Tid19) GetList() []*Tid19_List {
	if x != nil {
		return x.List
	}
	return nil
}

// ********************************************** tid 20
// *******************************************************
type Tid20 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid        int32          `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`                                // 模版ID
	Title      string         `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                             // 标题
	OpDoctor   *Tid4_Doctor   `protobuf:"bytes,3,opt,name=op_doctor,json=opDoctor,proto3" json:"op_doctor,omitempty"`       // 医生背书信息
	OpHospital *Tid4_Hospital `protobuf:"bytes,4,opt,name=op_hospital,json=opHospital,proto3" json:"op_hospital,omitempty"` // 医院背书信息
	Source     string         `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`                           // 来源
	OpImage    string         `protobuf:"bytes,6,opt,name=op_image,json=opImage,proto3" json:"op_image,omitempty"`          // 图片
}

func (x *Tid20) Reset() {
	*x = Tid20{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid20) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid20) ProtoMessage() {}

func (x *Tid20) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid20.ProtoReflect.Descriptor instead.
func (*Tid20) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{41}
}

func (x *Tid20) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Tid20) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tid20) GetOpDoctor() *Tid4_Doctor {
	if x != nil {
		return x.OpDoctor
	}
	return nil
}

func (x *Tid20) GetOpHospital() *Tid4_Hospital {
	if x != nil {
		return x.OpHospital
	}
	return nil
}

func (x *Tid20) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Tid20) GetOpImage() string {
	if x != nil {
		return x.OpImage
	}
	return ""
}

// ********************************************** tid 21
// *******************************************************
type Tid21_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpClass int32  `protobuf:"varint,1,opt,name=op_class,json=opClass,proto3" json:"op_class,omitempty"` // 9--疑问;10--传闻
	Title   string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                     // 标题
	MdText  string `protobuf:"bytes,3,opt,name=md_text,json=mdText,proto3" json:"md_text,omitempty"`     // 正文
}

func (x *Tid21_List) Reset() {
	*x = Tid21_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid21_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid21_List) ProtoMessage() {}

func (x *Tid21_List) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid21_List.ProtoReflect.Descriptor instead.
func (*Tid21_List) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{42}
}

func (x *Tid21_List) GetOpClass() int32 {
	if x != nil {
		return x.OpClass
	}
	return 0
}

func (x *Tid21_List) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tid21_List) GetMdText() string {
	if x != nil {
		return x.MdText
	}
	return ""
}

type Tid21 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid        int32          `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`                                // 模版ID
	Title      string         `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                             // 标题
	OpDoctor   *Tid4_Doctor   `protobuf:"bytes,3,opt,name=op_doctor,json=opDoctor,proto3" json:"op_doctor,omitempty"`       // 医生背书信息
	OpHospital *Tid4_Hospital `protobuf:"bytes,4,opt,name=op_hospital,json=opHospital,proto3" json:"op_hospital,omitempty"` // 医院背书信息
	Source     string         `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`                           // 来源
	List       []*Tid21_List  `protobuf:"bytes,6,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *Tid21) Reset() {
	*x = Tid21{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid21) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid21) ProtoMessage() {}

func (x *Tid21) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid21.ProtoReflect.Descriptor instead.
func (*Tid21) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{43}
}

func (x *Tid21) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Tid21) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tid21) GetOpDoctor() *Tid4_Doctor {
	if x != nil {
		return x.OpDoctor
	}
	return nil
}

func (x *Tid21) GetOpHospital() *Tid4_Hospital {
	if x != nil {
		return x.OpHospital
	}
	return nil
}

func (x *Tid21) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Tid21) GetList() []*Tid21_List {
	if x != nil {
		return x.List
	}
	return nil
}

// ********************************************** tid 22
// *******************************************************
type Tid22 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid          int32        `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`                                      // 模版ID
	Isrc         int32        `protobuf:"varint,2,opt,name=isrc,proto3" json:"isrc,omitempty"`                                    // 0表示tencent;1表示healthwise;后续有的话再递增
	Name         string       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                     // 疾病名
	OpReview     *Tid0_Review `protobuf:"bytes,4,opt,name=op_review,json=opReview,proto3" json:"op_review,omitempty"`             // 疾病审核信息
	MdDefinition string       `protobuf:"bytes,5,opt,name=md_definition,json=mdDefinition,proto3" json:"md_definition,omitempty"` // 定义，markdown类型
	Definition   string       `protobuf:"bytes,6,opt,name=definition,proto3" json:"definition,omitempty"`                         // 定义
	Image        string       `protobuf:"bytes,7,opt,name=image,proto3" json:"image,omitempty"`                                   // 背景图
}

func (x *Tid22) Reset() {
	*x = Tid22{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid22) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid22) ProtoMessage() {}

func (x *Tid22) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid22.ProtoReflect.Descriptor instead.
func (*Tid22) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{44}
}

func (x *Tid22) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Tid22) GetIsrc() int32 {
	if x != nil {
		return x.Isrc
	}
	return 0
}

func (x *Tid22) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tid22) GetOpReview() *Tid0_Review {
	if x != nil {
		return x.OpReview
	}
	return nil
}

func (x *Tid22) GetMdDefinition() string {
	if x != nil {
		return x.MdDefinition
	}
	return ""
}

func (x *Tid22) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *Tid22) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

// ********************************************** tid 23
// *******************************************************
type Tid23_Modeone_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title     string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`         // 急救名(心肺复苏)
	Image     string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`         // 图片
	Docid     string `protobuf:"bytes,3,opt,name=docid,proto3" json:"docid,omitempty"`         // 文章ID
	Desc      string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`           // 描述
	H5Url     string `protobuf:"bytes,5,opt,name=h5url,proto3" json:"h5url,omitempty"`         // h5跳转链接
	Subscript string `protobuf:"bytes,6,opt,name=subscript,proto3" json:"subscript,omitempty"` // 角标
	Wxaurl    string `protobuf:"bytes,7,opt,name=wxaurl,proto3" json:"wxaurl,omitempty"`       // 小程序跳转链接
}

func (x *Tid23_Modeone_List) Reset() {
	*x = Tid23_Modeone_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid23_Modeone_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid23_Modeone_List) ProtoMessage() {}

func (x *Tid23_Modeone_List) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid23_Modeone_List.ProtoReflect.Descriptor instead.
func (*Tid23_Modeone_List) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{45}
}

func (x *Tid23_Modeone_List) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tid23_Modeone_List) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Tid23_Modeone_List) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

func (x *Tid23_Modeone_List) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Tid23_Modeone_List) GetH5Url() string {
	if x != nil {
		return x.H5Url
	}
	return ""
}

func (x *Tid23_Modeone_List) GetSubscript() string {
	if x != nil {
		return x.Subscript
	}
	return ""
}

func (x *Tid23_Modeone_List) GetWxaurl() string {
	if x != nil {
		return x.Wxaurl
	}
	return ""
}

type Tid23_Modeone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string                `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"` // 标题(日常必备)
	List  []*Tid23_Modeone_List `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *Tid23_Modeone) Reset() {
	*x = Tid23_Modeone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid23_Modeone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid23_Modeone) ProtoMessage() {}

func (x *Tid23_Modeone) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid23_Modeone.ProtoReflect.Descriptor instead.
func (*Tid23_Modeone) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{46}
}

func (x *Tid23_Modeone) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tid23_Modeone) GetList() []*Tid23_Modeone_List {
	if x != nil {
		return x.List
	}
	return nil
}

type Tid23_Modetwo_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"` // 急救名(喉咙卡刺)
	Docid string `protobuf:"bytes,2,opt,name=docid,proto3" json:"docid,omitempty"` // 文章ID
}

func (x *Tid23_Modetwo_List) Reset() {
	*x = Tid23_Modetwo_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid23_Modetwo_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid23_Modetwo_List) ProtoMessage() {}

func (x *Tid23_Modetwo_List) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid23_Modetwo_List.ProtoReflect.Descriptor instead.
func (*Tid23_Modetwo_List) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{47}
}

func (x *Tid23_Modetwo_List) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tid23_Modetwo_List) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

type Tid23_Modetwo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string                `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"` // 标题(家庭急救)
	List  []*Tid23_Modetwo_List `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *Tid23_Modetwo) Reset() {
	*x = Tid23_Modetwo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid23_Modetwo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid23_Modetwo) ProtoMessage() {}

func (x *Tid23_Modetwo) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid23_Modetwo.ProtoReflect.Descriptor instead.
func (*Tid23_Modetwo) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{48}
}

func (x *Tid23_Modetwo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tid23_Modetwo) GetList() []*Tid23_Modetwo_List {
	if x != nil {
		return x.List
	}
	return nil
}

type Tid23_Modetop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"` // 图片
	Docid string `protobuf:"bytes,2,opt,name=docid,proto3" json:"docid,omitempty"` // 文章ID
}

func (x *Tid23_Modetop) Reset() {
	*x = Tid23_Modetop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid23_Modetop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid23_Modetop) ProtoMessage() {}

func (x *Tid23_Modetop) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid23_Modetop.ProtoReflect.Descriptor instead.
func (*Tid23_Modetop) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{49}
}

func (x *Tid23_Modetop) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Tid23_Modetop) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

type Tid23 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid     int32            `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"` // 模版ID
	ModeOne []*Tid23_Modeone `protobuf:"bytes,2,rep,name=mode_one,json=modeOne,proto3" json:"mode_one,omitempty"`
	ModeTwo []*Tid23_Modetwo `protobuf:"bytes,3,rep,name=mode_two,json=modeTwo,proto3" json:"mode_two,omitempty"`
	ModeTop []*Tid23_Modetop `protobuf:"bytes,4,rep,name=mode_top,json=modeTop,proto3" json:"mode_top,omitempty"`
}

func (x *Tid23) Reset() {
	*x = Tid23{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid23) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid23) ProtoMessage() {}

func (x *Tid23) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid23.ProtoReflect.Descriptor instead.
func (*Tid23) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{50}
}

func (x *Tid23) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Tid23) GetModeOne() []*Tid23_Modeone {
	if x != nil {
		return x.ModeOne
	}
	return nil
}

func (x *Tid23) GetModeTwo() []*Tid23_Modetwo {
	if x != nil {
		return x.ModeTwo
	}
	return nil
}

func (x *Tid23) GetModeTop() []*Tid23_Modetop {
	if x != nil {
		return x.ModeTop
	}
	return nil
}

// ********************************************** tid 24
// *******************************************************
type Tid24_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title  string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"` // 标题(溺水自救)
	Image  string   `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"` // 标题背景
	Type   int32    `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`  // 0:无样式;1:有编号
	MdText []string `protobuf:"bytes,4,rep,name=md_text,json=mdText,proto3" json:"md_text,omitempty"`
}

func (x *Tid24_Data) Reset() {
	*x = Tid24_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid24_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid24_Data) ProtoMessage() {}

func (x *Tid24_Data) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid24_Data.ProtoReflect.Descriptor instead.
func (*Tid24_Data) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{51}
}

func (x *Tid24_Data) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tid24_Data) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Tid24_Data) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Tid24_Data) GetMdText() []string {
	if x != nil {
		return x.MdText
	}
	return nil
}

type Tid24 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid         int32              `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`                                // 模版ID
	Title       string             `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                             // 标题
	Abs         string             `protobuf:"bytes,3,opt,name=abs,proto3" json:"abs,omitempty"`                                 // 摘要
	Releasetime string             `protobuf:"bytes,4,opt,name=releasetime,proto3" json:"releasetime,omitempty"`                 // 发布时间
	OpDoctor    *Tid4_Doctor       `protobuf:"bytes,5,opt,name=op_doctor,json=opDoctor,proto3" json:"op_doctor,omitempty"`       // 医生背书信息(废弃;改使用op_doctors)
	OpHospital  *Tid4_Hospital     `protobuf:"bytes,6,opt,name=op_hospital,json=opHospital,proto3" json:"op_hospital,omitempty"` // 医院背书信息
	OpAuthor    *Tid4_Author       `protobuf:"bytes,7,opt,name=op_author,json=opAuthor,proto3" json:"op_author,omitempty"`       // 作者信息
	Source      string             `protobuf:"bytes,8,opt,name=source,proto3" json:"source,omitempty"`                           // 文章来源
	Data        []*Tid24_Data      `protobuf:"bytes,9,rep,name=data,proto3" json:"data,omitempty"`
	Duration    int32              `protobuf:"varint,10,opt,name=duration,proto3" json:"duration,omitempty"` // 时长，单位是秒
	Size        int32              `protobuf:"varint,11,opt,name=size,proto3" json:"size,omitempty"`         // 音频大小，单位KB
	Url         string             `protobuf:"bytes,12,opt,name=url,proto3" json:"url,omitempty"`            // 音频地址
	Diseases    []*Tid_DiseaseItem `protobuf:"bytes,13,rep,name=diseases,proto3" json:"diseases,omitempty"`
	RelatedDocs []string           `protobuf:"bytes,14,rep,name=related_docs,json=relatedDocs,proto3" json:"related_docs,omitempty"`
	OpDoctors   []*Tid4_Doctor     `protobuf:"bytes,15,rep,name=op_doctors,json=opDoctors,proto3" json:"op_doctors,omitempty"`
	Docid       string             `protobuf:"bytes,16,opt,name=docid,proto3" json:"docid,omitempty"`        // 文章ID
	Sourceid    int32              `protobuf:"varint,17,opt,name=sourceid,proto3" json:"sourceid,omitempty"` // 来源id;0表示自撰，1表示healthwise;2表示公众号，3表示webmd;4表示医生约稿，5表示外包约稿
	Author      *Tid4_Author       `protobuf:"bytes,18,opt,name=author,proto3" json:"author,omitempty"`      // 作者信息
}

func (x *Tid24) Reset() {
	*x = Tid24{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid24) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid24) ProtoMessage() {}

func (x *Tid24) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid24.ProtoReflect.Descriptor instead.
func (*Tid24) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{52}
}

func (x *Tid24) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Tid24) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tid24) GetAbs() string {
	if x != nil {
		return x.Abs
	}
	return ""
}

func (x *Tid24) GetReleasetime() string {
	if x != nil {
		return x.Releasetime
	}
	return ""
}

func (x *Tid24) GetOpDoctor() *Tid4_Doctor {
	if x != nil {
		return x.OpDoctor
	}
	return nil
}

func (x *Tid24) GetOpHospital() *Tid4_Hospital {
	if x != nil {
		return x.OpHospital
	}
	return nil
}

func (x *Tid24) GetOpAuthor() *Tid4_Author {
	if x != nil {
		return x.OpAuthor
	}
	return nil
}

func (x *Tid24) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Tid24) GetData() []*Tid24_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Tid24) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Tid24) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Tid24) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Tid24) GetDiseases() []*Tid_DiseaseItem {
	if x != nil {
		return x.Diseases
	}
	return nil
}

func (x *Tid24) GetRelatedDocs() []string {
	if x != nil {
		return x.RelatedDocs
	}
	return nil
}

func (x *Tid24) GetOpDoctors() []*Tid4_Doctor {
	if x != nil {
		return x.OpDoctors
	}
	return nil
}

func (x *Tid24) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

func (x *Tid24) GetSourceid() int32 {
	if x != nil {
		return x.Sourceid
	}
	return 0
}

func (x *Tid24) GetAuthor() *Tid4_Author {
	if x != nil {
		return x.Author
	}
	return nil
}

// ********************************************** tid 25
// *******************************************************
type Tid25 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid          int32              `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`                          // 模版ID
	Title        string             `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                       // 标题
	MdText       string             `protobuf:"bytes,3,opt,name=md_text,json=mdText,proto3" json:"md_text,omitempty"`       // 正文
	Docid        string             `protobuf:"bytes,4,opt,name=docid,proto3" json:"docid,omitempty"`                       // 文章ID
	Clickable    int32              `protobuf:"varint,5,opt,name=clickable,proto3" json:"clickable,omitempty"`              // 0:不可点击;1:可点击
	OpAuthor     *Tid4_Author       `protobuf:"bytes,6,opt,name=op_author,json=opAuthor,proto3" json:"op_author,omitempty"` // 作者信息
	Source       string             `protobuf:"bytes,7,opt,name=source,proto3" json:"source,omitempty"`                     // 文章来源
	OpKeyword    []string           `protobuf:"bytes,8,rep,name=op_keyword,json=opKeyword,proto3" json:"op_keyword,omitempty"`
	Diseases     []*Tid_DiseaseItem `protobuf:"bytes,9,rep,name=diseases,proto3" json:"diseases,omitempty"`
	Releasetime  string             `protobuf:"bytes,10,opt,name=releasetime,proto3" json:"releasetime,omitempty"`                 // 发布时间
	Readflag     int32              `protobuf:"varint,11,opt,name=readflag,proto3" json:"readflag,omitempty"`                      // 已读标志位;0--未读;1--已读
	Searchtitle  string             `protobuf:"bytes,12,opt,name=searchtitle,proto3" json:"searchtitle,omitempty"`                 // 搜索框标题(不通过Dcache获得;为空表示后面没有搜索框)
	Getdataurl   string             `protobuf:"bytes,13,opt,name=getdataurl,proto3" json:"getdataurl,omitempty"`                   // 获取文章详情链接
	Duration     int32              `protobuf:"varint,14,opt,name=duration,proto3" json:"duration,omitempty"`                      // 时长，单位是秒
	Size         int32              `protobuf:"varint,15,opt,name=size,proto3" json:"size,omitempty"`                              // 音频大小，单位KB
	Url          string             `protobuf:"bytes,16,opt,name=url,proto3" json:"url,omitempty"`                                 // 音频地址
	Helpful      int32              `protobuf:"varint,17,opt,name=helpful,proto3" json:"helpful,omitempty"`                        // 用户点击有帮助(患者文章列表返回;不通过Dcache获得)
	Helpfulcount int32              `protobuf:"varint,18,opt,name=helpfulcount,proto3" json:"helpfulcount,omitempty"`              // 总赞数(患者文章列表返回;不通过Dcache获得)
	Type         int32              `protobuf:"varint,19,opt,name=type,proto3" json:"type,omitempty"`                              // 2:相关文章;4:热门文章(不通过Dcache获得)
	Istop        int32              `protobuf:"varint,20,opt,name=istop,proto3" json:"istop,omitempty"`                            // 置顶标志位;1:置顶;2:置底(不通过Dcache获得)
	Paraid       string             `protobuf:"bytes,21,opt,name=paraid,proto3" json:"paraid,omitempty"`                           // 段落id(不通过Dcache获得)
	OpDoctor     *Tid4_Doctor       `protobuf:"bytes,22,opt,name=op_doctor,json=opDoctor,proto3" json:"op_doctor,omitempty"`       // 医生背书信息(废弃;改使用op_doctors)
	OpHospital   *Tid4_Hospital     `protobuf:"bytes,23,opt,name=op_hospital,json=opHospital,proto3" json:"op_hospital,omitempty"` // 医院背书信息
	OpDoctors    []*Tid4_Doctor     `protobuf:"bytes,24,rep,name=op_doctors,json=opDoctors,proto3" json:"op_doctors,omitempty"`
	Hometags     []string           `protobuf:"bytes,25,rep,name=hometags,proto3" json:"hometags,omitempty"`
	Image        string             `protobuf:"bytes,26,opt,name=image,proto3" json:"image,omitempty"`                           // 缩略图
	Front        string             `protobuf:"bytes,27,opt,name=front,proto3" json:"front,omitempty"`                           // 封面图
	Custitle     string             `protobuf:"bytes,28,opt,name=custitle,proto3" json:"custitle,omitempty"`                     // 自定义标题
	Cusimage     string             `protobuf:"bytes,29,opt,name=cusimage,proto3" json:"cusimage,omitempty"`                     // 自定义图片
	Wxdurl       string             `protobuf:"bytes,30,opt,name=wxdurl,proto3" json:"wxdurl,omitempty"`                         // 微信文章URL
	BrowserTs    int64              `protobuf:"varint,31,opt,name=browser_ts,json=browserTs,proto3" json:"browser_ts,omitempty"` // 浏览时间
	Cid          []*TagObject       `protobuf:"bytes,32,rep,name=cid,proto3" json:"cid,omitempty"`
	Review       *Tid4_Review       `protobuf:"bytes,33,opt,name=review,proto3" json:"review,omitempty"`
}

func (x *Tid25) Reset() {
	*x = Tid25{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid25) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid25) ProtoMessage() {}

func (x *Tid25) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid25.ProtoReflect.Descriptor instead.
func (*Tid25) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{53}
}

func (x *Tid25) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Tid25) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tid25) GetMdText() string {
	if x != nil {
		return x.MdText
	}
	return ""
}

func (x *Tid25) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

func (x *Tid25) GetClickable() int32 {
	if x != nil {
		return x.Clickable
	}
	return 0
}

func (x *Tid25) GetOpAuthor() *Tid4_Author {
	if x != nil {
		return x.OpAuthor
	}
	return nil
}

func (x *Tid25) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Tid25) GetOpKeyword() []string {
	if x != nil {
		return x.OpKeyword
	}
	return nil
}

func (x *Tid25) GetDiseases() []*Tid_DiseaseItem {
	if x != nil {
		return x.Diseases
	}
	return nil
}

func (x *Tid25) GetReleasetime() string {
	if x != nil {
		return x.Releasetime
	}
	return ""
}

func (x *Tid25) GetReadflag() int32 {
	if x != nil {
		return x.Readflag
	}
	return 0
}

func (x *Tid25) GetSearchtitle() string {
	if x != nil {
		return x.Searchtitle
	}
	return ""
}

func (x *Tid25) GetGetdataurl() string {
	if x != nil {
		return x.Getdataurl
	}
	return ""
}

func (x *Tid25) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Tid25) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Tid25) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Tid25) GetHelpful() int32 {
	if x != nil {
		return x.Helpful
	}
	return 0
}

func (x *Tid25) GetHelpfulcount() int32 {
	if x != nil {
		return x.Helpfulcount
	}
	return 0
}

func (x *Tid25) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Tid25) GetIstop() int32 {
	if x != nil {
		return x.Istop
	}
	return 0
}

func (x *Tid25) GetParaid() string {
	if x != nil {
		return x.Paraid
	}
	return ""
}

func (x *Tid25) GetOpDoctor() *Tid4_Doctor {
	if x != nil {
		return x.OpDoctor
	}
	return nil
}

func (x *Tid25) GetOpHospital() *Tid4_Hospital {
	if x != nil {
		return x.OpHospital
	}
	return nil
}

func (x *Tid25) GetOpDoctors() []*Tid4_Doctor {
	if x != nil {
		return x.OpDoctors
	}
	return nil
}

func (x *Tid25) GetHometags() []string {
	if x != nil {
		return x.Hometags
	}
	return nil
}

func (x *Tid25) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Tid25) GetFront() string {
	if x != nil {
		return x.Front
	}
	return ""
}

func (x *Tid25) GetCustitle() string {
	if x != nil {
		return x.Custitle
	}
	return ""
}

func (x *Tid25) GetCusimage() string {
	if x != nil {
		return x.Cusimage
	}
	return ""
}

func (x *Tid25) GetWxdurl() string {
	if x != nil {
		return x.Wxdurl
	}
	return ""
}

func (x *Tid25) GetBrowserTs() int64 {
	if x != nil {
		return x.BrowserTs
	}
	return 0
}

func (x *Tid25) GetCid() []*TagObject {
	if x != nil {
		return x.Cid
	}
	return nil
}

func (x *Tid25) GetReview() *Tid4_Review {
	if x != nil {
		return x.Review
	}
	return nil
}

// ********************************************** tid 26
// *******************************************************
type Tid26_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MdText       string       `protobuf:"bytes,1,opt,name=md_text,json=mdText,proto3" json:"md_text,omitempty"`       // 正文
	OpAuthor     *Tid4_Author `protobuf:"bytes,2,opt,name=op_author,json=opAuthor,proto3" json:"op_author,omitempty"` // 作者信息
	Source       string       `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`                     // 文章来源
	Time         string       `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`                         // 时间
	OpRelateddoc []*Tid4      `protobuf:"bytes,5,rep,name=op_relateddoc,json=opRelateddoc,proto3" json:"op_relateddoc,omitempty"`
}

func (x *Tid26_Info) Reset() {
	*x = Tid26_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid26_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid26_Info) ProtoMessage() {}

func (x *Tid26_Info) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid26_Info.ProtoReflect.Descriptor instead.
func (*Tid26_Info) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{54}
}

func (x *Tid26_Info) GetMdText() string {
	if x != nil {
		return x.MdText
	}
	return ""
}

func (x *Tid26_Info) GetOpAuthor() *Tid4_Author {
	if x != nil {
		return x.OpAuthor
	}
	return nil
}

func (x *Tid26_Info) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Tid26_Info) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *Tid26_Info) GetOpRelateddoc() []*Tid4 {
	if x != nil {
		return x.OpRelateddoc
	}
	return nil
}

type Tid26 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid         int32              `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`                          // 模版ID
	Title       string             `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                       // 标题
	Abs         string             `protobuf:"bytes,3,opt,name=abs,proto3" json:"abs,omitempty"`                           // 摘要
	Releasetime string             `protobuf:"bytes,4,opt,name=releasetime,proto3" json:"releasetime,omitempty"`           // 发布时间
	OpAuthor    *Tid4_Author       `protobuf:"bytes,5,opt,name=op_author,json=opAuthor,proto3" json:"op_author,omitempty"` // 作者信息
	Source      string             `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`                     // 文章来源
	OpKeyword   []string           `protobuf:"bytes,7,rep,name=op_keyword,json=opKeyword,proto3" json:"op_keyword,omitempty"`
	Diseases    []*Tid_DiseaseItem `protobuf:"bytes,8,rep,name=diseases,proto3" json:"diseases,omitempty"`
	Info        []*Tid26_Info      `protobuf:"bytes,9,rep,name=info,proto3" json:"info,omitempty"`
	Duration    int32              `protobuf:"varint,10,opt,name=duration,proto3" json:"duration,omitempty"` // 时长，单位是秒
	Size        int32              `protobuf:"varint,11,opt,name=size,proto3" json:"size,omitempty"`         // 音频大小，单位KB
	Url         string             `protobuf:"bytes,12,opt,name=url,proto3" json:"url,omitempty"`            // 音频地址
	RelatedDocs []string           `protobuf:"bytes,13,rep,name=related_docs,json=relatedDocs,proto3" json:"related_docs,omitempty"`
	OpDoctor    *Tid4_Doctor       `protobuf:"bytes,14,opt,name=op_doctor,json=opDoctor,proto3" json:"op_doctor,omitempty"`       // 医生背书信息(废弃;改使用op_doctors)
	OpHospital  *Tid4_Hospital     `protobuf:"bytes,15,opt,name=op_hospital,json=opHospital,proto3" json:"op_hospital,omitempty"` // 医院背书信息
	Ref         []string           `protobuf:"bytes,16,rep,name=ref,proto3" json:"ref,omitempty"`
	RefInfo     []string           `protobuf:"bytes,17,rep,name=ref_info,json=refInfo,proto3" json:"ref_info,omitempty"`
	OpDoctors   []*Tid4_Doctor     `protobuf:"bytes,18,rep,name=op_doctors,json=opDoctors,proto3" json:"op_doctors,omitempty"`
	Sourceid    int32              `protobuf:"varint,19,opt,name=sourceid,proto3" json:"sourceid,omitempty"` // 来源id;0表示自撰，1表示healthwise;2表示公众号，3表示webmd;4表示医生约稿，5表示外包约稿
	Docid       string             `protobuf:"bytes,20,opt,name=docid,proto3" json:"docid,omitempty"`        // 文章ID
	Thanks      []*Tid_Thank       `protobuf:"bytes,21,rep,name=thanks,proto3" json:"thanks,omitempty"`
}

func (x *Tid26) Reset() {
	*x = Tid26{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid26) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid26) ProtoMessage() {}

func (x *Tid26) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid26.ProtoReflect.Descriptor instead.
func (*Tid26) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{55}
}

func (x *Tid26) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Tid26) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tid26) GetAbs() string {
	if x != nil {
		return x.Abs
	}
	return ""
}

func (x *Tid26) GetReleasetime() string {
	if x != nil {
		return x.Releasetime
	}
	return ""
}

func (x *Tid26) GetOpAuthor() *Tid4_Author {
	if x != nil {
		return x.OpAuthor
	}
	return nil
}

func (x *Tid26) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Tid26) GetOpKeyword() []string {
	if x != nil {
		return x.OpKeyword
	}
	return nil
}

func (x *Tid26) GetDiseases() []*Tid_DiseaseItem {
	if x != nil {
		return x.Diseases
	}
	return nil
}

func (x *Tid26) GetInfo() []*Tid26_Info {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Tid26) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Tid26) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Tid26) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Tid26) GetRelatedDocs() []string {
	if x != nil {
		return x.RelatedDocs
	}
	return nil
}

func (x *Tid26) GetOpDoctor() *Tid4_Doctor {
	if x != nil {
		return x.OpDoctor
	}
	return nil
}

func (x *Tid26) GetOpHospital() *Tid4_Hospital {
	if x != nil {
		return x.OpHospital
	}
	return nil
}

func (x *Tid26) GetRef() []string {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *Tid26) GetRefInfo() []string {
	if x != nil {
		return x.RefInfo
	}
	return nil
}

func (x *Tid26) GetOpDoctors() []*Tid4_Doctor {
	if x != nil {
		return x.OpDoctors
	}
	return nil
}

func (x *Tid26) GetSourceid() int32 {
	if x != nil {
		return x.Sourceid
	}
	return 0
}

func (x *Tid26) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

func (x *Tid26) GetThanks() []*Tid_Thank {
	if x != nil {
		return x.Thanks
	}
	return nil
}

// ********************************************** tid 27
// *******************************************************
type Tid27 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid        int32          `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`                                // 模版ID
	Postid     int64          `protobuf:"varint,2,opt,name=postid,proto3" json:"postid,omitempty"`                          // 帖子ID
	Title      string         `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`                             // 标题
	Abs        string         `protobuf:"bytes,4,opt,name=abs,proto3" json:"abs,omitempty"`                                 // 摘要
	CreateTime string         `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"` // 创建时间
	OpKeyword  []string       `protobuf:"bytes,6,rep,name=op_keyword,json=opKeyword,proto3" json:"op_keyword,omitempty"`
	OpDoctors  []*Tid4_Doctor `protobuf:"bytes,7,rep,name=op_doctors,json=opDoctors,proto3" json:"op_doctors,omitempty"`
	Theme      string         `protobuf:"bytes,8,opt,name=theme,proto3" json:"theme,omitempty"`     // 主题
	Content    string         `protobuf:"bytes,9,opt,name=content,proto3" json:"content,omitempty"` // 内容
	OpThumbs   []string       `protobuf:"bytes,10,rep,name=op_thumbs,json=opThumbs,proto3" json:"op_thumbs,omitempty"`
	Did        int32          `protobuf:"varint,11,opt,name=did,proto3" json:"did,omitempty"`   // 所属疾病;默认乳腺癌
	Type       int32          `protobuf:"varint,12,opt,name=type,proto3" json:"type,omitempty"` // 1:帖子2：评论3:提问4:回答5:回复6:寻友7:活动8:公告9:留言板
}

func (x *Tid27) Reset() {
	*x = Tid27{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid27) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid27) ProtoMessage() {}

func (x *Tid27) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid27.ProtoReflect.Descriptor instead.
func (*Tid27) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{56}
}

func (x *Tid27) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Tid27) GetPostid() int64 {
	if x != nil {
		return x.Postid
	}
	return 0
}

func (x *Tid27) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tid27) GetAbs() string {
	if x != nil {
		return x.Abs
	}
	return ""
}

func (x *Tid27) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Tid27) GetOpKeyword() []string {
	if x != nil {
		return x.OpKeyword
	}
	return nil
}

func (x *Tid27) GetOpDoctors() []*Tid4_Doctor {
	if x != nil {
		return x.OpDoctors
	}
	return nil
}

func (x *Tid27) GetTheme() string {
	if x != nil {
		return x.Theme
	}
	return ""
}

func (x *Tid27) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Tid27) GetOpThumbs() []string {
	if x != nil {
		return x.OpThumbs
	}
	return nil
}

func (x *Tid27) GetDid() int32 {
	if x != nil {
		return x.Did
	}
	return 0
}

func (x *Tid27) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

// ********************************************** tid docinfo
// *******************************************************
type Tid_DocInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid   int32  `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`    // 4:数据在tid4中;10:数据在tid10中;25:数据在tid25中
	Tid4  *Tid4  `protobuf:"bytes,2,opt,name=tid4,proto3" json:"tid4,omitempty"`   // 文章
	Tid10 *Tid10 `protobuf:"bytes,3,opt,name=tid10,proto3" json:"tid10,omitempty"` // 视频
	Tid25 *Tid25 `protobuf:"bytes,4,opt,name=tid25,proto3" json:"tid25,omitempty"` // 问答
	Tid27 *Tid27 `protobuf:"bytes,5,opt,name=tid27,proto3" json:"tid27,omitempty"` // 社区帖子
}

func (x *Tid_DocInfo) Reset() {
	*x = Tid_DocInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid_DocInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid_DocInfo) ProtoMessage() {}

func (x *Tid_DocInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid_DocInfo.ProtoReflect.Descriptor instead.
func (*Tid_DocInfo) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{57}
}

func (x *Tid_DocInfo) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Tid_DocInfo) GetTid4() *Tid4 {
	if x != nil {
		return x.Tid4
	}
	return nil
}

func (x *Tid_DocInfo) GetTid10() *Tid10 {
	if x != nil {
		return x.Tid10
	}
	return nil
}

func (x *Tid_DocInfo) GetTid25() *Tid25 {
	if x != nil {
		return x.Tid25
	}
	return nil
}

func (x *Tid_DocInfo) GetTid27() *Tid27 {
	if x != nil {
		return x.Tid27
	}
	return nil
}

// ********************************************** tid docdata
// *******************************************************
type Tid_DocData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid   int32  `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`    // 6:数据在tid6中;17:数据在tid17中;24:数据在tid24中;26:数据在tid26中
	Tid6  *Tid6  `protobuf:"bytes,2,opt,name=tid6,proto3" json:"tid6,omitempty"`   // 文章数据
	Tid17 *Tid17 `protobuf:"bytes,3,opt,name=tid17,proto3" json:"tid17,omitempty"` // 视频数据
	Tid24 *Tid24 `protobuf:"bytes,4,opt,name=tid24,proto3" json:"tid24,omitempty"` // 急救数据
	Tid26 *Tid26 `protobuf:"bytes,5,opt,name=tid26,proto3" json:"tid26,omitempty"` // 问答数据
}

func (x *Tid_DocData) Reset() {
	*x = Tid_DocData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tid_DocData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tid_DocData) ProtoMessage() {}

func (x *Tid_DocData) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tid_DocData.ProtoReflect.Descriptor instead.
func (*Tid_DocData) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{58}
}

func (x *Tid_DocData) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Tid_DocData) GetTid6() *Tid6 {
	if x != nil {
		return x.Tid6
	}
	return nil
}

func (x *Tid_DocData) GetTid17() *Tid17 {
	if x != nil {
		return x.Tid17
	}
	return nil
}

func (x *Tid_DocData) GetTid24() *Tid24 {
	if x != nil {
		return x.Tid24
	}
	return nil
}

func (x *Tid_DocData) GetTid26() *Tid26 {
	if x != nil {
		return x.Tid26
	}
	return nil
}

// ********************************************** 新版文章信息
// *******************************************************
type DocInfoV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Docid      string `protobuf:"bytes,1,opt,name=docid,proto3" json:"docid,omitempty"`           // 文章ID
	Doctype    int32  `protobuf:"varint,2,opt,name=doctype,proto3" json:"doctype,omitempty"`      // 文章类型;1:文章;8:视频;11:问答;16:音频
	Title      string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`           // 标题
	Image      string `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`           // 缩略图
	Abs        string `protobuf:"bytes,5,opt,name=abs,proto3" json:"abs,omitempty"`               // 摘要
	Authorname string `protobuf:"bytes,6,opt,name=authorname,proto3" json:"authorname,omitempty"` // 作者名称
	Duration   int32  `protobuf:"varint,7,opt,name=duration,proto3" json:"duration,omitempty"`    // 时长，单位是秒
	H5Url      string `protobuf:"bytes,8,opt,name=h5url,proto3" json:"h5url,omitempty"`           // h5跳转链接
	Wxaurl     string `protobuf:"bytes,9,opt,name=wxaurl,proto3" json:"wxaurl,omitempty"`         // 小程序跳转链接
}

func (x *DocInfoV2) Reset() {
	*x = DocInfoV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocInfoV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocInfoV2) ProtoMessage() {}

func (x *DocInfoV2) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocInfoV2.ProtoReflect.Descriptor instead.
func (*DocInfoV2) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{59}
}

func (x *DocInfoV2) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

func (x *DocInfoV2) GetDoctype() int32 {
	if x != nil {
		return x.Doctype
	}
	return 0
}

func (x *DocInfoV2) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DocInfoV2) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *DocInfoV2) GetAbs() string {
	if x != nil {
		return x.Abs
	}
	return ""
}

func (x *DocInfoV2) GetAuthorname() string {
	if x != nil {
		return x.Authorname
	}
	return ""
}

func (x *DocInfoV2) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *DocInfoV2) GetH5Url() string {
	if x != nil {
		return x.H5Url
	}
	return ""
}

func (x *DocInfoV2) GetWxaurl() string {
	if x != nil {
		return x.Wxaurl
	}
	return ""
}

type QuestionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disease  string `protobuf:"bytes,1,opt,name=disease,proto3" json:"disease,omitempty"`   // 疾病名
	Question string `protobuf:"bytes,2,opt,name=question,proto3" json:"question,omitempty"` // 问答标题
	Entry    string `protobuf:"bytes,3,opt,name=entry,proto3" json:"entry,omitempty"`       // 问答所属的tab名，跳转到综述页对应tab
	Tab      string `protobuf:"bytes,4,opt,name=tab,proto3" json:"tab,omitempty"`           // tab名称
}

func (x *QuestionItem) Reset() {
	*x = QuestionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionItem) ProtoMessage() {}

func (x *QuestionItem) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionItem.ProtoReflect.Descriptor instead.
func (*QuestionItem) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{60}
}

func (x *QuestionItem) GetDisease() string {
	if x != nil {
		return x.Disease
	}
	return ""
}

func (x *QuestionItem) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *QuestionItem) GetEntry() string {
	if x != nil {
		return x.Entry
	}
	return ""
}

func (x *QuestionItem) GetTab() string {
	if x != nil {
		return x.Tab
	}
	return ""
}

type DiseaseItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // 疾病名
	Alias     []string        `protobuf:"bytes,2,rep,name=alias,proto3" json:"alias,omitempty"`
	Released  int32           `protobuf:"varint,3,opt,name=released,proto3" json:"released,omitempty"` // 疾病是否已发布;0:建设中;1:已发布
	Symptoms  []string        `protobuf:"bytes,4,rep,name=symptoms,proto3" json:"symptoms,omitempty"`
	Type      int32           `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`      // 疾病类型;0:普通页;1:精品页;2:母词条;3:症状;4:肿瘤页;5:新版肿瘤页
	Distype   string          `protobuf:"bytes,6,opt,name=distype,proto3" json:"distype,omitempty"` // 种类
	Disdepart []string        `protobuf:"bytes,7,rep,name=disdepart,proto3" json:"disdepart,omitempty"`
	Disbody   string          `protobuf:"bytes,8,opt,name=disbody,proto3" json:"disbody,omitempty"` // 部位
	Summary   string          `protobuf:"bytes,9,opt,name=summary,proto3" json:"summary,omitempty"` // 疾病/症状摘要
	Source    int32           `protobuf:"varint,10,opt,name=source,proto3" json:"source,omitempty"` // 来源;0:企鹅医典;1:hw
	Tabs      []*QuestionItem `protobuf:"bytes,11,rep,name=tabs,proto3" json:"tabs,omitempty"`
	Matchflag int32           `protobuf:"varint,12,opt,name=matchflag,proto3" json:"matchflag,omitempty"` // 0:部分命中;1:全命中
	Did       int32           `protobuf:"varint,13,opt,name=did,proto3" json:"did,omitempty"`             // 疾病ID
	Follow    int32           `protobuf:"varint,14,opt,name=follow,proto3" json:"follow,omitempty"`       // 0:未关注;1:已关注
	Ctype     int32           `protobuf:"varint,15,opt,name=ctype,proto3" json:"ctype,omitempty"`         // 疾病类型;0:疾病;5:母词条;10:症状;20:药品
	Docid     string          `protobuf:"bytes,16,opt,name=docid,proto3" json:"docid,omitempty"`          // 疾病综述ID
	Ename     string          `protobuf:"bytes,17,opt,name=ename,proto3" json:"ename,omitempty"`          // 疾病英文名
	H5Url     string          `protobuf:"bytes,18,opt,name=h5url,proto3" json:"h5url,omitempty"`          // h5跳转链接
	Wxaurl    string          `protobuf:"bytes,19,opt,name=wxaurl,proto3" json:"wxaurl,omitempty"`        // 小程序跳转链接
}

func (x *DiseaseItem) Reset() {
	*x = DiseaseItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiseaseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiseaseItem) ProtoMessage() {}

func (x *DiseaseItem) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiseaseItem.ProtoReflect.Descriptor instead.
func (*DiseaseItem) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{61}
}

func (x *DiseaseItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DiseaseItem) GetAlias() []string {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *DiseaseItem) GetReleased() int32 {
	if x != nil {
		return x.Released
	}
	return 0
}

func (x *DiseaseItem) GetSymptoms() []string {
	if x != nil {
		return x.Symptoms
	}
	return nil
}

func (x *DiseaseItem) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DiseaseItem) GetDistype() string {
	if x != nil {
		return x.Distype
	}
	return ""
}

func (x *DiseaseItem) GetDisdepart() []string {
	if x != nil {
		return x.Disdepart
	}
	return nil
}

func (x *DiseaseItem) GetDisbody() string {
	if x != nil {
		return x.Disbody
	}
	return ""
}

func (x *DiseaseItem) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *DiseaseItem) GetSource() int32 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *DiseaseItem) GetTabs() []*QuestionItem {
	if x != nil {
		return x.Tabs
	}
	return nil
}

func (x *DiseaseItem) GetMatchflag() int32 {
	if x != nil {
		return x.Matchflag
	}
	return 0
}

func (x *DiseaseItem) GetDid() int32 {
	if x != nil {
		return x.Did
	}
	return 0
}

func (x *DiseaseItem) GetFollow() int32 {
	if x != nil {
		return x.Follow
	}
	return 0
}

func (x *DiseaseItem) GetCtype() int32 {
	if x != nil {
		return x.Ctype
	}
	return 0
}

func (x *DiseaseItem) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

func (x *DiseaseItem) GetEname() string {
	if x != nil {
		return x.Ename
	}
	return ""
}

func (x *DiseaseItem) GetH5Url() string {
	if x != nil {
		return x.H5Url
	}
	return ""
}

func (x *DiseaseItem) GetWxaurl() string {
	if x != nil {
		return x.Wxaurl
	}
	return ""
}

type EmergencyItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"` // 急救名
	Docid string `protobuf:"bytes,2,opt,name=docid,proto3" json:"docid,omitempty"` // 急救文档id
}

func (x *EmergencyItem) Reset() {
	*x = EmergencyItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmergencyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmergencyItem) ProtoMessage() {}

func (x *EmergencyItem) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmergencyItem.ProtoReflect.Descriptor instead.
func (*EmergencyItem) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{62}
}

func (x *EmergencyItem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *EmergencyItem) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

type GetOverviewFilterDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desc  string `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`   // 筛选器描述
	Docid string `protobuf:"bytes,2,opt,name=docid,proto3" json:"docid,omitempty"` // 文章id
	H5Url string `protobuf:"bytes,3,opt,name=h5url,proto3" json:"h5url,omitempty"` // h5链接
}

func (x *GetOverviewFilterDesc) Reset() {
	*x = GetOverviewFilterDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOverviewFilterDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOverviewFilterDesc) ProtoMessage() {}

func (x *GetOverviewFilterDesc) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOverviewFilterDesc.ProtoReflect.Descriptor instead.
func (*GetOverviewFilterDesc) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{63}
}

func (x *GetOverviewFilterDesc) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *GetOverviewFilterDesc) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

func (x *GetOverviewFilterDesc) GetH5Url() string {
	if x != nil {
		return x.H5Url
	}
	return ""
}

type GetDiseaseListByCategoryRespListDiseases struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`          // 疾病名称/症状名称
	Type         int32    `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`         // 疾病类型;0:普通页;1:精品页;2:母词条;3:症状;4:肿瘤页;5:新版肿瘤页
	Released     int32    `protobuf:"varint,3,opt,name=released,proto3" json:"released,omitempty"` // 疾病是否已发布;0:建设中;1:已发布
	Discategorys []string `protobuf:"bytes,4,rep,name=discategorys,proto3" json:"discategorys,omitempty"`
	Source       int32    `protobuf:"varint,5,opt,name=source,proto3" json:"source,omitempty"` // 来源;0:企鹅医典;1:hw
	Docid        string   `protobuf:"bytes,6,opt,name=docid,proto3" json:"docid,omitempty"`    // 综述ID
	H5Url        string   `protobuf:"bytes,7,opt,name=h5url,proto3" json:"h5url,omitempty"`    // h5跳转链接
	Wxaurl       string   `protobuf:"bytes,8,opt,name=wxaurl,proto3" json:"wxaurl,omitempty"`  // 小程序跳转链接
}

func (x *GetDiseaseListByCategoryRespListDiseases) Reset() {
	*x = GetDiseaseListByCategoryRespListDiseases{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiseaseListByCategoryRespListDiseases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiseaseListByCategoryRespListDiseases) ProtoMessage() {}

func (x *GetDiseaseListByCategoryRespListDiseases) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiseaseListByCategoryRespListDiseases.ProtoReflect.Descriptor instead.
func (*GetDiseaseListByCategoryRespListDiseases) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{64}
}

func (x *GetDiseaseListByCategoryRespListDiseases) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetDiseaseListByCategoryRespListDiseases) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *GetDiseaseListByCategoryRespListDiseases) GetReleased() int32 {
	if x != nil {
		return x.Released
	}
	return 0
}

func (x *GetDiseaseListByCategoryRespListDiseases) GetDiscategorys() []string {
	if x != nil {
		return x.Discategorys
	}
	return nil
}

func (x *GetDiseaseListByCategoryRespListDiseases) GetSource() int32 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *GetDiseaseListByCategoryRespListDiseases) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

func (x *GetDiseaseListByCategoryRespListDiseases) GetH5Url() string {
	if x != nil {
		return x.H5Url
	}
	return ""
}

func (x *GetDiseaseListByCategoryRespListDiseases) GetWxaurl() string {
	if x != nil {
		return x.Wxaurl
	}
	return ""
}

type GetDiseaseListByCategoryRespList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                                      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                          // tag名称：慢性病、急性病、A-Z
	OpIconFocus   string                                      `protobuf:"bytes,2,opt,name=op_icon_focus,json=opIconFocus,proto3" json:"op_icon_focus,omitempty"`       // 选中tag展示icon
	OpIconUnfocus string                                      `protobuf:"bytes,3,opt,name=op_icon_unfocus,json=opIconUnfocus,proto3" json:"op_icon_unfocus,omitempty"` // 未选中tag展示icon
	Diseases      []*GetDiseaseListByCategoryRespListDiseases `protobuf:"bytes,4,rep,name=diseases,proto3" json:"diseases,omitempty"`
	Released      int32                                       `protobuf:"varint,5,opt,name=released,proto3" json:"released,omitempty"` // 疾病是否均发布：0--包含建设中疾病;1--已发布
}

func (x *GetDiseaseListByCategoryRespList) Reset() {
	*x = GetDiseaseListByCategoryRespList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiseaseListByCategoryRespList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiseaseListByCategoryRespList) ProtoMessage() {}

func (x *GetDiseaseListByCategoryRespList) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiseaseListByCategoryRespList.ProtoReflect.Descriptor instead.
func (*GetDiseaseListByCategoryRespList) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{65}
}

func (x *GetDiseaseListByCategoryRespList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetDiseaseListByCategoryRespList) GetOpIconFocus() string {
	if x != nil {
		return x.OpIconFocus
	}
	return ""
}

func (x *GetDiseaseListByCategoryRespList) GetOpIconUnfocus() string {
	if x != nil {
		return x.OpIconUnfocus
	}
	return ""
}

func (x *GetDiseaseListByCategoryRespList) GetDiseases() []*GetDiseaseListByCategoryRespListDiseases {
	if x != nil {
		return x.Diseases
	}
	return nil
}

func (x *GetDiseaseListByCategoryRespList) GetReleased() int32 {
	if x != nil {
		return x.Released
	}
	return 0
}

type GetDrugListByCategoryRespListDrugs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`          // 疾病名称/症状名称
	Type         int32    `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`         // 疾病类型;0:普通页;1:精品页;2:母词条;3:症状;4:肿瘤页;5:新版肿瘤页
	Released     int32    `protobuf:"varint,3,opt,name=released,proto3" json:"released,omitempty"` // 疾病是否已发布;0:建设中;1:已发布
	Discategorys []string `protobuf:"bytes,4,rep,name=discategorys,proto3" json:"discategorys,omitempty"`
	Docid        string   `protobuf:"bytes,5,opt,name=docid,proto3" json:"docid,omitempty"`   // 疾病综述ID
	Ename        string   `protobuf:"bytes,6,opt,name=ename,proto3" json:"ename,omitempty"`   // 疾病英文名
	H5Url        string   `protobuf:"bytes,7,opt,name=h5url,proto3" json:"h5url,omitempty"`   // h5跳转链接
	Wxaurl       string   `protobuf:"bytes,8,opt,name=wxaurl,proto3" json:"wxaurl,omitempty"` // 小程序跳转链接
}

func (x *GetDrugListByCategoryRespListDrugs) Reset() {
	*x = GetDrugListByCategoryRespListDrugs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDrugListByCategoryRespListDrugs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDrugListByCategoryRespListDrugs) ProtoMessage() {}

func (x *GetDrugListByCategoryRespListDrugs) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDrugListByCategoryRespListDrugs.ProtoReflect.Descriptor instead.
func (*GetDrugListByCategoryRespListDrugs) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{66}
}

func (x *GetDrugListByCategoryRespListDrugs) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetDrugListByCategoryRespListDrugs) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *GetDrugListByCategoryRespListDrugs) GetReleased() int32 {
	if x != nil {
		return x.Released
	}
	return 0
}

func (x *GetDrugListByCategoryRespListDrugs) GetDiscategorys() []string {
	if x != nil {
		return x.Discategorys
	}
	return nil
}

func (x *GetDrugListByCategoryRespListDrugs) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

func (x *GetDrugListByCategoryRespListDrugs) GetEname() string {
	if x != nil {
		return x.Ename
	}
	return ""
}

func (x *GetDrugListByCategoryRespListDrugs) GetH5Url() string {
	if x != nil {
		return x.H5Url
	}
	return ""
}

func (x *GetDrugListByCategoryRespListDrugs) GetWxaurl() string {
	if x != nil {
		return x.Wxaurl
	}
	return ""
}

type GetDrugListByCategoryRespList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string                                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // tag名称;A-Z
	Drugs []*GetDrugListByCategoryRespListDrugs `protobuf:"bytes,2,rep,name=drugs,proto3" json:"drugs,omitempty"`
}

func (x *GetDrugListByCategoryRespList) Reset() {
	*x = GetDrugListByCategoryRespList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDrugListByCategoryRespList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDrugListByCategoryRespList) ProtoMessage() {}

func (x *GetDrugListByCategoryRespList) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDrugListByCategoryRespList.ProtoReflect.Descriptor instead.
func (*GetDrugListByCategoryRespList) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{67}
}

func (x *GetDrugListByCategoryRespList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetDrugListByCategoryRespList) GetDrugs() []*GetDrugListByCategoryRespListDrugs {
	if x != nil {
		return x.Drugs
	}
	return nil
}

type TagTreeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                       // ID
	Title    string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                 // 标题
	Descinfo string `protobuf:"bytes,3,opt,name=descinfo,proto3" json:"descinfo,omitempty"`           // 简介文案
	ImgUrl   string `protobuf:"bytes,4,opt,name=img_url,json=imgUrl,proto3" json:"img_url,omitempty"` // 背景图
	H5Url    string `protobuf:"bytes,5,opt,name=h5url,proto3" json:"h5url,omitempty"`                 // h5跳转链接
	Wxaurl   string `protobuf:"bytes,6,opt,name=wxaurl,proto3" json:"wxaurl,omitempty"`               // 小程序跳转链接
}

func (x *TagTreeInfo) Reset() {
	*x = TagTreeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagTreeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagTreeInfo) ProtoMessage() {}

func (x *TagTreeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagTreeInfo.ProtoReflect.Descriptor instead.
func (*TagTreeInfo) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{68}
}

func (x *TagTreeInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TagTreeInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TagTreeInfo) GetDescinfo() string {
	if x != nil {
		return x.Descinfo
	}
	return ""
}

func (x *TagTreeInfo) GetImgUrl() string {
	if x != nil {
		return x.ImgUrl
	}
	return ""
}

func (x *TagTreeInfo) GetH5Url() string {
	if x != nil {
		return x.H5Url
	}
	return ""
}

func (x *TagTreeInfo) GetWxaurl() string {
	if x != nil {
		return x.Wxaurl
	}
	return ""
}

type GetDiseaseAllDocsTagsChildren struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`         // 标签名(展示)
	Tag      string       `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`           // 标签名(检索)
	Treeinfo *TagTreeInfo `protobuf:"bytes,3,opt,name=treeinfo,proto3" json:"treeinfo,omitempty"` // 标签树信息
}

func (x *GetDiseaseAllDocsTagsChildren) Reset() {
	*x = GetDiseaseAllDocsTagsChildren{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiseaseAllDocsTagsChildren) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiseaseAllDocsTagsChildren) ProtoMessage() {}

func (x *GetDiseaseAllDocsTagsChildren) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiseaseAllDocsTagsChildren.ProtoReflect.Descriptor instead.
func (*GetDiseaseAllDocsTagsChildren) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{69}
}

func (x *GetDiseaseAllDocsTagsChildren) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetDiseaseAllDocsTagsChildren) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *GetDiseaseAllDocsTagsChildren) GetTreeinfo() *TagTreeInfo {
	if x != nil {
		return x.Treeinfo
	}
	return nil
}

type GetDiseaseAllDocsTagsItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string                           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`         // 标签名(展示)
	Tag      string                           `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`           // 标签名(检索)
	Count    int32                            `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`      // 文章数量
	Hot      int32                            `protobuf:"varint,4,opt,name=hot,proto3" json:"hot,omitempty"`          // 1:热点分类
	Treeinfo *TagTreeInfo                     `protobuf:"bytes,5,opt,name=treeinfo,proto3" json:"treeinfo,omitempty"` // 标签树信息
	Tags     []*GetDiseaseAllDocsTagsChildren `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	Follow   int32                            `protobuf:"varint,7,opt,name=follow,proto3" json:"follow,omitempty"` // 1:已关注(轻量版)
	Image    string                           `protobuf:"bytes,8,opt,name=image,proto3" json:"image,omitempty"`    // icon(轻量版)
}

func (x *GetDiseaseAllDocsTagsItem) Reset() {
	*x = GetDiseaseAllDocsTagsItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiseaseAllDocsTagsItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiseaseAllDocsTagsItem) ProtoMessage() {}

func (x *GetDiseaseAllDocsTagsItem) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiseaseAllDocsTagsItem.ProtoReflect.Descriptor instead.
func (*GetDiseaseAllDocsTagsItem) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{70}
}

func (x *GetDiseaseAllDocsTagsItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetDiseaseAllDocsTagsItem) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *GetDiseaseAllDocsTagsItem) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetDiseaseAllDocsTagsItem) GetHot() int32 {
	if x != nil {
		return x.Hot
	}
	return 0
}

func (x *GetDiseaseAllDocsTagsItem) GetTreeinfo() *TagTreeInfo {
	if x != nil {
		return x.Treeinfo
	}
	return nil
}

func (x *GetDiseaseAllDocsTagsItem) GetTags() []*GetDiseaseAllDocsTagsChildren {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GetDiseaseAllDocsTagsItem) GetFollow() int32 {
	if x != nil {
		return x.Follow
	}
	return 0
}

func (x *GetDiseaseAllDocsTagsItem) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type GetDiseaseAllDocsBaseInfoRespTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string                       `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"` // 分类
	Tags  []*GetDiseaseAllDocsTagsItem `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	Pv    int32                        `protobuf:"varint,3,opt,name=pv,proto3" json:"pv,omitempty"` // 用户pv
}

func (x *GetDiseaseAllDocsBaseInfoRespTags) Reset() {
	*x = GetDiseaseAllDocsBaseInfoRespTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiseaseAllDocsBaseInfoRespTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiseaseAllDocsBaseInfoRespTags) ProtoMessage() {}

func (x *GetDiseaseAllDocsBaseInfoRespTags) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiseaseAllDocsBaseInfoRespTags.ProtoReflect.Descriptor instead.
func (*GetDiseaseAllDocsBaseInfoRespTags) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{71}
}

func (x *GetDiseaseAllDocsBaseInfoRespTags) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GetDiseaseAllDocsBaseInfoRespTags) GetTags() []*GetDiseaseAllDocsTagsItem {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GetDiseaseAllDocsBaseInfoRespTags) GetPv() int32 {
	if x != nil {
		return x.Pv
	}
	return 0
}

type NodeTagInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                      // 疾病名称
	Tid     string `protobuf:"bytes,2,opt,name=tid,proto3" json:"tid,omitempty"`                        // 标签ID
	TagName string `protobuf:"bytes,3,opt,name=tag_name,json=tagName,proto3" json:"tag_name,omitempty"` // 标签名
	ImgUrl  string `protobuf:"bytes,4,opt,name=img_url,json=imgUrl,proto3" json:"img_url,omitempty"`    // 背景图
	Type    int32  `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`                     // 疾病类型;0:普通页;1:精品页;2:母词条;3:症状;4:目录版肿瘤页;5:卡片版肿瘤页;6:流程版肿瘤页;7:直达版肿瘤页;8:决策版肿瘤页
}

func (x *NodeTagInfo) Reset() {
	*x = NodeTagInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeTagInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeTagInfo) ProtoMessage() {}

func (x *NodeTagInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeTagInfo.ProtoReflect.Descriptor instead.
func (*NodeTagInfo) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{72}
}

func (x *NodeTagInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodeTagInfo) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *NodeTagInfo) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *NodeTagInfo) GetImgUrl() string {
	if x != nil {
		return x.ImgUrl
	}
	return ""
}

func (x *NodeTagInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

// sort
type GetHomeContentDataRespTopicSort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   CONTENT_TYPE `protobuf:"varint,1,opt,name=type,proto3,enum=MedBaike.CONTENT_TYPE" json:"type,omitempty"` // 类型
	Offset int32        `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`                        // 相对位移
}

func (x *GetHomeContentDataRespTopicSort) Reset() {
	*x = GetHomeContentDataRespTopicSort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHomeContentDataRespTopicSort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHomeContentDataRespTopicSort) ProtoMessage() {}

func (x *GetHomeContentDataRespTopicSort) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHomeContentDataRespTopicSort.ProtoReflect.Descriptor instead.
func (*GetHomeContentDataRespTopicSort) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{73}
}

func (x *GetHomeContentDataRespTopicSort) GetType() CONTENT_TYPE {
	if x != nil {
		return x.Type
	}
	return CONTENT_TYPE_CONTENT_TYPE_DEFAULT
}

func (x *GetHomeContentDataRespTopicSort) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type DrugCostItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disease       string `protobuf:"bytes,1,opt,name=disease,proto3" json:"disease,omitempty"`                            // 疾病
	City          string `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty"`                                  // 所在城市
	TradeName     string `protobuf:"bytes,3,opt,name=trade_name,json=tradeName,proto3" json:"trade_name,omitempty"`       // 商品名
	CommonName    string `protobuf:"bytes,4,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`    // 通用名
	DosageForms   string `protobuf:"bytes,5,opt,name=dosage_forms,json=dosageForms,proto3" json:"dosage_forms,omitempty"` // 剂型
	Specification string `protobuf:"bytes,6,opt,name=specification,proto3" json:"specification,omitempty"`                // 规格
	Enterprise    string `protobuf:"bytes,7,opt,name=enterprise,proto3" json:"enterprise,omitempty"`                      // 生产企业
	Price         int32  `protobuf:"varint,8,opt,name=price,proto3" json:"price,omitempty"`                               // 价格(单位分)
	PriceType     string `protobuf:"bytes,9,opt,name=price_type,json=priceType,proto3" json:"price_type,omitempty"`       // 价格类型;例如:采购价，挂牌价，成交价
	Insured       int32  `protobuf:"varint,10,opt,name=insured,proto3" json:"insured,omitempty"`                          // 是否医保;0:不是医保;1:是医保
}

func (x *DrugCostItem) Reset() {
	*x = DrugCostItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrugCostItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrugCostItem) ProtoMessage() {}

func (x *DrugCostItem) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrugCostItem.ProtoReflect.Descriptor instead.
func (*DrugCostItem) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{74}
}

func (x *DrugCostItem) GetDisease() string {
	if x != nil {
		return x.Disease
	}
	return ""
}

func (x *DrugCostItem) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *DrugCostItem) GetTradeName() string {
	if x != nil {
		return x.TradeName
	}
	return ""
}

func (x *DrugCostItem) GetCommonName() string {
	if x != nil {
		return x.CommonName
	}
	return ""
}

func (x *DrugCostItem) GetDosageForms() string {
	if x != nil {
		return x.DosageForms
	}
	return ""
}

func (x *DrugCostItem) GetSpecification() string {
	if x != nil {
		return x.Specification
	}
	return ""
}

func (x *DrugCostItem) GetEnterprise() string {
	if x != nil {
		return x.Enterprise
	}
	return ""
}

func (x *DrugCostItem) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *DrugCostItem) GetPriceType() string {
	if x != nil {
		return x.PriceType
	}
	return ""
}

func (x *DrugCostItem) GetInsured() int32 {
	if x != nil {
		return x.Insured
	}
	return 0
}

type DrugCost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonName string          `protobuf:"bytes,1,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"` // 药品名
	Insured    int32           `protobuf:"varint,2,opt,name=insured,proto3" json:"insured,omitempty"`                        // 是否医保;0:不是医保;1:是医保
	PriceMax   int32           `protobuf:"varint,3,opt,name=price_max,json=priceMax,proto3" json:"price_max,omitempty"`      // 最高价格(单位分)
	Item       []*DrugCostItem `protobuf:"bytes,4,rep,name=item,proto3" json:"item,omitempty"`
}

func (x *DrugCost) Reset() {
	*x = DrugCost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrugCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrugCost) ProtoMessage() {}

func (x *DrugCost) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrugCost.ProtoReflect.Descriptor instead.
func (*DrugCost) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{75}
}

func (x *DrugCost) GetCommonName() string {
	if x != nil {
		return x.CommonName
	}
	return ""
}

func (x *DrugCost) GetInsured() int32 {
	if x != nil {
		return x.Insured
	}
	return 0
}

func (x *DrugCost) GetPriceMax() int32 {
	if x != nil {
		return x.PriceMax
	}
	return 0
}

func (x *DrugCost) GetItem() []*DrugCostItem {
	if x != nil {
		return x.Item
	}
	return nil
}

type ActiveItemQualitySort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text   string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`      // 活动文字
	Hwflag int32  `protobuf:"varint,2,opt,name=hwflag,proto3" json:"hwflag,omitempty"` // 置顶标志位
	Index  int32  `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`   // 置顶时间戳
	Id     int32  `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`         // 时间戳
}

func (x *ActiveItemQualitySort) Reset() {
	*x = ActiveItemQualitySort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveItemQualitySort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveItemQualitySort) ProtoMessage() {}

func (x *ActiveItemQualitySort) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveItemQualitySort.ProtoReflect.Descriptor instead.
func (*ActiveItemQualitySort) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{76}
}

func (x *ActiveItemQualitySort) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ActiveItemQualitySort) GetHwflag() int32 {
	if x != nil {
		return x.Hwflag
	}
	return 0
}

func (x *ActiveItemQualitySort) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ActiveItemQualitySort) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// mysql
type PopupData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image       string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`             // 弹窗图片地址
	RedirectUrl string `protobuf:"bytes,2,opt,name=redirectUrl,proto3" json:"redirectUrl,omitempty"` // 跳转页面的地址
}

func (x *PopupData) Reset() {
	*x = PopupData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopupData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopupData) ProtoMessage() {}

func (x *PopupData) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopupData.ProtoReflect.Descriptor instead.
func (*PopupData) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{77}
}

func (x *PopupData) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *PopupData) GetRedirectUrl() string {
	if x != nil {
		return x.RedirectUrl
	}
	return ""
}

type DiseaseCostEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disease       string `protobuf:"bytes,1,opt,name=disease,proto3" json:"disease,omitempty"`                                      // 疾病
	City          string `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty"`                                            // 所在城市
	ChemoCostMin  int32  `protobuf:"varint,3,opt,name=chemo_cost_min,json=chemoCostMin,proto3" json:"chemo_cost_min,omitempty"`     // 化疗总费用(最小值;单位0.1万元)
	ChemoCostMax  int32  `protobuf:"varint,4,opt,name=chemo_cost_max,json=chemoCostMax,proto3" json:"chemo_cost_max,omitempty"`     // 化疗总费用(最大值;单位0.1万元)
	SurgCostMin   int32  `protobuf:"varint,5,opt,name=surg_cost_min,json=surgCostMin,proto3" json:"surg_cost_min,omitempty"`        // 手术总费用(最小值;单位0.1万元)
	SurgCostMax   int32  `protobuf:"varint,6,opt,name=surg_cost_max,json=surgCostMax,proto3" json:"surg_cost_max,omitempty"`        // 手术总费用(最大值;单位0.1万元)
	RadioCostMin  int32  `protobuf:"varint,7,opt,name=radio_cost_min,json=radioCostMin,proto3" json:"radio_cost_min,omitempty"`     // 放疗总费用(最小值;单位0.1万元)
	RadioCostMax  int32  `protobuf:"varint,8,opt,name=radio_cost_max,json=radioCostMax,proto3" json:"radio_cost_max,omitempty"`     // 放疗总费用(最大值;单位0.1万元)
	TargetCostMin int32  `protobuf:"varint,9,opt,name=target_cost_min,json=targetCostMin,proto3" json:"target_cost_min,omitempty"`  // 靶向治疗总费用(最小值;单位0.1万元)
	TargetCostMax int32  `protobuf:"varint,10,opt,name=target_cost_max,json=targetCostMax,proto3" json:"target_cost_max,omitempty"` // 靶向治疗总费用(最大值;单位0.1万元)
	OtherCostMin  int32  `protobuf:"varint,11,opt,name=other_cost_min,json=otherCostMin,proto3" json:"other_cost_min,omitempty"`    // 其它治疗总费用(最小值;单位0.1万元)
	OtherCostMax  int32  `protobuf:"varint,12,opt,name=other_cost_max,json=otherCostMax,proto3" json:"other_cost_max,omitempty"`    // 其它治疗总费用(最大值;单位0.1万元)
	TotalCostMin  int32  `protobuf:"varint,13,opt,name=total_cost_min,json=totalCostMin,proto3" json:"total_cost_min,omitempty"`    // 总费用(最小值;单位0.1万元)
	TotalCostMax  int32  `protobuf:"varint,14,opt,name=total_cost_max,json=totalCostMax,proto3" json:"total_cost_max,omitempty"`    // 总费用(最大值;单位0.1万元)
	EndocCostMin  int32  `protobuf:"varint,15,opt,name=endoc_cost_min,json=endocCostMin,proto3" json:"endoc_cost_min,omitempty"`    // 内分泌治疗总费用(最小值;单位0.1万元)
	EndocCostMax  int32  `protobuf:"varint,16,opt,name=endoc_cost_max,json=endocCostMax,proto3" json:"endoc_cost_max,omitempty"`    // 内分泌治疗总费用(最大值;单位0.1万元)
	ChemoAvgCost  int32  `protobuf:"varint,17,opt,name=chemo_avg_cost,json=chemoAvgCost,proto3" json:"chemo_avg_cost,omitempty"`    // 化疗单次费用(单位0.1万元)
	SurgAvgCost   int32  `protobuf:"varint,18,opt,name=surg_avg_cost,json=surgAvgCost,proto3" json:"surg_avg_cost,omitempty"`       // 手术单次费用(单位0.1万元)
	RadioAvgCost  int32  `protobuf:"varint,19,opt,name=radio_avg_cost,json=radioAvgCost,proto3" json:"radio_avg_cost,omitempty"`    // 传统放疗单次费用(单位0.1万元)
	RadioxAvgCost int32  `protobuf:"varint,20,opt,name=radiox_avg_cost,json=radioxAvgCost,proto3" json:"radiox_avg_cost,omitempty"` // 伽马刀放疗单次费用(单位0.1万元)
	TargetAvgCost int32  `protobuf:"varint,21,opt,name=target_avg_cost,json=targetAvgCost,proto3" json:"target_avg_cost,omitempty"` // 靶向治疗单次费用(单位0.1万元)
	EndocAvgCost  int32  `protobuf:"varint,22,opt,name=endoc_avg_cost,json=endocAvgCost,proto3" json:"endoc_avg_cost,omitempty"`    // 内分泌治疗单次费用(单位0.1万元)
}

func (x *DiseaseCostEntity) Reset() {
	*x = DiseaseCostEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiseaseCostEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiseaseCostEntity) ProtoMessage() {}

func (x *DiseaseCostEntity) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiseaseCostEntity.ProtoReflect.Descriptor instead.
func (*DiseaseCostEntity) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{78}
}

func (x *DiseaseCostEntity) GetDisease() string {
	if x != nil {
		return x.Disease
	}
	return ""
}

func (x *DiseaseCostEntity) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *DiseaseCostEntity) GetChemoCostMin() int32 {
	if x != nil {
		return x.ChemoCostMin
	}
	return 0
}

func (x *DiseaseCostEntity) GetChemoCostMax() int32 {
	if x != nil {
		return x.ChemoCostMax
	}
	return 0
}

func (x *DiseaseCostEntity) GetSurgCostMin() int32 {
	if x != nil {
		return x.SurgCostMin
	}
	return 0
}

func (x *DiseaseCostEntity) GetSurgCostMax() int32 {
	if x != nil {
		return x.SurgCostMax
	}
	return 0
}

func (x *DiseaseCostEntity) GetRadioCostMin() int32 {
	if x != nil {
		return x.RadioCostMin
	}
	return 0
}

func (x *DiseaseCostEntity) GetRadioCostMax() int32 {
	if x != nil {
		return x.RadioCostMax
	}
	return 0
}

func (x *DiseaseCostEntity) GetTargetCostMin() int32 {
	if x != nil {
		return x.TargetCostMin
	}
	return 0
}

func (x *DiseaseCostEntity) GetTargetCostMax() int32 {
	if x != nil {
		return x.TargetCostMax
	}
	return 0
}

func (x *DiseaseCostEntity) GetOtherCostMin() int32 {
	if x != nil {
		return x.OtherCostMin
	}
	return 0
}

func (x *DiseaseCostEntity) GetOtherCostMax() int32 {
	if x != nil {
		return x.OtherCostMax
	}
	return 0
}

func (x *DiseaseCostEntity) GetTotalCostMin() int32 {
	if x != nil {
		return x.TotalCostMin
	}
	return 0
}

func (x *DiseaseCostEntity) GetTotalCostMax() int32 {
	if x != nil {
		return x.TotalCostMax
	}
	return 0
}

func (x *DiseaseCostEntity) GetEndocCostMin() int32 {
	if x != nil {
		return x.EndocCostMin
	}
	return 0
}

func (x *DiseaseCostEntity) GetEndocCostMax() int32 {
	if x != nil {
		return x.EndocCostMax
	}
	return 0
}

func (x *DiseaseCostEntity) GetChemoAvgCost() int32 {
	if x != nil {
		return x.ChemoAvgCost
	}
	return 0
}

func (x *DiseaseCostEntity) GetSurgAvgCost() int32 {
	if x != nil {
		return x.SurgAvgCost
	}
	return 0
}

func (x *DiseaseCostEntity) GetRadioAvgCost() int32 {
	if x != nil {
		return x.RadioAvgCost
	}
	return 0
}

func (x *DiseaseCostEntity) GetRadioxAvgCost() int32 {
	if x != nil {
		return x.RadioxAvgCost
	}
	return 0
}

func (x *DiseaseCostEntity) GetTargetAvgCost() int32 {
	if x != nil {
		return x.TargetAvgCost
	}
	return 0
}

func (x *DiseaseCostEntity) GetEndocAvgCost() int32 {
	if x != nil {
		return x.EndocAvgCost
	}
	return 0
}

type FeedbackSuggest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contact string `protobuf:"bytes,1,opt,name=contact,proto3" json:"contact,omitempty"` // 联系方式
	Suggest string `protobuf:"bytes,2,opt,name=suggest,proto3" json:"suggest,omitempty"` // 建议
	More    string `protobuf:"bytes,3,opt,name=more,proto3" json:"more,omitempty"`       // 更多
}

func (x *FeedbackSuggest) Reset() {
	*x = FeedbackSuggest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeedbackSuggest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeedbackSuggest) ProtoMessage() {}

func (x *FeedbackSuggest) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeedbackSuggest.ProtoReflect.Descriptor instead.
func (*FeedbackSuggest) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{79}
}

func (x *FeedbackSuggest) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *FeedbackSuggest) GetSuggest() string {
	if x != nil {
		return x.Suggest
	}
	return ""
}

func (x *FeedbackSuggest) GetMore() string {
	if x != nil {
		return x.More
	}
	return ""
}

type UploadSearchResultFeedBackEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query    string           `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`       // 搜索关键字
	Tabname  string           `protobuf:"bytes,2,opt,name=tabname,proto3" json:"tabname,omitempty"`   // tab
	Type     string           `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`         // 类型
	Docid    string           `protobuf:"bytes,4,opt,name=docid,proto3" json:"docid,omitempty"`       // 文章id
	Summary  string           `protobuf:"bytes,5,opt,name=summary,proto3" json:"summary,omitempty"`   // 摘要
	Location string           `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"` // 排序位置
	Sortrule string           `protobuf:"bytes,7,opt,name=sortrule,proto3" json:"sortrule,omitempty"` // 排序规则
	Feedback *FeedbackSuggest `protobuf:"bytes,8,opt,name=feedback,proto3" json:"feedback,omitempty"` // 反馈内容
}

func (x *UploadSearchResultFeedBackEntity) Reset() {
	*x = UploadSearchResultFeedBackEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadSearchResultFeedBackEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadSearchResultFeedBackEntity) ProtoMessage() {}

func (x *UploadSearchResultFeedBackEntity) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadSearchResultFeedBackEntity.ProtoReflect.Descriptor instead.
func (*UploadSearchResultFeedBackEntity) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{80}
}

func (x *UploadSearchResultFeedBackEntity) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *UploadSearchResultFeedBackEntity) GetTabname() string {
	if x != nil {
		return x.Tabname
	}
	return ""
}

func (x *UploadSearchResultFeedBackEntity) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UploadSearchResultFeedBackEntity) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

func (x *UploadSearchResultFeedBackEntity) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *UploadSearchResultFeedBackEntity) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *UploadSearchResultFeedBackEntity) GetSortrule() string {
	if x != nil {
		return x.Sortrule
	}
	return ""
}

func (x *UploadSearchResultFeedBackEntity) GetFeedback() *FeedbackSuggest {
	if x != nil {
		return x.Feedback
	}
	return nil
}

type AuthPartnerDocsV2Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid      string   `protobuf:"bytes,1,opt,name=appid,proto3" json:"appid,omitempty"`            // 合作方ID
	Tag        string   `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`                // 授权的文章标签
	AutoUpdate int32    `protobuf:"varint,3,opt,name=autoUpdate,proto3" json:"autoUpdate,omitempty"` // 是否授权标签下所有的文章并自动包含新增文章
	Docids     []string `protobuf:"bytes,4,rep,name=docids,proto3" json:"docids,omitempty"`
}

func (x *AuthPartnerDocsV2Entity) Reset() {
	*x = AuthPartnerDocsV2Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthPartnerDocsV2Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthPartnerDocsV2Entity) ProtoMessage() {}

func (x *AuthPartnerDocsV2Entity) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthPartnerDocsV2Entity.ProtoReflect.Descriptor instead.
func (*AuthPartnerDocsV2Entity) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{81}
}

func (x *AuthPartnerDocsV2Entity) GetAppid() string {
	if x != nil {
		return x.Appid
	}
	return ""
}

func (x *AuthPartnerDocsV2Entity) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *AuthPartnerDocsV2Entity) GetAutoUpdate() int32 {
	if x != nil {
		return x.AutoUpdate
	}
	return 0
}

func (x *AuthPartnerDocsV2Entity) GetDocids() []string {
	if x != nil {
		return x.Docids
	}
	return nil
}

type AuthDocsInfoV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag        string   `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`                // 授权的文章标签
	AutoUpdate int32    `protobuf:"varint,2,opt,name=autoUpdate,proto3" json:"autoUpdate,omitempty"` // 是否授权标签下所有的文章并自动包含新增文章
	Docids     []string `protobuf:"bytes,3,rep,name=docids,proto3" json:"docids,omitempty"`
}

func (x *AuthDocsInfoV2) Reset() {
	*x = AuthDocsInfoV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthDocsInfoV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthDocsInfoV2) ProtoMessage() {}

func (x *AuthDocsInfoV2) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthDocsInfoV2.ProtoReflect.Descriptor instead.
func (*AuthDocsInfoV2) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{82}
}

func (x *AuthDocsInfoV2) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *AuthDocsInfoV2) GetAutoUpdate() int32 {
	if x != nil {
		return x.AutoUpdate
	}
	return 0
}

func (x *AuthDocsInfoV2) GetDocids() []string {
	if x != nil {
		return x.Docids
	}
	return nil
}

type GetAuthPartnerDocsV2Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags []*AuthDocsInfoV2 `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *GetAuthPartnerDocsV2Entity) Reset() {
	*x = GetAuthPartnerDocsV2Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAuthPartnerDocsV2Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuthPartnerDocsV2Entity) ProtoMessage() {}

func (x *GetAuthPartnerDocsV2Entity) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuthPartnerDocsV2Entity.ProtoReflect.Descriptor instead.
func (*GetAuthPartnerDocsV2Entity) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{83}
}

func (x *GetAuthPartnerDocsV2Entity) GetTags() []*AuthDocsInfoV2 {
	if x != nil {
		return x.Tags
	}
	return nil
}

type ExamDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target          string         `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`       // 项目名称
	Value           string         `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`         // 结果
	Type            int32          `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`          //-1未识别0:正常1:大于2:小于3:不等于4:等于5:小于等于6:大于等于
	Unit            string         `protobuf:"bytes,4,opt,name=unit,proto3" json:"unit,omitempty"`           // 单位
	Reference       string         `protobuf:"bytes,5,opt,name=reference,proto3" json:"reference,omitempty"` // 参开范围
	Detail          string         `protobuf:"bytes,6,opt,name=detail,proto3" json:"detail,omitempty"`       // 指标描述
	RelatedDiseases []*DiseaseItem `protobuf:"bytes,7,rep,name=related_diseases,json=relatedDiseases,proto3" json:"related_diseases,omitempty"`
	Result          string         `protobuf:"bytes,8,opt,name=result,proto3" json:"result,omitempty"` // 异常结果
	Docid           string         `protobuf:"bytes,9,opt,name=docid,proto3" json:"docid,omitempty"`   // 项目/指标docid
}

func (x *ExamDetail) Reset() {
	*x = ExamDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExamDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamDetail) ProtoMessage() {}

func (x *ExamDetail) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamDetail.ProtoReflect.Descriptor instead.
func (*ExamDetail) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{84}
}

func (x *ExamDetail) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ExamDetail) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ExamDetail) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ExamDetail) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *ExamDetail) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *ExamDetail) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *ExamDetail) GetRelatedDiseases() []*DiseaseItem {
	if x != nil {
		return x.RelatedDiseases
	}
	return nil
}

func (x *ExamDetail) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *ExamDetail) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

type ExamReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportId    int64         `protobuf:"varint,1,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`         // 报告ID
	ExamineName string        `protobuf:"bytes,2,opt,name=examine_name,json=examineName,proto3" json:"examine_name,omitempty"` // 检查项
	Age         string        `protobuf:"bytes,3,opt,name=age,proto3" json:"age,omitempty"`
	Gender      int32         `protobuf:"varint,4,opt,name=gender,proto3" json:"gender,omitempty"`                          // 1:男2:女3:新生儿
	CreateTs    int64         `protobuf:"varint,5,opt,name=create_ts,json=createTs,proto3" json:"create_ts,omitempty"`      // 创建时间戳(秒)
	CreateDate  string        `protobuf:"bytes,6,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"` // 创建日期
	ExamDetails []*ExamDetail `protobuf:"bytes,7,rep,name=exam_details,json=examDetails,proto3" json:"exam_details,omitempty"`
	PicUrl      string        `protobuf:"bytes,8,opt,name=pic_url,json=picUrl,proto3" json:"pic_url,omitempty"` // 报告图片链接
	Docid       string        `protobuf:"bytes,9,opt,name=docid,proto3" json:"docid,omitempty"`                 // 检查项docid
	Status      int32         `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`             // 0:临时报告1:已保存
}

func (x *ExamReport) Reset() {
	*x = ExamReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExamReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamReport) ProtoMessage() {}

func (x *ExamReport) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamReport.ProtoReflect.Descriptor instead.
func (*ExamReport) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{85}
}

func (x *ExamReport) GetReportId() int64 {
	if x != nil {
		return x.ReportId
	}
	return 0
}

func (x *ExamReport) GetExamineName() string {
	if x != nil {
		return x.ExamineName
	}
	return ""
}

func (x *ExamReport) GetAge() string {
	if x != nil {
		return x.Age
	}
	return ""
}

func (x *ExamReport) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *ExamReport) GetCreateTs() int64 {
	if x != nil {
		return x.CreateTs
	}
	return 0
}

func (x *ExamReport) GetCreateDate() string {
	if x != nil {
		return x.CreateDate
	}
	return ""
}

func (x *ExamReport) GetExamDetails() []*ExamDetail {
	if x != nil {
		return x.ExamDetails
	}
	return nil
}

func (x *ExamReport) GetPicUrl() string {
	if x != nil {
		return x.PicUrl
	}
	return ""
}

func (x *ExamReport) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

func (x *ExamReport) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type DrcmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Docid    string `protobuf:"bytes,1,opt,name=docid,proto3" json:"docid,omitempty"`                       // docidoforglandingpageforrcm.
	Uin      string `protobuf:"bytes,2,opt,name=uin,proto3" json:"uin,omitempty"`                           // uniquserid.
	SearchId string `protobuf:"bytes,3,opt,name=search_id,json=searchId,proto3" json:"search_id,omitempty"` // search_idforcurrentsearch.
	GroupId  string `protobuf:"bytes,4,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`    // abtestgroupid.
}

func (x *DrcmRequest) Reset() {
	*x = DrcmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrcmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrcmRequest) ProtoMessage() {}

func (x *DrcmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrcmRequest.ProtoReflect.Descriptor instead.
func (*DrcmRequest) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{86}
}

func (x *DrcmRequest) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

func (x *DrcmRequest) GetUin() string {
	if x != nil {
		return x.Uin
	}
	return ""
}

func (x *DrcmRequest) GetSearchId() string {
	if x != nil {
		return x.SearchId
	}
	return ""
}

func (x *DrcmRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type DrcmReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rcmdocs []string `protobuf:"bytes,1,rep,name=rcmdocs,proto3" json:"rcmdocs,omitempty"`
}

func (x *DrcmReply) Reset() {
	*x = DrcmReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrcmReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrcmReply) ProtoMessage() {}

func (x *DrcmReply) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrcmReply.ProtoReflect.Descriptor instead.
func (*DrcmReply) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{87}
}

func (x *DrcmReply) GetRcmdocs() []string {
	if x != nil {
		return x.Rcmdocs
	}
	return nil
}

type DrcmReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"` // 请求ID
	ChannelId string `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"` // 场景ID
	DocId     string `protobuf:"bytes,3,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`             // 文章ID
	UserId    string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          // 用户ID
	DocNum    int32  `protobuf:"varint,5,opt,name=doc_num,json=docNum,proto3" json:"doc_num,omitempty"`         // 请求数量
	Offset    int32  `protobuf:"varint,6,opt,name=offset,proto3" json:"offset,omitempty"`                       // 请求偏移量
}

func (x *DrcmReq) Reset() {
	*x = DrcmReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrcmReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrcmReq) ProtoMessage() {}

func (x *DrcmReq) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrcmReq.ProtoReflect.Descriptor instead.
func (*DrcmReq) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{88}
}

func (x *DrcmReq) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *DrcmReq) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *DrcmReq) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *DrcmReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DrcmReq) GetDocNum() int32 {
	if x != nil {
		return x.DocNum
	}
	return 0
}

func (x *DrcmReq) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type RcmDoc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocId  string `protobuf:"bytes,1,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"` // 文章ID
	Ctype  int32  `protobuf:"varint,2,opt,name=ctype,proto3" json:"ctype,omitempty"`             // 文章类型
	Source string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`            // 文章来源
}

func (x *RcmDoc) Reset() {
	*x = RcmDoc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RcmDoc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RcmDoc) ProtoMessage() {}

func (x *RcmDoc) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RcmDoc.ProtoReflect.Descriptor instead.
func (*RcmDoc) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{89}
}

func (x *RcmDoc) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *RcmDoc) GetCtype() int32 {
	if x != nil {
		return x.Ctype
	}
	return 0
}

func (x *RcmDoc) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type DrcmResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetCode int32     `protobuf:"varint,1,opt,name=ret_code,json=retCode,proto3" json:"ret_code,omitempty"`
	RetMsg  string    `protobuf:"bytes,2,opt,name=ret_msg,json=retMsg,proto3" json:"ret_msg,omitempty"`
	Docs    []*RcmDoc `protobuf:"bytes,3,rep,name=docs,proto3" json:"docs,omitempty"` // 相关文章列表，已排序
}

func (x *DrcmResp) Reset() {
	*x = DrcmResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrcmResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrcmResp) ProtoMessage() {}

func (x *DrcmResp) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrcmResp.ProtoReflect.Descriptor instead.
func (*DrcmResp) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{90}
}

func (x *DrcmResp) GetRetCode() int32 {
	if x != nil {
		return x.RetCode
	}
	return 0
}

func (x *DrcmResp) GetRetMsg() string {
	if x != nil {
		return x.RetMsg
	}
	return ""
}

func (x *DrcmResp) GetDocs() []*RcmDoc {
	if x != nil {
		return x.Docs
	}
	return nil
}

type QueryJkNewsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version    int32  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`      // 版本;每更新一次加1
	Eventid    string `protobuf:"bytes,2,opt,name=eventid,proto3" json:"eventid,omitempty"`       // 事件ID
	Event      string `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`           // 事件名
	City       string `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`             // 城市名
	Heat       int32  `protobuf:"varint,5,opt,name=heat,proto3" json:"heat,omitempty"`            // 热度
	Position   int32  `protobuf:"varint,6,opt,name=position,proto3" json:"position,omitempty"`    // 排序位置
	Eventlevel string `protobuf:"bytes,7,opt,name=eventlevel,proto3" json:"eventlevel,omitempty"` // 等级;S+/S/A/B/C
	Province   string `protobuf:"bytes,8,opt,name=province,proto3" json:"province,omitempty"`     // 省份名
}

func (x *QueryJkNewsInfo) Reset() {
	*x = QueryJkNewsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryJkNewsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryJkNewsInfo) ProtoMessage() {}

func (x *QueryJkNewsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryJkNewsInfo.ProtoReflect.Descriptor instead.
func (*QueryJkNewsInfo) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{91}
}

func (x *QueryJkNewsInfo) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *QueryJkNewsInfo) GetEventid() string {
	if x != nil {
		return x.Eventid
	}
	return ""
}

func (x *QueryJkNewsInfo) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *QueryJkNewsInfo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *QueryJkNewsInfo) GetHeat() int32 {
	if x != nil {
		return x.Heat
	}
	return 0
}

func (x *QueryJkNewsInfo) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *QueryJkNewsInfo) GetEventlevel() string {
	if x != nil {
		return x.Eventlevel
	}
	return ""
}

func (x *QueryJkNewsInfo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

type QueryJkNewsContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eventid            string `protobuf:"bytes,1,opt,name=eventid,proto3" json:"eventid,omitempty"`                                                    // 事件ID
	Event              string `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`                                                        // 事件名
	MainCmsId          string `protobuf:"bytes,3,opt,name=main_cms_id,json=mainCmsId,proto3" json:"main_cms_id,omitempty"`                             // 展现的企鹅号文章ID
	MainCmsTitle       string `protobuf:"bytes,4,opt,name=main_cms_title,json=mainCmsTitle,proto3" json:"main_cms_title,omitempty"`                    // 展现的企鹅号文章标题
	MainCmsContent     string `protobuf:"bytes,5,opt,name=main_cms_content,json=mainCmsContent,proto3" json:"main_cms_content,omitempty"`              // 展现的企鹅号内容
	MainCmsIcon        string `protobuf:"bytes,6,opt,name=main_cms_icon,json=mainCmsIcon,proto3" json:"main_cms_icon,omitempty"`                       // 展现的企鹅号头像
	MainCmsName        string `protobuf:"bytes,7,opt,name=main_cms_name,json=mainCmsName,proto3" json:"main_cms_name,omitempty"`                       // 展现的企鹅号作者
	MainCmsPubtime     int32  `protobuf:"varint,8,opt,name=main_cms_pubtime,json=mainCmsPubtime,proto3" json:"main_cms_pubtime,omitempty"`             // 展现的企鹅号发布时间
	Citiao             string `protobuf:"bytes,9,opt,name=citiao,proto3" json:"citiao,omitempty"`                                                      // 词条名
	CitiaoRelateDocids string `protobuf:"bytes,10,opt,name=citiao_relate_docids,json=citiaoRelateDocids,proto3" json:"citiao_relate_docids,omitempty"` // 词条下的相关文章docid，分号隔开
	ReadNum            int32  `protobuf:"varint,11,opt,name=read_num,json=readNum,proto3" json:"read_num,omitempty"`                                   // 阅读量
	RelateCmsIds       string `protobuf:"bytes,12,opt,name=relate_cms_ids,json=relateCmsIds,proto3" json:"relate_cms_ids,omitempty"`                   // 延展阅读;格式:[{cms_id;title;img_url;media_name}]
}

func (x *QueryJkNewsContent) Reset() {
	*x = QueryJkNewsContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryJkNewsContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryJkNewsContent) ProtoMessage() {}

func (x *QueryJkNewsContent) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryJkNewsContent.ProtoReflect.Descriptor instead.
func (*QueryJkNewsContent) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{92}
}

func (x *QueryJkNewsContent) GetEventid() string {
	if x != nil {
		return x.Eventid
	}
	return ""
}

func (x *QueryJkNewsContent) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *QueryJkNewsContent) GetMainCmsId() string {
	if x != nil {
		return x.MainCmsId
	}
	return ""
}

func (x *QueryJkNewsContent) GetMainCmsTitle() string {
	if x != nil {
		return x.MainCmsTitle
	}
	return ""
}

func (x *QueryJkNewsContent) GetMainCmsContent() string {
	if x != nil {
		return x.MainCmsContent
	}
	return ""
}

func (x *QueryJkNewsContent) GetMainCmsIcon() string {
	if x != nil {
		return x.MainCmsIcon
	}
	return ""
}

func (x *QueryJkNewsContent) GetMainCmsName() string {
	if x != nil {
		return x.MainCmsName
	}
	return ""
}

func (x *QueryJkNewsContent) GetMainCmsPubtime() int32 {
	if x != nil {
		return x.MainCmsPubtime
	}
	return 0
}

func (x *QueryJkNewsContent) GetCitiao() string {
	if x != nil {
		return x.Citiao
	}
	return ""
}

func (x *QueryJkNewsContent) GetCitiaoRelateDocids() string {
	if x != nil {
		return x.CitiaoRelateDocids
	}
	return ""
}

func (x *QueryJkNewsContent) GetReadNum() int32 {
	if x != nil {
		return x.ReadNum
	}
	return 0
}

func (x *QueryJkNewsContent) GetRelateCmsIds() string {
	if x != nil {
		return x.RelateCmsIds
	}
	return ""
}

type QueryJkHotEventInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainCmsId      string `protobuf:"bytes,1,opt,name=main_cms_id,json=mainCmsId,proto3" json:"main_cms_id,omitempty"`                 // 展现的企鹅号文章ID
	MainCmsTitle   string `protobuf:"bytes,2,opt,name=main_cms_title,json=mainCmsTitle,proto3" json:"main_cms_title,omitempty"`        // 展现的企鹅号文章标题
	MainCmsName    string `protobuf:"bytes,3,opt,name=main_cms_name,json=mainCmsName,proto3" json:"main_cms_name,omitempty"`           // 展现的企鹅号作者
	MainCmsPubtime int32  `protobuf:"varint,4,opt,name=main_cms_pubtime,json=mainCmsPubtime,proto3" json:"main_cms_pubtime,omitempty"` // 展现的企鹅号发布时间
	MainCmsUrl     string `protobuf:"bytes,5,opt,name=main_cms_url,json=mainCmsUrl,proto3" json:"main_cms_url,omitempty"`              // 展现的落地页url
	MainCmsImage   string `protobuf:"bytes,6,opt,name=main_cms_image,json=mainCmsImage,proto3" json:"main_cms_image,omitempty"`        // 展现的企鹅号文章缩略图
}

func (x *QueryJkHotEventInfo) Reset() {
	*x = QueryJkHotEventInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryJkHotEventInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryJkHotEventInfo) ProtoMessage() {}

func (x *QueryJkHotEventInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryJkHotEventInfo.ProtoReflect.Descriptor instead.
func (*QueryJkHotEventInfo) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{93}
}

func (x *QueryJkHotEventInfo) GetMainCmsId() string {
	if x != nil {
		return x.MainCmsId
	}
	return ""
}

func (x *QueryJkHotEventInfo) GetMainCmsTitle() string {
	if x != nil {
		return x.MainCmsTitle
	}
	return ""
}

func (x *QueryJkHotEventInfo) GetMainCmsName() string {
	if x != nil {
		return x.MainCmsName
	}
	return ""
}

func (x *QueryJkHotEventInfo) GetMainCmsPubtime() int32 {
	if x != nil {
		return x.MainCmsPubtime
	}
	return 0
}

func (x *QueryJkHotEventInfo) GetMainCmsUrl() string {
	if x != nil {
		return x.MainCmsUrl
	}
	return ""
}

func (x *QueryJkHotEventInfo) GetMainCmsImage() string {
	if x != nil {
		return x.MainCmsImage
	}
	return ""
}

type GetUinByOpenidReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Openid string `protobuf:"bytes,1,opt,name=openid,proto3" json:"openid,omitempty"` // 用户openid
}

func (x *GetUinByOpenidReq) Reset() {
	*x = GetUinByOpenidReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUinByOpenidReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUinByOpenidReq) ProtoMessage() {}

func (x *GetUinByOpenidReq) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUinByOpenidReq.ProtoReflect.Descriptor instead.
func (*GetUinByOpenidReq) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{94}
}

func (x *GetUinByOpenidReq) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

type GetUinByOpenidResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uin int64 `protobuf:"varint,1,opt,name=uin,proto3" json:"uin,omitempty"` // 用户UIN
}

func (x *GetUinByOpenidResp) Reset() {
	*x = GetUinByOpenidResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUinByOpenidResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUinByOpenidResp) ProtoMessage() {}

func (x *GetUinByOpenidResp) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUinByOpenidResp.ProtoReflect.Descriptor instead.
func (*GetUinByOpenidResp) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{95}
}

func (x *GetUinByOpenidResp) GetUin() int64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

type CCCheckTokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"` // 用户token
}

func (x *CCCheckTokenReq) Reset() {
	*x = CCCheckTokenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCCheckTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCCheckTokenReq) ProtoMessage() {}

func (x *CCCheckTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCCheckTokenReq.ProtoReflect.Descriptor instead.
func (*CCCheckTokenReq) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{96}
}

func (x *CCCheckTokenReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type CCCheckTokenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uin int64 `protobuf:"varint,1,opt,name=uin,proto3" json:"uin,omitempty"` // 用户UIN
}

func (x *CCCheckTokenResp) Reset() {
	*x = CCCheckTokenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CCCheckTokenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CCCheckTokenResp) ProtoMessage() {}

func (x *CCCheckTokenResp) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CCCheckTokenResp.ProtoReflect.Descriptor instead.
func (*CCCheckTokenResp) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{97}
}

func (x *CCCheckTokenResp) GetUin() int64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

type GetMyCommunityListInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cid      int64  `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`                          // 所属圈子ID
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                         // 圈子名
	Pic      string `protobuf:"bytes,3,opt,name=pic,proto3" json:"pic,omitempty"`                           // 圈子图片
	SharePic string `protobuf:"bytes,4,opt,name=share_pic,json=sharePic,proto3" json:"share_pic,omitempty"` // 分享图片
}

func (x *GetMyCommunityListInfo) Reset() {
	*x = GetMyCommunityListInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMyCommunityListInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyCommunityListInfo) ProtoMessage() {}

func (x *GetMyCommunityListInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyCommunityListInfo.ProtoReflect.Descriptor instead.
func (*GetMyCommunityListInfo) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{98}
}

func (x *GetMyCommunityListInfo) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *GetMyCommunityListInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetMyCommunityListInfo) GetPic() string {
	if x != nil {
		return x.Pic
	}
	return ""
}

func (x *GetMyCommunityListInfo) GetSharePic() string {
	if x != nil {
		return x.SharePic
	}
	return ""
}

type GetMyCommunityListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Count  int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetMyCommunityListReq) Reset() {
	*x = GetMyCommunityListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMyCommunityListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyCommunityListReq) ProtoMessage() {}

func (x *GetMyCommunityListReq) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyCommunityListReq.ProtoReflect.Descriptor instead.
func (*GetMyCommunityListReq) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{99}
}

func (x *GetMyCommunityListReq) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetMyCommunityListReq) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetMyCommunityListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode     int32                     `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMsg      string                    `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	ToastMsg      string                    `protobuf:"bytes,3,opt,name=toast_msg,json=toastMsg,proto3" json:"toast_msg,omitempty"`
	CommunityList []*GetMyCommunityListInfo `protobuf:"bytes,4,rep,name=community_list,json=communityList,proto3" json:"community_list,omitempty"`
}

func (x *GetMyCommunityListResp) Reset() {
	*x = GetMyCommunityListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMyCommunityListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyCommunityListResp) ProtoMessage() {}

func (x *GetMyCommunityListResp) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyCommunityListResp.ProtoReflect.Descriptor instead.
func (*GetMyCommunityListResp) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{100}
}

func (x *GetMyCommunityListResp) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetMyCommunityListResp) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *GetMyCommunityListResp) GetToastMsg() string {
	if x != nil {
		return x.ToastMsg
	}
	return ""
}

func (x *GetMyCommunityListResp) GetCommunityList() []*GetMyCommunityListInfo {
	if x != nil {
		return x.CommunityList
	}
	return nil
}

type QueryUserPosInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                          // ID
	Uin          int64  `protobuf:"varint,2,opt,name=uin,proto3" json:"uin,omitempty"`                                        // 用户UIN
	UserImage    string `protobuf:"bytes,3,opt,name=user_image,json=userImage,proto3" json:"user_image,omitempty"`            // 用户上传图片
	Gender       int32  `protobuf:"varint,4,opt,name=gender,proto3" json:"gender,omitempty"`                                  // 性别;1:man;0:woman
	Age          int32  `protobuf:"varint,5,opt,name=age,proto3" json:"age,omitempty"`                                        // 年龄;0:10-16岁;1:>16岁
	Rate         int32  `protobuf:"varint,6,opt,name=rate,proto3" json:"rate,omitempty"`                                      // 评分
	PoseDesc     string `protobuf:"bytes,7,opt,name=pose_desc,json=poseDesc,proto3" json:"pose_desc,omitempty"`               // 评语
	Comments     string `protobuf:"bytes,8,opt,name=comments,proto3" json:"comments,omitempty"`                               // 描述
	HeadRate     int32  `protobuf:"varint,9,opt,name=head_rate,json=headRate,proto3" json:"head_rate,omitempty"`              // 头部评分
	HeadDesc     string `protobuf:"bytes,10,opt,name=head_desc,json=headDesc,proto3" json:"head_desc,omitempty"`              // 头部评语
	ShoulderRate int32  `protobuf:"varint,11,opt,name=shoulder_rate,json=shoulderRate,proto3" json:"shoulder_rate,omitempty"` // 肩部评分
	ShoulderDesc string `protobuf:"bytes,12,opt,name=shoulder_desc,json=shoulderDesc,proto3" json:"shoulder_desc,omitempty"`  // 肩部评语
	LegRate      int32  `protobuf:"varint,13,opt,name=leg_rate,json=legRate,proto3" json:"leg_rate,omitempty"`                // 腿部评分
	LegDesc      string `protobuf:"bytes,14,opt,name=leg_desc,json=legDesc,proto3" json:"leg_desc,omitempty"`                 // 腿部评语
	Image        string `protobuf:"bytes,15,opt,name=image,proto3" json:"image,omitempty"`                                    // 图片
	UpdateTime   int32  `protobuf:"varint,16,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`       // 更新时间
}

func (x *QueryUserPosInfo) Reset() {
	*x = QueryUserPosInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUserPosInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUserPosInfo) ProtoMessage() {}

func (x *QueryUserPosInfo) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUserPosInfo.ProtoReflect.Descriptor instead.
func (*QueryUserPosInfo) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{101}
}

func (x *QueryUserPosInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryUserPosInfo) GetUin() int64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *QueryUserPosInfo) GetUserImage() string {
	if x != nil {
		return x.UserImage
	}
	return ""
}

func (x *QueryUserPosInfo) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *QueryUserPosInfo) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *QueryUserPosInfo) GetRate() int32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *QueryUserPosInfo) GetPoseDesc() string {
	if x != nil {
		return x.PoseDesc
	}
	return ""
}

func (x *QueryUserPosInfo) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

func (x *QueryUserPosInfo) GetHeadRate() int32 {
	if x != nil {
		return x.HeadRate
	}
	return 0
}

func (x *QueryUserPosInfo) GetHeadDesc() string {
	if x != nil {
		return x.HeadDesc
	}
	return ""
}

func (x *QueryUserPosInfo) GetShoulderRate() int32 {
	if x != nil {
		return x.ShoulderRate
	}
	return 0
}

func (x *QueryUserPosInfo) GetShoulderDesc() string {
	if x != nil {
		return x.ShoulderDesc
	}
	return ""
}

func (x *QueryUserPosInfo) GetLegRate() int32 {
	if x != nil {
		return x.LegRate
	}
	return 0
}

func (x *QueryUserPosInfo) GetLegDesc() string {
	if x != nil {
		return x.LegDesc
	}
	return ""
}

func (x *QueryUserPosInfo) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *QueryUserPosInfo) GetUpdateTime() int32 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type QueryUserFollowing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                // 订阅的名称
	UpdateTime int32  `protobuf:"varint,2,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"` // 更新时间
}

func (x *QueryUserFollowing) Reset() {
	*x = QueryUserFollowing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUserFollowing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUserFollowing) ProtoMessage() {}

func (x *QueryUserFollowing) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUserFollowing.ProtoReflect.Descriptor instead.
func (*QueryUserFollowing) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{102}
}

func (x *QueryUserFollowing) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryUserFollowing) GetUpdateTime() int32 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type BatchDoUserDocRelationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid          string            `protobuf:"bytes,1,opt,name=appid,proto3" json:"appid,omitempty"`
	BizName        string            `protobuf:"bytes,2,opt,name=biz_name,json=bizName,proto3" json:"biz_name,omitempty"`
	Uins           []int64           `protobuf:"varint,3,rep,packed,name=uins,proto3" json:"uins,omitempty"`
	Docs           []string          `protobuf:"bytes,4,rep,name=docs,proto3" json:"docs,omitempty"`
	OperateType    int32             `protobuf:"varint,5,opt,name=operate_type,json=operateType,proto3" json:"operate_type,omitempty"`                                                                                // 操作类型，0取消，1添加
	NosaveUserlist int32             `protobuf:"varint,6,opt,name=nosave_userlist,json=nosaveUserlist,proto3" json:"nosave_userlist,omitempty"`                                                                       // 是否存单Doc的用户列表，0-需要，1-不需要
	DataTime       map[string]uint32 `protobuf:"bytes,7,rep,name=data_time,json=dataTime,proto3" json:"data_time,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 数据时间，不传为当前时间
	ExpireTime     int32             `protobuf:"varint,8,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`                                                                                   // 过期时间，0不设置过期
}

func (x *BatchDoUserDocRelationReq) Reset() {
	*x = BatchDoUserDocRelationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchDoUserDocRelationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDoUserDocRelationReq) ProtoMessage() {}

func (x *BatchDoUserDocRelationReq) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDoUserDocRelationReq.ProtoReflect.Descriptor instead.
func (*BatchDoUserDocRelationReq) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{103}
}

func (x *BatchDoUserDocRelationReq) GetAppid() string {
	if x != nil {
		return x.Appid
	}
	return ""
}

func (x *BatchDoUserDocRelationReq) GetBizName() string {
	if x != nil {
		return x.BizName
	}
	return ""
}

func (x *BatchDoUserDocRelationReq) GetUins() []int64 {
	if x != nil {
		return x.Uins
	}
	return nil
}

func (x *BatchDoUserDocRelationReq) GetDocs() []string {
	if x != nil {
		return x.Docs
	}
	return nil
}

func (x *BatchDoUserDocRelationReq) GetOperateType() int32 {
	if x != nil {
		return x.OperateType
	}
	return 0
}

func (x *BatchDoUserDocRelationReq) GetNosaveUserlist() int32 {
	if x != nil {
		return x.NosaveUserlist
	}
	return 0
}

func (x *BatchDoUserDocRelationReq) GetDataTime() map[string]uint32 {
	if x != nil {
		return x.DataTime
	}
	return nil
}

func (x *BatchDoUserDocRelationReq) GetExpireTime() int32 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

type GetUserDocRelationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid   string `protobuf:"bytes,1,opt,name=appid,proto3" json:"appid,omitempty"`
	BizName string `protobuf:"bytes,2,opt,name=biz_name,json=bizName,proto3" json:"biz_name,omitempty"`
	Uin     int64  `protobuf:"varint,3,opt,name=uin,proto3" json:"uin,omitempty"` // 用户ID
}

func (x *GetUserDocRelationReq) Reset() {
	*x = GetUserDocRelationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserDocRelationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserDocRelationReq) ProtoMessage() {}

func (x *GetUserDocRelationReq) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserDocRelationReq.ProtoReflect.Descriptor instead.
func (*GetUserDocRelationReq) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{104}
}

func (x *GetUserDocRelationReq) GetAppid() string {
	if x != nil {
		return x.Appid
	}
	return ""
}

func (x *GetUserDocRelationReq) GetBizName() string {
	if x != nil {
		return x.BizName
	}
	return ""
}

func (x *GetUserDocRelationReq) GetUin() int64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

type GetDocRelationUsersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid   string `protobuf:"bytes,1,opt,name=appid,proto3" json:"appid,omitempty"`
	BizName string `protobuf:"bytes,2,opt,name=biz_name,json=bizName,proto3" json:"biz_name,omitempty"`
	Doc     string `protobuf:"bytes,3,opt,name=doc,proto3" json:"doc,omitempty"`
	Offset  int32  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Count   int32  `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetDocRelationUsersReq) Reset() {
	*x = GetDocRelationUsersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDocRelationUsersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocRelationUsersReq) ProtoMessage() {}

func (x *GetDocRelationUsersReq) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocRelationUsersReq.ProtoReflect.Descriptor instead.
func (*GetDocRelationUsersReq) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{105}
}

func (x *GetDocRelationUsersReq) GetAppid() string {
	if x != nil {
		return x.Appid
	}
	return ""
}

func (x *GetDocRelationUsersReq) GetBizName() string {
	if x != nil {
		return x.BizName
	}
	return ""
}

func (x *GetDocRelationUsersReq) GetDoc() string {
	if x != nil {
		return x.Doc
	}
	return ""
}

func (x *GetDocRelationUsersReq) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetDocRelationUsersReq) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type UserDocRelationItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uin        int64  `protobuf:"varint,1,opt,name=uin,proto3" json:"uin,omitempty"` // 用户ID
	Doc        string `protobuf:"bytes,2,opt,name=doc,proto3" json:"doc,omitempty"`
	CreateTime int32  `protobuf:"varint,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *UserDocRelationItem) Reset() {
	*x = UserDocRelationItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDocRelationItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDocRelationItem) ProtoMessage() {}

func (x *UserDocRelationItem) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDocRelationItem.ProtoReflect.Descriptor instead.
func (*UserDocRelationItem) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{106}
}

func (x *UserDocRelationItem) GetUin() int64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *UserDocRelationItem) GetDoc() string {
	if x != nil {
		return x.Doc
	}
	return ""
}

func (x *UserDocRelationItem) GetCreateTime() int32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type GetUserDocRelationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode int32                  `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMsg  string                 `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	List      []*UserDocRelationItem `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetUserDocRelationResp) Reset() {
	*x = GetUserDocRelationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserDocRelationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserDocRelationResp) ProtoMessage() {}

func (x *GetUserDocRelationResp) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserDocRelationResp.ProtoReflect.Descriptor instead.
func (*GetUserDocRelationResp) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{107}
}

func (x *GetUserDocRelationResp) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetUserDocRelationResp) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *GetUserDocRelationResp) GetList() []*UserDocRelationItem {
	if x != nil {
		return x.List
	}
	return nil
}

type GetDocsRelationCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Appid   string   `protobuf:"bytes,1,opt,name=appid,proto3" json:"appid,omitempty"`
	BizName string   `protobuf:"bytes,2,opt,name=biz_name,json=bizName,proto3" json:"biz_name,omitempty"`
	Docs    []string `protobuf:"bytes,3,rep,name=docs,proto3" json:"docs,omitempty"`
	Offset  int32    `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Count   int32    `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetDocsRelationCountReq) Reset() {
	*x = GetDocsRelationCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDocsRelationCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocsRelationCountReq) ProtoMessage() {}

func (x *GetDocsRelationCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocsRelationCountReq.ProtoReflect.Descriptor instead.
func (*GetDocsRelationCountReq) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{108}
}

func (x *GetDocsRelationCountReq) GetAppid() string {
	if x != nil {
		return x.Appid
	}
	return ""
}

func (x *GetDocsRelationCountReq) GetBizName() string {
	if x != nil {
		return x.BizName
	}
	return ""
}

func (x *GetDocsRelationCountReq) GetDocs() []string {
	if x != nil {
		return x.Docs
	}
	return nil
}

func (x *GetDocsRelationCountReq) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetDocsRelationCountReq) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetDocsRelationCountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode         int32            `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMsg          string           `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	DocsRelationCount map[string]int32 `protobuf:"bytes,3,rep,name=docs_relation_count,json=docsRelationCount,proto3" json:"docs_relation_count,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GetDocsRelationCountResp) Reset() {
	*x = GetDocsRelationCountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDocsRelationCountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocsRelationCountResp) ProtoMessage() {}

func (x *GetDocsRelationCountResp) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocsRelationCountResp.ProtoReflect.Descriptor instead.
func (*GetDocsRelationCountResp) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{109}
}

func (x *GetDocsRelationCountResp) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetDocsRelationCountResp) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *GetDocsRelationCountResp) GetDocsRelationCount() map[string]int32 {
	if x != nil {
		return x.DocsRelationCount
	}
	return nil
}

// RpcManager
type PushToUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventName     string `protobuf:"bytes,1,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`             // 卡片对应的eventName
	EffectiveTime string `protobuf:"bytes,2,opt,name=effective_time,json=effectiveTime,proto3" json:"effective_time,omitempty"` // 事件的生效时间，如酒店入住时间，UTC时区，精确到毫秒，格式:yyyymmddhhmmssSSS.eventName存在时必选，生效日期不能早于发送事件通知当天
	ExpireTime    string `protobuf:"bytes,3,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`          // 事件的失效时间，超过该时间后，事件不再通知用户，UTC时区，精确到毫秒，格式:yyyymmddhhmmssSSS.eventName存在时必选
	Parameters    string `protobuf:"bytes,4,opt,name=parameters,proto3" json:"parameters,omitempty"`                            // 卡片对应的paraeters
	OpenId        string `protobuf:"bytes,5,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`                      // 华为快应用用户openid
}

func (x *PushToUserReq) Reset() {
	*x = PushToUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushToUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushToUserReq) ProtoMessage() {}

func (x *PushToUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushToUserReq.ProtoReflect.Descriptor instead.
func (*PushToUserReq) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{110}
}

func (x *PushToUserReq) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *PushToUserReq) GetEffectiveTime() string {
	if x != nil {
		return x.EffectiveTime
	}
	return ""
}

func (x *PushToUserReq) GetExpireTime() string {
	if x != nil {
		return x.ExpireTime
	}
	return ""
}

func (x *PushToUserReq) GetParameters() string {
	if x != nil {
		return x.Parameters
	}
	return ""
}

func (x *PushToUserReq) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

type PushToUserResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`               // 调用华为服务出错时返回的结果类型，参考https:
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"` // 调用华为服务出错时返回的错误详情，参考https:
}

func (x *PushToUserResp) Reset() {
	*x = PushToUserResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushToUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushToUserResp) ProtoMessage() {}

func (x *PushToUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushToUserResp.ProtoReflect.Descriptor instead.
func (*PushToUserResp) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{111}
}

func (x *PushToUserResp) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *PushToUserResp) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type BatchGetESResultReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queries []string `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
	Sort    string   `protobuf:"bytes,2,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *BatchGetESResultReq) Reset() {
	*x = BatchGetESResultReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetESResultReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetESResultReq) ProtoMessage() {}

func (x *BatchGetESResultReq) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetESResultReq.ProtoReflect.Descriptor instead.
func (*BatchGetESResultReq) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{112}
}

func (x *BatchGetESResultReq) GetQueries() []string {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *BatchGetESResultReq) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

type SDocEsIndexItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Docid string `protobuf:"bytes,1,opt,name=docid,proto3" json:"docid,omitempty"`
	Type  int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *SDocEsIndexItem) Reset() {
	*x = SDocEsIndexItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SDocEsIndexItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SDocEsIndexItem) ProtoMessage() {}

func (x *SDocEsIndexItem) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SDocEsIndexItem.ProtoReflect.Descriptor instead.
func (*SDocEsIndexItem) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{113}
}

func (x *SDocEsIndexItem) GetDocid() string {
	if x != nil {
		return x.Docid
	}
	return ""
}

func (x *SDocEsIndexItem) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type QueryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query  string             `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Result []*SDocEsIndexItem `protobuf:"bytes,2,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *QueryResult) Reset() {
	*x = QueryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResult) ProtoMessage() {}

func (x *QueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResult.ProtoReflect.Descriptor instead.
func (*QueryResult) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{114}
}

func (x *QueryResult) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *QueryResult) GetResult() []*SDocEsIndexItem {
	if x != nil {
		return x.Result
	}
	return nil
}

type BatchGetESResultResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*QueryResult `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *BatchGetESResultResp) Reset() {
	*x = BatchGetESResultResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGetESResultResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetESResultResp) ProtoMessage() {}

func (x *BatchGetESResultResp) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetESResultResp.ProtoReflect.Descriptor instead.
func (*BatchGetESResultResp) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{115}
}

func (x *BatchGetESResultResp) GetList() []*QueryResult {
	if x != nil {
		return x.List
	}
	return nil
}

type MoniterLogReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogName      string  `protobuf:"bytes,1,opt,name=log_name,json=logName,proto3" json:"log_name,omitempty"`
	From         string  `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To           string  `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	FunctionName string  `protobuf:"bytes,4,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	Cnt          int32   `protobuf:"varint,5,opt,name=cnt,proto3" json:"cnt,omitempty"`
	Cost         float32 `protobuf:"fixed32,6,opt,name=cost,proto3" json:"cost,omitempty"`
	RetCode      int32   `protobuf:"varint,7,opt,name=ret_code,json=retCode,proto3" json:"ret_code,omitempty"`
}

func (x *MoniterLogReport) Reset() {
	*x = MoniterLogReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MedBaike_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoniterLogReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoniterLogReport) ProtoMessage() {}

func (x *MoniterLogReport) ProtoReflect() protoreflect.Message {
	mi := &file_MedBaike_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoniterLogReport.ProtoReflect.Descriptor instead.
func (*MoniterLogReport) Descriptor() ([]byte, []int) {
	return file_MedBaike_proto_rawDescGZIP(), []int{116}
}

func (x *MoniterLogReport) GetLogName() string {
	if x != nil {
		return x.LogName
	}
	return ""
}

func (x *MoniterLogReport) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *MoniterLogReport) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *MoniterLogReport) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *MoniterLogReport) GetCnt() int32 {
	if x != nil {
		return x.Cnt
	}
	return 0
}

func (x *MoniterLogReport) GetCost() float32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *MoniterLogReport) GetRetCode() int32 {
	if x != nil {
		return x.RetCode
	}
	return 0
}

var File_MedBaike_proto protoreflect.FileDescriptor

var file_MedBaike_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x22, 0x35, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74,
	0x79, 0x22, 0x5b, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x67,
	0x65, 0x12, 0x2b, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x29,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x22, 0xeb, 0x01, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x44, 0x6f, 0x63, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x5f, 0x44, 0x6f,
	0x63, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66,
	0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x6c, 0x70, 0x66,
	0x75, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x68, 0x65, 0x6c, 0x70, 0x66, 0x75,
	0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x65, 0x6c, 0x70, 0x66, 0x75, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x68, 0x65, 0x6c, 0x70, 0x66, 0x75, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x70,
	0x76, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x46,
	0x75, 0x6c, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x22, 0x31, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5c, 0x0a, 0x0b, 0x54, 0x69,
	0x64, 0x30, 0x5f, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6f,
	0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x0a, 0x54, 0x69, 0x64,
	0x30, 0x5f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x72, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6c, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x8a, 0x03, 0x0a, 0x0c,
	0x54, 0x69, 0x64, 0x30, 0x5f, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x72, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x68, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x70,
	0x69, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x70,
	0x69, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x68, 0x6f, 0x73,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f,
	0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x70, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x68, 0x70, 0x72, 0x61, 0x6e, 0x6b, 0x22, 0x85, 0x01, 0x0a, 0x0d, 0x54, 0x69, 0x64,
	0x30, 0x5f, 0x44, 0x69, 0x73, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x8a, 0x05, 0x0a, 0x04, 0x54, 0x69, 0x64, 0x30, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x73, 0x72, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x69, 0x73, 0x72, 0x63, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x70, 0x5f, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x70, 0x54, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x70,
	0x5f, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6f, 0x70, 0x54, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b,
	0x65, 0x2e, 0x54, 0x69, 0x64, 0x30, 0x5f, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x08, 0x6f,
	0x70, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x49, 0x63, 0x6f, 0x6e,
	0x12, 0x2f, 0x0a, 0x08, 0x6f, 0x70, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69,
	0x64, 0x30, 0x5f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x07, 0x6f, 0x70, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x64, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x64, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x5f, 0x71, 0x75,
	0x69, 0x63, 0x6b, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6f, 0x70, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x12, 0x30, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x65, 0x64, 0x42,
	0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x30, 0x5f, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x73, 0x52, 0x07, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69,
	0x6e, 0x79, 0x69, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x79,
	0x69, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x12,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e,
	0x54, 0x69, 0x64, 0x30, 0x5f, 0x44, 0x69, 0x73, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x08, 0x64,
	0x69, 0x73, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x4d, 0x0a,
	0x09, 0x54, 0x69, 0x64, 0x31, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x11,
	0x0a, 0x04, 0x6b, 0x65, 0x79, 0x5f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x80, 0x01, 0x0a,
	0x04, 0x54, 0x69, 0x64, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x5f, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x54, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x5f, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x54, 0x6e, 0x61,
	0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e,
	0x54, 0x69, 0x64, 0x31, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x3d, 0x0a, 0x09, 0x54, 0x69, 0x64, 0x32, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x96,
	0x01, 0x0a, 0x04, 0x54, 0x69, 0x64, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x5f,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x54,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x5f, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x54,
	0x6e, 0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x27,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d,
	0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x32, 0x5f, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x0a, 0x0c, 0x54, 0x69, 0x64, 0x34, 0x5f,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f,
	0x63, 0x69, 0x64, 0x22, 0xb8, 0x03, 0x0a, 0x0b, 0x54, 0x69, 0x64, 0x34, 0x5f, 0x44, 0x6f, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x64, 0x72, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x70, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x64,
	0x6f, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x43, 0x6c, 0x69, 0x63,
	0x6b, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x6c,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x70, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68,
	0x70, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xad,
	0x01, 0x0a, 0x0d, 0x54, 0x69, 0x64, 0x34, 0x5f, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x68, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x70,
	0x72, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x70, 0x72, 0x61,
	0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x7b,
	0x0a, 0x0b, 0x54, 0x69, 0x64, 0x34, 0x5f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x32, 0x0a,
	0x09, 0x6f, 0x70, 0x5f, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x34,
	0x5f, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x44, 0x6f, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x38, 0x0a, 0x0b, 0x6f, 0x70, 0x5f, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b,
	0x65, 0x2e, 0x54, 0x69, 0x64, 0x34, 0x5f, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x52,
	0x0a, 0x6f, 0x70, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x22, 0x7b, 0x0a, 0x0b, 0x54,
	0x69, 0x64, 0x34, 0x5f, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x32, 0x0a, 0x09, 0x6f, 0x70,
	0x5f, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x34, 0x5f, 0x44, 0x6f,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x38,
	0x0a, 0x0b, 0x6f, 0x70, 0x5f, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54,
	0x69, 0x64, 0x34, 0x5f, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x0a, 0x6f, 0x70,
	0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x22, 0x78, 0x0a, 0x0f, 0x54, 0x69, 0x64, 0x34,
	0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x25, 0x0a, 0x0f, 0x54, 0x69, 0x64, 0x5f, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe7, 0x01, 0x0a, 0x0b, 0x54, 0x69,
	0x64, 0x5f, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73,
	0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x73, 0x65,
	0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x65, 0x61, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x65, 0x61,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x72, 0x75, 0x67, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x72, 0x75, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x75, 0x72,
	0x70, 0x6f, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x22, 0x45, 0x0a, 0x09, 0x54, 0x69, 0x64, 0x5f, 0x54, 0x68, 0x61, 0x6e, 0x6b,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xf0, 0x0a, 0x0a, 0x04, 0x54,
	0x69, 0x64, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x5f, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x54, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x5f, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x54, 0x6e, 0x61, 0x6d, 0x65,
	0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x5f, 0x70, 0x69, 0x6e, 0x79, 0x69,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x50, 0x69, 0x6e, 0x79, 0x69,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x6f, 0x63, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x35, 0x0a, 0x0a, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54,
	0x69, 0x64, 0x34, 0x5f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52, 0x09, 0x6f, 0x70, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x09, 0x6f, 0x70, 0x5f, 0x64, 0x6f, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x65, 0x64, 0x42,
	0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x34, 0x5f, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x08, 0x6f, 0x70, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x6f, 0x70,
	0x5f, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x34, 0x5f,
	0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x0a, 0x6f, 0x70, 0x48, 0x6f, 0x73, 0x70,
	0x69, 0x74, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x09, 0x6f, 0x70, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69,
	0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x34, 0x5f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x08,
	0x6f, 0x70, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x5f, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70,
	0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x69, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x66, 0x6c, 0x61, 0x67, 0x12,
	0x35, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64,
	0x5f, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x64, 0x69,
	0x73, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x5f, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x54,
	0x68, 0x75, 0x6d, 0x62, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x73, 0x6f, 0x6c, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x70, 0x53, 0x6f, 0x6c, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x67, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x75, 0x72, 0x6c, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x75, 0x72, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x6c, 0x70, 0x66, 0x75, 0x6c, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x68, 0x65, 0x6c, 0x70, 0x66, 0x75, 0x6c, 0x12, 0x22,
	0x0a, 0x0c, 0x68, 0x65, 0x6c, 0x70, 0x66, 0x75, 0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x68, 0x65, 0x6c, 0x70, 0x66, 0x75, 0x6c, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x6f, 0x70,
	0x5f, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x34, 0x5f, 0x44,
	0x6f, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x6f, 0x70, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0x38, 0x0a, 0x0c, 0x73, 0x6f, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b,
	0x65, 0x2e, 0x54, 0x69, 0x64, 0x5f, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x52, 0x0b, 0x73,
	0x6f, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x72,
	0x6f, 0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x72, 0x6f, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x73, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x73, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x78, 0x64, 0x75,
	0x72, 0x6c, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x78, 0x64, 0x75, 0x72, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x72, 0x6f, 0x77,
	0x73, 0x65, 0x72, 0x5f, 0x74, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x72, 0x54, 0x73, 0x12, 0x25, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x28,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e,
	0x54, 0x61, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x2d,
	0x0a, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x34, 0x5f, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69,
	0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x34, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x52, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x22, 0x47, 0x0a,
	0x04, 0x54, 0x69, 0x64, 0x35, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x6d, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x89, 0x09, 0x0a, 0x04, 0x54, 0x69, 0x64, 0x36, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x62, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x62, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x6f,
	0x70, 0x5f, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x34, 0x5f, 0x44,
	0x6f, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x38, 0x0a, 0x0b, 0x6f, 0x70, 0x5f, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e,
	0x54, 0x69, 0x64, 0x34, 0x5f, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x0a, 0x6f,
	0x70, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x70,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x4b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b,
	0x65, 0x2e, 0x54, 0x69, 0x64, 0x5f, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x08, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x6f,
	0x70, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x34, 0x5f, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x73, 0x6f, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6f, 0x70, 0x53, 0x6f, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x5f, 0x63,
	0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6f, 0x70, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x65, 0x66, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x65, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f,
	0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x48, 0x65, 0x61, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x72,
	0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x44, 0x69,
	0x73, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x72, 0x75, 0x69,
	0x74, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x63, 0x72, 0x75, 0x69, 0x74, 0x41, 0x72, 0x65, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x34,
	0x0a, 0x0a, 0x6f, 0x70, 0x5f, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x19, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69,
	0x64, 0x34, 0x5f, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x6f, 0x70, 0x44, 0x6f, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x72, 0x75,
	0x69, 0x74, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x54, 0x72, 0x65, 0x61, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0c, 0x73, 0x6f, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x63,
	0x72, 0x75, 0x69, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x65, 0x64,
	0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x5f, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69,
	0x74, 0x52, 0x0b, 0x73, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x72, 0x75, 0x69, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64,
	0x6f, 0x63, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x74, 0x79, 0x70, 0x65, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x74,
	0x68, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x65,
	0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x5f, 0x54, 0x68, 0x61, 0x6e, 0x6b,
	0x52, 0x06, 0x74, 0x68, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d,
	0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x34, 0x5f, 0x49, 0x6e, 0x66,
	0x6f, 0x5f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x22, 0x55, 0x0a, 0x0e, 0x54, 0x69, 0x64, 0x37, 0x5f, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x6d, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x64, 0x54, 0x65, 0x78, 0x74, 0x22, 0x5c, 0x0a, 0x04, 0x54, 0x69, 0x64,
	0x37, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x74, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69,
	0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x37, 0x5f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xf0, 0x01, 0x0a, 0x04, 0x54, 0x69, 0x64, 0x39,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74,
	0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x5f, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x54, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x6f, 0x70, 0x5f, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x54, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x64, 0x6f, 0x63, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69,
	0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x34, 0x5f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x09, 0x6f, 0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x22, 0x9f, 0x09, 0x0a, 0x05, 0x54,
	0x69, 0x64, 0x31, 0x30, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x5f, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x54, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x5f, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x54, 0x6e, 0x61, 0x6d,
	0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x5f, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x66, 0x6c, 0x61, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x69, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x35,
	0x0a, 0x08, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x5f,
	0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x6f, 0x70, 0x5f, 0x64, 0x6f, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61,
	0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x34, 0x5f, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x08, 0x6f, 0x70, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x6f, 0x70, 0x5f,
	0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x34, 0x5f, 0x48,
	0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x0a, 0x6f, 0x70, 0x48, 0x6f, 0x73, 0x70, 0x69,
	0x74, 0x61, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x73, 0x6f, 0x6c, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x70, 0x53, 0x6f, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x61, 0x64, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x72, 0x65, 0x61, 0x64, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x65, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x75, 0x72, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x65,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x75, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x68, 0x65, 0x6c, 0x70, 0x66, 0x75, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x68, 0x65, 0x6c, 0x70, 0x66, 0x75, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x65, 0x6c, 0x70,
	0x66, 0x75, 0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x68, 0x65, 0x6c, 0x70, 0x66, 0x75, 0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x6f, 0x70, 0x5f, 0x64,
	0x6f, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d,
	0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x34, 0x5f, 0x44, 0x6f, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x09, 0x6f, 0x70, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x6d, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x72, 0x6f, 0x6e, 0x74,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x73, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x73, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x78, 0x64, 0x75, 0x72, 0x6c, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x78, 0x64, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x54, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x76, 0x65, 0x69,
	0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69, 0x76, 0x65, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x69, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x65,
	0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x34, 0x5f, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x52, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xae, 0x01, 0x0a,
	0x05, 0x54, 0x69, 0x64, 0x31, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x5f, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x54, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x5f, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x54, 0x6e,
	0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x22, 0xf5, 0x01,
	0x0a, 0x05, 0x54, 0x69, 0x64, 0x31, 0x33, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x5f,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x54,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x5f, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x54,
	0x6e, 0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x62, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x62, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x62, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x42,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x69, 0x6e, 0x67, 0x70, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x6a, 0x69, 0x6e, 0x67, 0x70, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x64, 0x6f, 0x63, 0x69, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x05, 0x54, 0x69, 0x64, 0x31, 0x34, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x5f, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x54, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x6f, 0x70, 0x5f, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x54, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x62, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x62, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x0a, 0x6f, 0x70, 0x5f, 0x6d, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x4d, 0x64, 0x54, 0x65, 0x78, 0x74, 0x22, 0x34, 0x0a, 0x0a,
	0x54, 0x69, 0x64, 0x31, 0x35, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x05, 0x54, 0x69, 0x64, 0x31, 0x35, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x70, 0x5f, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x70, 0x54, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x5f,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6f, 0x70, 0x54, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x65, 0x64, 0x42,
	0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x31, 0x35, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xb1, 0x01, 0x0a, 0x05, 0x54, 0x69, 0x64, 0x31, 0x36, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x5f, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x54, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x6f, 0x70, 0x5f, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x54, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x63, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f,
	0x63, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc1, 0x06, 0x0a, 0x05, 0x54, 0x69,
	0x64, 0x31, 0x37, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x5f, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x54, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x5f, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x63, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x54, 0x6e, 0x61, 0x6d, 0x65,
	0x49, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x62,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x62, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x6d, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x73, 0x72, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x5f, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61,
	0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x5f, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x08, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x32, 0x0a,
	0x09, 0x6f, 0x70, 0x5f, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x34,
	0x5f, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x44, 0x6f, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x38, 0x0a, 0x0b, 0x6f, 0x70, 0x5f, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b,
	0x65, 0x2e, 0x54, 0x69, 0x64, 0x34, 0x5f, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x52,
	0x0a, 0x6f, 0x70, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x73, 0x6f, 0x6c, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x70, 0x53, 0x6f, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x6f, 0x70, 0x5f, 0x64,
	0x6f, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d,
	0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x34, 0x5f, 0x44, 0x6f, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x09, 0x6f, 0x70, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64,
	0x6f, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x69, 0x64, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x69, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x74, 0x68, 0x65, 0x66, 0x74, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6e, 0x74, 0x69, 0x54, 0x68, 0x65, 0x66,
	0x74, 0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x72, 0x63, 0x55, 0x72, 0x6c, 0x22, 0x34, 0x0a,
	0x0a, 0x54, 0x69, 0x64, 0x31, 0x38, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x9b, 0x02, 0x0a, 0x05, 0x54, 0x69, 0x64, 0x31, 0x38, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x5f, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70,
	0x5f, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f,
	0x70, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x49, 0x63, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65,
	0x2e, 0x54, 0x69, 0x64, 0x31, 0x38, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x4c, 0x0a, 0x0a, 0x54, 0x69, 0x64, 0x31, 0x39, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x79, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x79, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22,
	0x43, 0x0a, 0x05, 0x54, 0x69, 0x64, 0x31, 0x39, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61,
	0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x31, 0x39, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0xd0, 0x01, 0x0a, 0x05, 0x54, 0x69, 0x64, 0x32, 0x30, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x6f, 0x70, 0x5f, 0x64, 0x6f, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x65, 0x64, 0x42,
	0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x34, 0x5f, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x08, 0x6f, 0x70, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x6f, 0x70,
	0x5f, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x34, 0x5f,
	0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x0a, 0x6f, 0x70, 0x48, 0x6f, 0x73, 0x70,
	0x69, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x70, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x56, 0x0a, 0x0a, 0x54, 0x69, 0x64, 0x32, 0x31,
	0x5f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x64, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x64, 0x54, 0x65, 0x78, 0x74, 0x22,
	0xdf, 0x01, 0x0a, 0x05, 0x54, 0x69, 0x64, 0x32, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x32, 0x0a, 0x09, 0x6f, 0x70, 0x5f, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e,
	0x54, 0x69, 0x64, 0x34, 0x5f, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x44,
	0x6f, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x6f, 0x70, 0x5f, 0x68, 0x6f, 0x73, 0x70,
	0x69, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x65, 0x64,
	0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x34, 0x5f, 0x48, 0x6f, 0x73, 0x70, 0x69,
	0x74, 0x61, 0x6c, 0x52, 0x0a, 0x6f, 0x70, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65,
	0x2e, 0x54, 0x69, 0x64, 0x32, 0x31, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0xd0, 0x01, 0x0a, 0x05, 0x54, 0x69, 0x64, 0x32, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x73, 0x72, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x69, 0x73, 0x72,
	0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61,
	0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x30, 0x5f, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52,
	0x08, 0x6f, 0x70, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x64, 0x5f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x64, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x12, 0x54, 0x69, 0x64, 0x32, 0x33, 0x5f, 0x4d,
	0x6f, 0x64, 0x65, 0x6f, 0x6e, 0x65, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x35, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x68, 0x35, 0x75, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x78, 0x61, 0x75, 0x72, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x78, 0x61, 0x75, 0x72, 0x6c, 0x22, 0x57, 0x0a,
	0x0d, 0x54, 0x69, 0x64, 0x32, 0x33, 0x5f, 0x4d, 0x6f, 0x64, 0x65, 0x6f, 0x6e, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69,
	0x64, 0x32, 0x33, 0x5f, 0x4d, 0x6f, 0x64, 0x65, 0x6f, 0x6e, 0x65, 0x5f, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x40, 0x0a, 0x12, 0x54, 0x69, 0x64, 0x32, 0x33, 0x5f,
	0x4d, 0x6f, 0x64, 0x65, 0x74, 0x77, 0x6f, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x22, 0x57, 0x0a, 0x0d, 0x54, 0x69, 0x64, 0x32,
	0x33, 0x5f, 0x4d, 0x6f, 0x64, 0x65, 0x74, 0x77, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x30, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x32, 0x33, 0x5f, 0x4d,
	0x6f, 0x64, 0x65, 0x74, 0x77, 0x6f, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x3b, 0x0a, 0x0d, 0x54, 0x69, 0x64, 0x32, 0x33, 0x5f, 0x4d, 0x6f, 0x64, 0x65, 0x74,
	0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x22, 0xb5,
	0x01, 0x0a, 0x05, 0x54, 0x69, 0x64, 0x32, 0x33, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x6d, 0x6f,
	0x64, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d,
	0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x32, 0x33, 0x5f, 0x4d, 0x6f,
	0x64, 0x65, 0x6f, 0x6e, 0x65, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x4f, 0x6e, 0x65, 0x12, 0x32,
	0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x77, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x32,
	0x33, 0x5f, 0x4d, 0x6f, 0x64, 0x65, 0x74, 0x77, 0x6f, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x54,
	0x77, 0x6f, 0x12, 0x32, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e,
	0x54, 0x69, 0x64, 0x32, 0x33, 0x5f, 0x4d, 0x6f, 0x64, 0x65, 0x74, 0x6f, 0x70, 0x52, 0x07, 0x6d,
	0x6f, 0x64, 0x65, 0x54, 0x6f, 0x70, 0x22, 0x65, 0x0a, 0x0a, 0x54, 0x69, 0x64, 0x32, 0x34, 0x5f,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x64, 0x54, 0x65, 0x78, 0x74, 0x22, 0xfa, 0x04,
	0x0a, 0x05, 0x54, 0x69, 0x64, 0x32, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x62, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x62,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x6f, 0x70, 0x5f, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b,
	0x65, 0x2e, 0x54, 0x69, 0x64, 0x34, 0x5f, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f,
	0x70, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x6f, 0x70, 0x5f, 0x68, 0x6f,
	0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d,
	0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x34, 0x5f, 0x48, 0x6f, 0x73,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x52, 0x0a, 0x6f, 0x70, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61,
	0x6c, 0x12, 0x32, 0x0a, 0x09, 0x6f, 0x70, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e,
	0x54, 0x69, 0x64, 0x34, 0x5f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x28, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x65,
	0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x32, 0x34, 0x5f, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x69, 0x73,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x65,
	0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x5f, 0x44, 0x69, 0x73, 0x65, 0x61,
	0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x63, 0x73,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x44,
	0x6f, 0x63, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x6f, 0x70, 0x5f, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69,
	0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x34, 0x5f, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09,
	0x6f, 0x70, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63,
	0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x65,
	0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x34, 0x5f, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x91, 0x08, 0x0a, 0x05, 0x54,
	0x69, 0x64, 0x32, 0x35, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x6d, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x6f, 0x70, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d,
	0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x34, 0x5f, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x4b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b,
	0x65, 0x2e, 0x54, 0x69, 0x64, 0x5f, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x08, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x61, 0x64, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x72, 0x65, 0x61, 0x64, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67,
	0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x67, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x68, 0x65, 0x6c, 0x70, 0x66, 0x75, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x68, 0x65, 0x6c, 0x70, 0x66, 0x75, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x65, 0x6c, 0x70, 0x66,
	0x75, 0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x68,
	0x65, 0x6c, 0x70, 0x66, 0x75, 0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x69, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x69, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x69, 0x64, 0x12, 0x32, 0x0a,
	0x09, 0x6f, 0x70, 0x5f, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x34,
	0x5f, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x44, 0x6f, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x38, 0x0a, 0x0b, 0x6f, 0x70, 0x5f, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b,
	0x65, 0x2e, 0x54, 0x69, 0x64, 0x34, 0x5f, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x52,
	0x0a, 0x6f, 0x70, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x0a, 0x6f,
	0x70, 0x5f, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x34, 0x5f,
	0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x6f, 0x70, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x74, 0x61, 0x67, 0x73, 0x18, 0x19, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x74, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x78, 0x64, 0x75, 0x72, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x77, 0x78, 0x64, 0x75, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x54, 0x73, 0x12, 0x25, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18,
	0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65,
	0x2e, 0x54, 0x61, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12,
	0x2d, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x34, 0x5f,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x22, 0xba,
	0x01, 0x0a, 0x0a, 0x54, 0x69, 0x64, 0x32, 0x36, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a,
	0x07, 0x6d, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x6f, 0x70, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x65, 0x64, 0x42,
	0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x34, 0x5f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x52, 0x08, 0x6f, 0x70, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x0d, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x64, 0x6f, 0x63, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x34, 0x52, 0x0c, 0x6f,
	0x70, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x64, 0x6f, 0x63, 0x22, 0xc4, 0x05, 0x0a, 0x05,
	0x54, 0x69, 0x64, 0x32, 0x36, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x62, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x62, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x09, 0x6f, 0x70, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e,
	0x54, 0x69, 0x64, 0x34, 0x5f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6f, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x6f, 0x70, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x35, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x5f, 0x44, 0x69,
	0x73, 0x65, 0x61, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x64, 0x69, 0x73, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64,
	0x32, 0x36, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x63, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x44, 0x6f,
	0x63, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x6f, 0x70, 0x5f, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65,
	0x2e, 0x54, 0x69, 0x64, 0x34, 0x5f, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70,
	0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x6f, 0x70, 0x5f, 0x68, 0x6f, 0x73,
	0x70, 0x69, 0x74, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x65,
	0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x34, 0x5f, 0x48, 0x6f, 0x73, 0x70,
	0x69, 0x74, 0x61, 0x6c, 0x52, 0x0a, 0x6f, 0x70, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x72,
	0x65, 0x66, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a,
	0x0a, 0x6f, 0x70, 0x5f, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64,
	0x34, 0x5f, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x6f, 0x70, 0x44, 0x6f, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x69, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x64, 0x6f, 0x63, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x74, 0x68, 0x61, 0x6e, 0x6b, 0x73, 0x18,
	0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65,
	0x2e, 0x54, 0x69, 0x64, 0x5f, 0x54, 0x68, 0x61, 0x6e, 0x6b, 0x52, 0x06, 0x74, 0x68, 0x61, 0x6e,
	0x6b, 0x73, 0x22, 0xc2, 0x02, 0x0a, 0x05, 0x54, 0x69, 0x64, 0x32, 0x37, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x70, 0x6f, 0x73, 0x74, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x62, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x62, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x34,
	0x0a, 0x0a, 0x6f, 0x70, 0x5f, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69,
	0x64, 0x34, 0x5f, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x6f, 0x70, 0x44, 0x6f, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x5f, 0x74, 0x68, 0x75, 0x6d, 0x62,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x54, 0x68, 0x75, 0x6d, 0x62,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x64, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x0b, 0x54, 0x69, 0x64, 0x5f,
	0x44, 0x6f, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x69, 0x64,
	0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69,
	0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x34, 0x52, 0x04, 0x74, 0x69, 0x64, 0x34, 0x12, 0x25, 0x0a,
	0x05, 0x74, 0x69, 0x64, 0x31, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d,
	0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x31, 0x30, 0x52, 0x05, 0x74,
	0x69, 0x64, 0x31, 0x30, 0x12, 0x25, 0x0a, 0x05, 0x74, 0x69, 0x64, 0x32, 0x35, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54,
	0x69, 0x64, 0x32, 0x35, 0x52, 0x05, 0x74, 0x69, 0x64, 0x32, 0x35, 0x12, 0x25, 0x0a, 0x05, 0x74,
	0x69, 0x64, 0x32, 0x37, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x65, 0x64,
	0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x32, 0x37, 0x52, 0x05, 0x74, 0x69, 0x64,
	0x32, 0x37, 0x22, 0xb8, 0x01, 0x0a, 0x0b, 0x54, 0x69, 0x64, 0x5f, 0x44, 0x6f, 0x63, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x74, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x69, 0x64, 0x36, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69,
	0x64, 0x36, 0x52, 0x04, 0x74, 0x69, 0x64, 0x36, 0x12, 0x25, 0x0a, 0x05, 0x74, 0x69, 0x64, 0x31,
	0x37, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69,
	0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x31, 0x37, 0x52, 0x05, 0x74, 0x69, 0x64, 0x31, 0x37, 0x12,
	0x25, 0x0a, 0x05, 0x74, 0x69, 0x64, 0x32, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x69, 0x64, 0x32, 0x34, 0x52,
	0x05, 0x74, 0x69, 0x64, 0x32, 0x34, 0x12, 0x25, 0x0a, 0x05, 0x74, 0x69, 0x64, 0x32, 0x36, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65,
	0x2e, 0x54, 0x69, 0x64, 0x32, 0x36, 0x52, 0x05, 0x74, 0x69, 0x64, 0x32, 0x36, 0x22, 0xe3, 0x01,
	0x0a, 0x09, 0x44, 0x6f, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x6f, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x62, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x62, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x35, 0x75, 0x72, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x68, 0x35, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x77,
	0x78, 0x61, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x78, 0x61,
	0x75, 0x72, 0x6c, 0x22, 0x6c, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x61, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61,
	0x62, 0x22, 0xeb, 0x03, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6d, 0x70, 0x74,
	0x6f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x6d, 0x70, 0x74,
	0x6f, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x73, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x73, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x64, 0x69, 0x73, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x74,
	0x61, 0x62, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x65, 0x64, 0x42,
	0x61, 0x69, 0x6b, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x04, 0x74, 0x61, 0x62, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x66, 0x6c, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x64, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x35, 0x75, 0x72, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x68, 0x35, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x78, 0x61, 0x75, 0x72,
	0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x78, 0x61, 0x75, 0x72, 0x6c, 0x22,
	0x3b, 0x0a, 0x0d, 0x45, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x22, 0x57, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x44, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x68, 0x35, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x68, 0x35, 0x75, 0x72, 0x6c, 0x22, 0xee, 0x01, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73,
	0x65, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69,
	0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x35, 0x75, 0x72,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x68, 0x35, 0x75, 0x72, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x77, 0x78, 0x61, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x77, 0x78, 0x61, 0x75, 0x72, 0x6c, 0x22, 0xee, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x44, 0x69,
	0x73, 0x65, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x63, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x49, 0x63, 0x6f, 0x6e, 0x46, 0x6f,
	0x63, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x70, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75,
	0x6e, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x70,
	0x49, 0x63, 0x6f, 0x6e, 0x55, 0x6e, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x12, 0x4e, 0x0a, 0x08, 0x64,
	0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x65,
	0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x52, 0x08, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x22, 0xe6, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x44,
	0x72, 0x75, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x75, 0x67, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x35, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x68, 0x35, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x78, 0x61, 0x75,
	0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x78, 0x61, 0x75, 0x72, 0x6c,
	0x22, 0x77, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x44, 0x72, 0x75, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x64, 0x72, 0x75, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x72, 0x75, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x72, 0x75,
	0x67, 0x73, 0x52, 0x05, 0x64, 0x72, 0x75, 0x67, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x0b, 0x54, 0x61,
	0x67, 0x54, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d,
	0x67, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x35, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x68, 0x35, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x78,
	0x61, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x78, 0x61, 0x75,
	0x72, 0x6c, 0x22, 0x78, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65,
	0x41, 0x6c, 0x6c, 0x44, 0x6f, 0x63, 0x73, 0x54, 0x61, 0x67, 0x73, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x31, 0x0a, 0x08, 0x74, 0x72, 0x65,
	0x65, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x65,
	0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x54, 0x72, 0x65, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x74, 0x72, 0x65, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x87, 0x02, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x6c, 0x44, 0x6f,
	0x63, 0x73, 0x54, 0x61, 0x67, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x6f, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x68, 0x6f, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x65,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x65, 0x64,
	0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x54, 0x72, 0x65, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x74, 0x72, 0x65, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x4d, 0x65, 0x64, 0x42,
	0x61, 0x69, 0x6b, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x41,
	0x6c, 0x6c, 0x44, 0x6f, 0x63, 0x73, 0x54, 0x61, 0x67, 0x73, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x44, 0x69,
	0x73, 0x65, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x6c, 0x44, 0x6f, 0x63, 0x73, 0x42, 0x61, 0x73, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x54, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x6c, 0x44, 0x6f, 0x63, 0x73, 0x54, 0x61, 0x67,
	0x73, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x70,
	0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x70, 0x76, 0x22, 0x7b, 0x0a, 0x0b, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d,
	0x67, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x65, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x48,
	0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x4d, 0x65, 0x64, 0x42,
	0x61, 0x69, 0x6b, 0x65, 0x2e, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22,
	0xb4, 0x02, 0x0a, 0x0c, 0x44, 0x72, 0x75, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69,
	0x6e, 0x73, 0x75, 0x72, 0x65, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x08, 0x44, 0x72, 0x75, 0x67, 0x43,
	0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4d, 0x65, 0x64, 0x42,
	0x61, 0x69, 0x6b, 0x65, 0x2e, 0x44, 0x72, 0x75, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x69, 0x0a, 0x15, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x6f, 0x72, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x77, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x77, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x43, 0x0a, 0x09, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x22, 0xbb, 0x06, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x65,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x63,
	0x68, 0x65, 0x6d, 0x6f, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x6d, 0x6f, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x69,
	0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x68, 0x65, 0x6d, 0x6f, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f,
	0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x6d, 0x6f,
	0x43, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x75, 0x72, 0x67, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x73, 0x75, 0x72, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x73,
	0x75, 0x72, 0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x73, 0x75, 0x72, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x78, 0x12,
	0x24, 0x0a, 0x0e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x69,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x43, 0x6f,
	0x73, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x63,
	0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72,
	0x61, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74,
	0x4d, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x24, 0x0a, 0x0e, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x69,
	0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f,
	0x6d, 0x61, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x43, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x24, 0x0a,
	0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74,
	0x4d, 0x61, 0x78, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x6f, 0x63, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x6e, 0x64,
	0x6f, 0x63, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x6e, 0x64,
	0x6f, 0x63, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x6f, 0x63, 0x43, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x78, 0x12,
	0x24, 0x0a, 0x0e, 0x63, 0x68, 0x65, 0x6d, 0x6f, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x6d, 0x6f, 0x41, 0x76,
	0x67, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x75, 0x72, 0x67, 0x5f, 0x61, 0x76,
	0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x75,
	0x72, 0x67, 0x41, 0x76, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x61, 0x64,
	0x69, 0x6f, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x41, 0x76, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x78, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x63, 0x6f,
	0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x78,
	0x41, 0x76, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x76, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x6f, 0x63, 0x5f, 0x61, 0x76, 0x67, 0x5f, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x6f, 0x63, 0x41, 0x76,
	0x67, 0x43, 0x6f, 0x73, 0x74, 0x22, 0x59, 0x0a, 0x0f, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x72, 0x65,
	0x22, 0x85, 0x02, 0x0a, 0x20, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x65, 0x65, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x61, 0x62, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61,
	0x62, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x72, 0x75, 0x6c,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x72, 0x75, 0x6c,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x46,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x52, 0x08,
	0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x79, 0x0a, 0x17, 0x41, 0x75, 0x74, 0x68,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x73, 0x56, 0x32, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x75, 0x74, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x61, 0x75, 0x74, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x6f, 0x63, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x63,
	0x69, 0x64, 0x73, 0x22, 0x5a, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x44, 0x6f, 0x63, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x56, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x75, 0x74,
	0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x69, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x73, 0x22,
	0x4a, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x44, 0x6f, 0x63, 0x73, 0x56, 0x32, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x65,
	0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x44, 0x6f, 0x63, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x56, 0x32, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x88, 0x02, 0x0a, 0x0a,
	0x45, 0x78, 0x61, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x40, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x65,
	0x61, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x44, 0x69, 0x73, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x22, 0xb4, 0x02, 0x0a, 0x0a, 0x45, 0x78, 0x61, 0x6d, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x61, 0x6d, 0x69, 0x6e,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a,
	0x0c, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x45,
	0x78, 0x61, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0b, 0x65, 0x78, 0x61, 0x6d, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x69, 0x63, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x69, 0x63, 0x55, 0x72, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x64, 0x6f, 0x63, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6d, 0x0a,
	0x0b, 0x44, 0x72, 0x63, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x6f, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x25, 0x0a, 0x09,
	0x44, 0x72, 0x63, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x63, 0x6d,
	0x64, 0x6f, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x63, 0x6d, 0x64,
	0x6f, 0x63, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x07, 0x44, 0x72, 0x63, 0x6d, 0x52, 0x65, 0x71, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64,
	0x6f, 0x63, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x64, 0x6f, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x64, 0x6f, 0x63, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x4d,
	0x0a, 0x06, 0x52, 0x63, 0x6d, 0x44, 0x6f, 0x63, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x64, 0x0a,
	0x08, 0x44, 0x72, 0x63, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x24, 0x0a,
	0x04, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x4d, 0x65,
	0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x52, 0x63, 0x6d, 0x44, 0x6f, 0x63, 0x52, 0x04, 0x64,
	0x6f, 0x63, 0x73, 0x22, 0xdb, 0x01, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6b, 0x4e,
	0x65, 0x77, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x65, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x22, 0xb1, 0x03, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6b, 0x4e, 0x65, 0x77,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x63, 0x6d, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x61, 0x69, 0x6e, 0x43, 0x6d, 0x73, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x63, 0x6d, 0x73, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6d, 0x73, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6d,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x63, 0x6d, 0x73, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6d, 0x73, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6d, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6d, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6d, 0x73, 0x5f, 0x70, 0x75, 0x62,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x61, 0x69, 0x6e,
	0x43, 0x6d, 0x73, 0x50, 0x75, 0x62, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69,
	0x74, 0x69, 0x61, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x69, 0x74, 0x69,
	0x61, 0x6f, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x69, 0x74, 0x69, 0x61, 0x6f, 0x5f, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x63, 0x69, 0x74, 0x69, 0x61, 0x6f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x6f,
	0x63, 0x69, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x75, 0x6d, 0x12,
	0x24, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6d, 0x73, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x43,
	0x6d, 0x73, 0x49, 0x64, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a,
	0x6b, 0x48, 0x6f, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a,
	0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6d, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6d, 0x73, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6d, 0x73, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6d, 0x73, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6d, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e,
	0x43, 0x6d, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x63, 0x6d, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6d, 0x73, 0x50, 0x75, 0x62, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6d, 0x73, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6d, 0x73,
	0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6d, 0x73, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x69,
	0x6e, 0x43, 0x6d, 0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x2b, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x55, 0x69, 0x6e, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x22, 0x26, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x69, 0x6e,
	0x42, 0x79, 0x4f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x22, 0x27,
	0x0a, 0x0f, 0x43, 0x43, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x24, 0x0a, 0x10, 0x43, 0x43, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x22, 0x6d, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x63, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x69, 0x63, 0x22, 0x45, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x4d, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xba, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x6f, 0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x79,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xbb, 0x03, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65,
	0x61, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x65, 0x61, 0x64, 0x44, 0x65, 0x73, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x65, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x65, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x65, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6c, 0x65, 0x67, 0x44, 0x65, 0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x49,
	0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xee, 0x02, 0x0a, 0x19, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x69, 0x7a, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x69, 0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x69, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x75, 0x69, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x6f, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x6f, 0x63, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x6f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x6f,
	0x73, 0x61, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x3b, 0x0a,
	0x0d, 0x44, 0x61, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5a, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69, 0x7a,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x7a,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x6f,
	0x63, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69, 0x7a, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x7a, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6f, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x64, 0x6f, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x5a, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x64,
	0x6f, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6f, 0x63, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x87,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x31, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x44, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69,
	0x7a, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69,
	0x7a, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x87, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44,
	0x6f, 0x63, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67,
	0x12, 0x69, 0x0a, 0x13, 0x64, 0x6f, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x73,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x2e, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x64, 0x6f, 0x63, 0x73, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x44, 0x0a, 0x16, 0x44,
	0x6f, 0x63, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xaf, 0x01, 0x0a, 0x0d, 0x50, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65,
	0x6e, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x0e, 0x50, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x43, 0x0a, 0x13, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x45, 0x53, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x22, 0x3b, 0x0a, 0x0f, 0x53, 0x44, 0x6f, 0x63, 0x45, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x56, 0x0a,
	0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x53, 0x44,
	0x6f, 0x63, 0x45, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x41, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65,
	0x74, 0x45, 0x53, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4d, 0x65,
	0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x10, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6c, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02,
	0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x23, 0x0a, 0x0d,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x63, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x2a, 0x68, 0x0a, 0x0b, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x49, 0x53, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x00, 0x12, 0x1e,
	0x0a, 0x1a, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f,
	0x4d, 0x45, 0x5f, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f,
	0x4d, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x45, 0x41, 0x53, 0x45, 0x10, 0x02, 0x2a, 0xce, 0x03, 0x0a,
	0x0c, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x18, 0x0a,
	0x14, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x54, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e,
	0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x53, 0x5f, 0x54, 0x41, 0x47, 0x53, 0x10, 0x02, 0x12,
	0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x4f, 0x43, 0x53, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x53, 0x10, 0x04, 0x12,
	0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x54, 0x4f, 0x4f, 0x4c, 0x53, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x54, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x53, 0x10, 0x06,
	0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x53, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18,
	0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x56, 0x32, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f,
	0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x41, 0x53, 0x10, 0x09,
	0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x51, 0x41, 0x53, 0x5f, 0x54, 0x41, 0x47, 0x53, 0x10, 0x0a, 0x12, 0x1f, 0x0a, 0x1b, 0x43,
	0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x41, 0x47, 0x53, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x43,
	0x54, 0x4f, 0x52, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x45, 0x41, 0x53, 0x45, 0x10, 0x0d, 0x12,
	0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x41, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x54,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e,
	0x43, 0x59, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x10, 0x2a, 0xbd, 0x01,
	0x0a, 0x18, 0x44, 0x49, 0x53, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x46,
	0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x49,
	0x53, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x10, 0x00, 0x12, 0x27, 0x0a,
	0x23, 0x44, 0x49, 0x53, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x46, 0x49,
	0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x52, 0x45,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x49, 0x53, 0x45, 0x41, 0x53,
	0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x52, 0x45, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10,
	0x02, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x49, 0x53, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x53,
	0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f,
	0x53, 0x50, 0x49, 0x54, 0x41, 0x4c, 0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0x03, 0x2a, 0xe6, 0x01,
	0x0a, 0x15, 0x44, 0x52, 0x55, 0x47, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x52, 0x55, 0x47, 0x5f,
	0x43, 0x4f, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x52,
	0x55, 0x47, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x45, 0x41, 0x53, 0x45, 0x10, 0x01, 0x12, 0x1e, 0x0a,
	0x1a, 0x44, 0x52, 0x55, 0x47, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12, 0x20, 0x0a,
	0x1c, 0x44, 0x52, 0x55, 0x47, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x03, 0x12,
	0x1f, 0x0a, 0x1b, 0x44, 0x52, 0x55, 0x47, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x46, 0x49, 0x4c,
	0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x04,
	0x12, 0x24, 0x0a, 0x20, 0x44, 0x52, 0x55, 0x47, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x46, 0x49,
	0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50,
	0x52, 0x49, 0x53, 0x45, 0x10, 0x05, 0x32, 0x8d, 0x01, 0x0a, 0x0a, 0x44, 0x6f, 0x63, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x44,
	0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69,
	0x6b, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x32, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x11, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x1a, 0x11, 0x2e, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x14, 0x5a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x2f, 0x4d, 0x65, 0x64, 0x42, 0x61, 0x69, 0x6b, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_MedBaike_proto_rawDescOnce sync.Once
	file_MedBaike_proto_rawDescData = file_MedBaike_proto_rawDesc
)

func file_MedBaike_proto_rawDescGZIP() []byte {
	file_MedBaike_proto_rawDescOnce.Do(func() {
		file_MedBaike_proto_rawDescData = protoimpl.X.CompressGZIP(file_MedBaike_proto_rawDescData)
	})
	return file_MedBaike_proto_rawDescData
}

var file_MedBaike_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_MedBaike_proto_msgTypes = make([]protoimpl.MessageInfo, 119)
var file_MedBaike_proto_goTypes = []interface{}{
	(IGNORE_TYPE)(0),              // 0: MedBaike.IGNORE_TYPE
	(CONTENT_TYPE)(0),             // 1: MedBaike.CONTENT_TYPE
	(DISEASE_COST_FILTER_TYPE)(0), // 2: MedBaike.DISEASE_COST_FILTER_TYPE
	(DRUG_COST_FILTER_TYPE)(0),    // 3: MedBaike.DRUG_COST_FILTER_TYPE
	(*Address)(nil),               // 4: MedBaike.Address
	(*Person)(nil),                // 5: MedBaike.Person
	(*GetDocDataInfoReq)(nil),     // 6: MedBaike.GetDocDataInfoReq
	(*GetDocDataInfoResp)(nil),    // 7: MedBaike.GetDocDataInfoResp
	(*TagObject)(nil),             // 8: MedBaike.TagObject
	(*Tid0_Review)(nil),           // 9: MedBaike.Tid0_Review
	(*Tid0_Video)(nil),            // 10: MedBaike.Tid0_Video
	(*Tid0_Reviews)(nil),          // 11: MedBaike.Tid0_Reviews
	(*Tid0_DisVideo)(nil),         // 12: MedBaike.Tid0_DisVideo
	(*Tid0)(nil),                  // 13: MedBaike.Tid0
	(*Tid1_Data)(nil),             // 14: MedBaike.Tid1_Data
	(*Tid1)(nil),                  // 15: MedBaike.Tid1
	(*Tid2_Data)(nil),             // 16: MedBaike.Tid2_Data
	(*Tid2)(nil),                  // 17: MedBaike.Tid2
	(*Tid4_Related)(nil),          // 18: MedBaike.Tid4_Related
	(*Tid4_Doctor)(nil),           // 19: MedBaike.Tid4_Doctor
	(*Tid4_Hospital)(nil),         // 20: MedBaike.Tid4_Hospital
	(*Tid4_Author)(nil),           // 21: MedBaike.Tid4_Author
	(*Tid4_Review)(nil),           // 22: MedBaike.Tid4_Review
	(*Tid4_Info_Extra)(nil),       // 23: MedBaike.Tid4_Info_Extra
	(*Tid_DiseaseItem)(nil),       // 24: MedBaike.Tid_DiseaseItem
	(*Tid_Recruit)(nil),           // 25: MedBaike.Tid_Recruit
	(*Tid_Thank)(nil),             // 26: MedBaike.Tid_Thank
	(*Tid4)(nil),                  // 27: MedBaike.Tid4
	(*Tid5)(nil),                  // 28: MedBaike.Tid5
	(*Tid6)(nil),                  // 29: MedBaike.Tid6
	(*Tid7_ImageInfo)(nil),        // 30: MedBaike.Tid7_ImageInfo
	(*Tid7)(nil),                  // 31: MedBaike.Tid7
	(*Tid9)(nil),                  // 32: MedBaike.Tid9
	(*Tid10)(nil),                 // 33: MedBaike.Tid10
	(*Tid11)(nil),                 // 34: MedBaike.Tid11
	(*Tid13)(nil),                 // 35: MedBaike.Tid13
	(*Tid14)(nil),                 // 36: MedBaike.Tid14
	(*Tid15_List)(nil),            // 37: MedBaike.Tid15_List
	(*Tid15)(nil),                 // 38: MedBaike.Tid15
	(*Tid16)(nil),                 // 39: MedBaike.Tid16
	(*Tid17)(nil),                 // 40: MedBaike.Tid17
	(*Tid18_List)(nil),            // 41: MedBaike.Tid18_List
	(*Tid18)(nil),                 // 42: MedBaike.Tid18
	(*Tid19_List)(nil),            // 43: MedBaike.Tid19_List
	(*Tid19)(nil),                 // 44: MedBaike.Tid19
	(*Tid20)(nil),                 // 45: MedBaike.Tid20
	(*Tid21_List)(nil),            // 46: MedBaike.Tid21_List
	(*Tid21)(nil),                 // 47: MedBaike.Tid21
	(*Tid22)(nil),                 // 48: MedBaike.Tid22
	(*Tid23_Modeone_List)(nil),    // 49: MedBaike.Tid23_Modeone_List
	(*Tid23_Modeone)(nil),         // 50: MedBaike.Tid23_Modeone
	(*Tid23_Modetwo_List)(nil),    // 51: MedBaike.Tid23_Modetwo_List
	(*Tid23_Modetwo)(nil),         // 52: MedBaike.Tid23_Modetwo
	(*Tid23_Modetop)(nil),         // 53: MedBaike.Tid23_Modetop
	(*Tid23)(nil),                 // 54: MedBaike.Tid23
	(*Tid24_Data)(nil),            // 55: MedBaike.Tid24_Data
	(*Tid24)(nil),                 // 56: MedBaike.Tid24
	(*Tid25)(nil),                 // 57: MedBaike.Tid25
	(*Tid26_Info)(nil),            // 58: MedBaike.Tid26_Info
	(*Tid26)(nil),                 // 59: MedBaike.Tid26
	(*Tid27)(nil),                 // 60: MedBaike.Tid27
	(*Tid_DocInfo)(nil),           // 61: MedBaike.Tid_DocInfo
	(*Tid_DocData)(nil),           // 62: MedBaike.Tid_DocData
	(*DocInfoV2)(nil),             // 63: MedBaike.DocInfoV2
	(*QuestionItem)(nil),          // 64: MedBaike.QuestionItem
	(*DiseaseItem)(nil),           // 65: MedBaike.DiseaseItem
	(*EmergencyItem)(nil),         // 66: MedBaike.EmergencyItem
	(*GetOverviewFilterDesc)(nil), // 67: MedBaike.GetOverviewFilterDesc
	(*GetDiseaseListByCategoryRespListDiseases)(nil), // 68: MedBaike.GetDiseaseListByCategoryRespListDiseases
	(*GetDiseaseListByCategoryRespList)(nil),         // 69: MedBaike.GetDiseaseListByCategoryRespList
	(*GetDrugListByCategoryRespListDrugs)(nil),       // 70: MedBaike.GetDrugListByCategoryRespListDrugs
	(*GetDrugListByCategoryRespList)(nil),            // 71: MedBaike.GetDrugListByCategoryRespList
	(*TagTreeInfo)(nil),                              // 72: MedBaike.TagTreeInfo
	(*GetDiseaseAllDocsTagsChildren)(nil),            // 73: MedBaike.GetDiseaseAllDocsTagsChildren
	(*GetDiseaseAllDocsTagsItem)(nil),                // 74: MedBaike.GetDiseaseAllDocsTagsItem
	(*GetDiseaseAllDocsBaseInfoRespTags)(nil),        // 75: MedBaike.GetDiseaseAllDocsBaseInfoRespTags
	(*NodeTagInfo)(nil),                              // 76: MedBaike.NodeTagInfo
	(*GetHomeContentDataRespTopicSort)(nil),          // 77: MedBaike.GetHomeContentDataRespTopicSort
	(*DrugCostItem)(nil),                             // 78: MedBaike.DrugCostItem
	(*DrugCost)(nil),                                 // 79: MedBaike.DrugCost
	(*ActiveItemQualitySort)(nil),                    // 80: MedBaike.ActiveItemQualitySort
	(*PopupData)(nil),                                // 81: MedBaike.PopupData
	(*DiseaseCostEntity)(nil),                        // 82: MedBaike.DiseaseCostEntity
	(*FeedbackSuggest)(nil),                          // 83: MedBaike.FeedbackSuggest
	(*UploadSearchResultFeedBackEntity)(nil),         // 84: MedBaike.UploadSearchResultFeedBackEntity
	(*AuthPartnerDocsV2Entity)(nil),                  // 85: MedBaike.AuthPartnerDocsV2Entity
	(*AuthDocsInfoV2)(nil),                           // 86: MedBaike.AuthDocsInfoV2
	(*GetAuthPartnerDocsV2Entity)(nil),               // 87: MedBaike.GetAuthPartnerDocsV2Entity
	(*ExamDetail)(nil),                               // 88: MedBaike.ExamDetail
	(*ExamReport)(nil),                               // 89: MedBaike.ExamReport
	(*DrcmRequest)(nil),                              // 90: MedBaike.DrcmRequest
	(*DrcmReply)(nil),                                // 91: MedBaike.DrcmReply
	(*DrcmReq)(nil),                                  // 92: MedBaike.DrcmReq
	(*RcmDoc)(nil),                                   // 93: MedBaike.RcmDoc
	(*DrcmResp)(nil),                                 // 94: MedBaike.DrcmResp
	(*QueryJkNewsInfo)(nil),                          // 95: MedBaike.QueryJkNewsInfo
	(*QueryJkNewsContent)(nil),                       // 96: MedBaike.QueryJkNewsContent
	(*QueryJkHotEventInfo)(nil),                      // 97: MedBaike.QueryJkHotEventInfo
	(*GetUinByOpenidReq)(nil),                        // 98: MedBaike.GetUinByOpenidReq
	(*GetUinByOpenidResp)(nil),                       // 99: MedBaike.GetUinByOpenidResp
	(*CCCheckTokenReq)(nil),                          // 100: MedBaike.CCCheckTokenReq
	(*CCCheckTokenResp)(nil),                         // 101: MedBaike.CCCheckTokenResp
	(*GetMyCommunityListInfo)(nil),                   // 102: MedBaike.GetMyCommunityListInfo
	(*GetMyCommunityListReq)(nil),                    // 103: MedBaike.GetMyCommunityListReq
	(*GetMyCommunityListResp)(nil),                   // 104: MedBaike.GetMyCommunityListResp
	(*QueryUserPosInfo)(nil),                         // 105: MedBaike.QueryUserPosInfo
	(*QueryUserFollowing)(nil),                       // 106: MedBaike.QueryUserFollowing
	(*BatchDoUserDocRelationReq)(nil),                // 107: MedBaike.BatchDoUserDocRelationReq
	(*GetUserDocRelationReq)(nil),                    // 108: MedBaike.GetUserDocRelationReq
	(*GetDocRelationUsersReq)(nil),                   // 109: MedBaike.GetDocRelationUsersReq
	(*UserDocRelationItem)(nil),                      // 110: MedBaike.UserDocRelationItem
	(*GetUserDocRelationResp)(nil),                   // 111: MedBaike.GetUserDocRelationResp
	(*GetDocsRelationCountReq)(nil),                  // 112: MedBaike.GetDocsRelationCountReq
	(*GetDocsRelationCountResp)(nil),                 // 113: MedBaike.GetDocsRelationCountResp
	(*PushToUserReq)(nil),                            // 114: MedBaike.PushToUserReq
	(*PushToUserResp)(nil),                           // 115: MedBaike.PushToUserResp
	(*BatchGetESResultReq)(nil),                      // 116: MedBaike.BatchGetESResultReq
	(*SDocEsIndexItem)(nil),                          // 117: MedBaike.SDocEsIndexItem
	(*QueryResult)(nil),                              // 118: MedBaike.QueryResult
	(*BatchGetESResultResp)(nil),                     // 119: MedBaike.BatchGetESResultResp
	(*MoniterLogReport)(nil),                         // 120: MedBaike.MoniterLogReport
	nil,                                              // 121: MedBaike.BatchDoUserDocRelationReq.DataTimeEntry
	nil,                                              // 122: MedBaike.GetDocsRelationCountResp.DocsRelationCountEntry
}
var file_MedBaike_proto_depIdxs = []int32{
	4,   // 0: MedBaike.Person.address:type_name -> MedBaike.Address
	62,  // 1: MedBaike.GetDocDataInfoResp.data:type_name -> MedBaike.Tid_DocData
	9,   // 2: MedBaike.Tid0.op_review:type_name -> MedBaike.Tid0_Review
	10,  // 3: MedBaike.Tid0.op_video:type_name -> MedBaike.Tid0_Video
	11,  // 4: MedBaike.Tid0.reviews:type_name -> MedBaike.Tid0_Reviews
	12,  // 5: MedBaike.Tid0.disvideo:type_name -> MedBaike.Tid0_DisVideo
	14,  // 6: MedBaike.Tid1.data:type_name -> MedBaike.Tid1_Data
	16,  // 7: MedBaike.Tid2.data:type_name -> MedBaike.Tid2_Data
	19,  // 8: MedBaike.Tid4_Author.op_doctor:type_name -> MedBaike.Tid4_Doctor
	20,  // 9: MedBaike.Tid4_Author.op_hospital:type_name -> MedBaike.Tid4_Hospital
	19,  // 10: MedBaike.Tid4_Review.op_doctor:type_name -> MedBaike.Tid4_Doctor
	20,  // 11: MedBaike.Tid4_Review.op_hospital:type_name -> MedBaike.Tid4_Hospital
	18,  // 12: MedBaike.Tid4.op_related:type_name -> MedBaike.Tid4_Related
	19,  // 13: MedBaike.Tid4.op_doctor:type_name -> MedBaike.Tid4_Doctor
	20,  // 14: MedBaike.Tid4.op_hospital:type_name -> MedBaike.Tid4_Hospital
	21,  // 15: MedBaike.Tid4.op_author:type_name -> MedBaike.Tid4_Author
	24,  // 16: MedBaike.Tid4.diseases:type_name -> MedBaike.Tid_DiseaseItem
	19,  // 17: MedBaike.Tid4.op_doctors:type_name -> MedBaike.Tid4_Doctor
	25,  // 18: MedBaike.Tid4.sole_recruit:type_name -> MedBaike.Tid_Recruit
	8,   // 19: MedBaike.Tid4.cid:type_name -> MedBaike.TagObject
	22,  // 20: MedBaike.Tid4.review:type_name -> MedBaike.Tid4_Review
	23,  // 21: MedBaike.Tid4.info_extra:type_name -> MedBaike.Tid4_Info_Extra
	19,  // 22: MedBaike.Tid6.op_doctor:type_name -> MedBaike.Tid4_Doctor
	20,  // 23: MedBaike.Tid6.op_hospital:type_name -> MedBaike.Tid4_Hospital
	24,  // 24: MedBaike.Tid6.diseases:type_name -> MedBaike.Tid_DiseaseItem
	21,  // 25: MedBaike.Tid6.op_author:type_name -> MedBaike.Tid4_Author
	19,  // 26: MedBaike.Tid6.op_doctors:type_name -> MedBaike.Tid4_Doctor
	25,  // 27: MedBaike.Tid6.sole_recruit:type_name -> MedBaike.Tid_Recruit
	26,  // 28: MedBaike.Tid6.thanks:type_name -> MedBaike.Tid_Thank
	23,  // 29: MedBaike.Tid6.info_extra:type_name -> MedBaike.Tid4_Info_Extra
	30,  // 30: MedBaike.Tid7.list:type_name -> MedBaike.Tid7_ImageInfo
	18,  // 31: MedBaike.Tid9.op_related:type_name -> MedBaike.Tid4_Related
	24,  // 32: MedBaike.Tid10.diseases:type_name -> MedBaike.Tid_DiseaseItem
	19,  // 33: MedBaike.Tid10.op_doctor:type_name -> MedBaike.Tid4_Doctor
	20,  // 34: MedBaike.Tid10.op_hospital:type_name -> MedBaike.Tid4_Hospital
	19,  // 35: MedBaike.Tid10.op_doctors:type_name -> MedBaike.Tid4_Doctor
	8,   // 36: MedBaike.Tid10.cid:type_name -> MedBaike.TagObject
	22,  // 37: MedBaike.Tid10.review:type_name -> MedBaike.Tid4_Review
	37,  // 38: MedBaike.Tid15.list:type_name -> MedBaike.Tid15_List
	24,  // 39: MedBaike.Tid17.diseases:type_name -> MedBaike.Tid_DiseaseItem
	19,  // 40: MedBaike.Tid17.op_doctor:type_name -> MedBaike.Tid4_Doctor
	20,  // 41: MedBaike.Tid17.op_hospital:type_name -> MedBaike.Tid4_Hospital
	19,  // 42: MedBaike.Tid17.op_doctors:type_name -> MedBaike.Tid4_Doctor
	41,  // 43: MedBaike.Tid18.list:type_name -> MedBaike.Tid18_List
	43,  // 44: MedBaike.Tid19.list:type_name -> MedBaike.Tid19_List
	19,  // 45: MedBaike.Tid20.op_doctor:type_name -> MedBaike.Tid4_Doctor
	20,  // 46: MedBaike.Tid20.op_hospital:type_name -> MedBaike.Tid4_Hospital
	19,  // 47: MedBaike.Tid21.op_doctor:type_name -> MedBaike.Tid4_Doctor
	20,  // 48: MedBaike.Tid21.op_hospital:type_name -> MedBaike.Tid4_Hospital
	46,  // 49: MedBaike.Tid21.list:type_name -> MedBaike.Tid21_List
	9,   // 50: MedBaike.Tid22.op_review:type_name -> MedBaike.Tid0_Review
	49,  // 51: MedBaike.Tid23_Modeone.list:type_name -> MedBaike.Tid23_Modeone_List
	51,  // 52: MedBaike.Tid23_Modetwo.list:type_name -> MedBaike.Tid23_Modetwo_List
	50,  // 53: MedBaike.Tid23.mode_one:type_name -> MedBaike.Tid23_Modeone
	52,  // 54: MedBaike.Tid23.mode_two:type_name -> MedBaike.Tid23_Modetwo
	53,  // 55: MedBaike.Tid23.mode_top:type_name -> MedBaike.Tid23_Modetop
	19,  // 56: MedBaike.Tid24.op_doctor:type_name -> MedBaike.Tid4_Doctor
	20,  // 57: MedBaike.Tid24.op_hospital:type_name -> MedBaike.Tid4_Hospital
	21,  // 58: MedBaike.Tid24.op_author:type_name -> MedBaike.Tid4_Author
	55,  // 59: MedBaike.Tid24.data:type_name -> MedBaike.Tid24_Data
	24,  // 60: MedBaike.Tid24.diseases:type_name -> MedBaike.Tid_DiseaseItem
	19,  // 61: MedBaike.Tid24.op_doctors:type_name -> MedBaike.Tid4_Doctor
	21,  // 62: MedBaike.Tid24.author:type_name -> MedBaike.Tid4_Author
	21,  // 63: MedBaike.Tid25.op_author:type_name -> MedBaike.Tid4_Author
	24,  // 64: MedBaike.Tid25.diseases:type_name -> MedBaike.Tid_DiseaseItem
	19,  // 65: MedBaike.Tid25.op_doctor:type_name -> MedBaike.Tid4_Doctor
	20,  // 66: MedBaike.Tid25.op_hospital:type_name -> MedBaike.Tid4_Hospital
	19,  // 67: MedBaike.Tid25.op_doctors:type_name -> MedBaike.Tid4_Doctor
	8,   // 68: MedBaike.Tid25.cid:type_name -> MedBaike.TagObject
	22,  // 69: MedBaike.Tid25.review:type_name -> MedBaike.Tid4_Review
	21,  // 70: MedBaike.Tid26_Info.op_author:type_name -> MedBaike.Tid4_Author
	27,  // 71: MedBaike.Tid26_Info.op_relateddoc:type_name -> MedBaike.Tid4
	21,  // 72: MedBaike.Tid26.op_author:type_name -> MedBaike.Tid4_Author
	24,  // 73: MedBaike.Tid26.diseases:type_name -> MedBaike.Tid_DiseaseItem
	58,  // 74: MedBaike.Tid26.info:type_name -> MedBaike.Tid26_Info
	19,  // 75: MedBaike.Tid26.op_doctor:type_name -> MedBaike.Tid4_Doctor
	20,  // 76: MedBaike.Tid26.op_hospital:type_name -> MedBaike.Tid4_Hospital
	19,  // 77: MedBaike.Tid26.op_doctors:type_name -> MedBaike.Tid4_Doctor
	26,  // 78: MedBaike.Tid26.thanks:type_name -> MedBaike.Tid_Thank
	19,  // 79: MedBaike.Tid27.op_doctors:type_name -> MedBaike.Tid4_Doctor
	27,  // 80: MedBaike.Tid_DocInfo.tid4:type_name -> MedBaike.Tid4
	33,  // 81: MedBaike.Tid_DocInfo.tid10:type_name -> MedBaike.Tid10
	57,  // 82: MedBaike.Tid_DocInfo.tid25:type_name -> MedBaike.Tid25
	60,  // 83: MedBaike.Tid_DocInfo.tid27:type_name -> MedBaike.Tid27
	29,  // 84: MedBaike.Tid_DocData.tid6:type_name -> MedBaike.Tid6
	40,  // 85: MedBaike.Tid_DocData.tid17:type_name -> MedBaike.Tid17
	56,  // 86: MedBaike.Tid_DocData.tid24:type_name -> MedBaike.Tid24
	59,  // 87: MedBaike.Tid_DocData.tid26:type_name -> MedBaike.Tid26
	64,  // 88: MedBaike.DiseaseItem.tabs:type_name -> MedBaike.QuestionItem
	68,  // 89: MedBaike.GetDiseaseListByCategoryRespList.diseases:type_name -> MedBaike.GetDiseaseListByCategoryRespListDiseases
	70,  // 90: MedBaike.GetDrugListByCategoryRespList.drugs:type_name -> MedBaike.GetDrugListByCategoryRespListDrugs
	72,  // 91: MedBaike.GetDiseaseAllDocsTagsChildren.treeinfo:type_name -> MedBaike.TagTreeInfo
	72,  // 92: MedBaike.GetDiseaseAllDocsTagsItem.treeinfo:type_name -> MedBaike.TagTreeInfo
	73,  // 93: MedBaike.GetDiseaseAllDocsTagsItem.tags:type_name -> MedBaike.GetDiseaseAllDocsTagsChildren
	74,  // 94: MedBaike.GetDiseaseAllDocsBaseInfoRespTags.tags:type_name -> MedBaike.GetDiseaseAllDocsTagsItem
	1,   // 95: MedBaike.GetHomeContentDataRespTopicSort.type:type_name -> MedBaike.CONTENT_TYPE
	78,  // 96: MedBaike.DrugCost.item:type_name -> MedBaike.DrugCostItem
	83,  // 97: MedBaike.UploadSearchResultFeedBackEntity.feedback:type_name -> MedBaike.FeedbackSuggest
	86,  // 98: MedBaike.GetAuthPartnerDocsV2Entity.tags:type_name -> MedBaike.AuthDocsInfoV2
	65,  // 99: MedBaike.ExamDetail.related_diseases:type_name -> MedBaike.DiseaseItem
	88,  // 100: MedBaike.ExamReport.exam_details:type_name -> MedBaike.ExamDetail
	93,  // 101: MedBaike.DrcmResp.docs:type_name -> MedBaike.RcmDoc
	102, // 102: MedBaike.GetMyCommunityListResp.community_list:type_name -> MedBaike.GetMyCommunityListInfo
	121, // 103: MedBaike.BatchDoUserDocRelationReq.data_time:type_name -> MedBaike.BatchDoUserDocRelationReq.DataTimeEntry
	110, // 104: MedBaike.GetUserDocRelationResp.list:type_name -> MedBaike.UserDocRelationItem
	122, // 105: MedBaike.GetDocsRelationCountResp.docs_relation_count:type_name -> MedBaike.GetDocsRelationCountResp.DocsRelationCountEntry
	117, // 106: MedBaike.QueryResult.result:type_name -> MedBaike.SDocEsIndexItem
	118, // 107: MedBaike.BatchGetESResultResp.list:type_name -> MedBaike.QueryResult
	6,   // 108: MedBaike.DocService.GetDocDataInfo:input_type -> MedBaike.GetDocDataInfoReq
	4,   // 109: MedBaike.DocService.GetAddress:input_type -> MedBaike.Address
	7,   // 110: MedBaike.DocService.GetDocDataInfo:output_type -> MedBaike.GetDocDataInfoResp
	4,   // 111: MedBaike.DocService.GetAddress:output_type -> MedBaike.Address
	110, // [110:112] is the sub-list for method output_type
	108, // [108:110] is the sub-list for method input_type
	108, // [108:108] is the sub-list for extension type_name
	108, // [108:108] is the sub-list for extension extendee
	0,   // [0:108] is the sub-list for field type_name
}

func init() { file_MedBaike_proto_init() }
func file_MedBaike_proto_init() {
	if File_MedBaike_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_MedBaike_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Person); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDocDataInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDocDataInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid0_Review); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid0_Video); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid0_Reviews); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid0_DisVideo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid0); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid1_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid2_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid4_Related); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid4_Doctor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid4_Hospital); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid4_Author); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid4_Review); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid4_Info_Extra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid_DiseaseItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid_Recruit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid_Thank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid5); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid7_ImageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid7); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid9); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid10); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid11); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid13); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid14); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid15_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid15); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid16); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid17); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid18_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid18); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid19_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid19); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid20); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid21_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid21); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid22); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid23_Modeone_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid23_Modeone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid23_Modetwo_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid23_Modetwo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid23_Modetop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid23); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid24_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid24); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid25); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid26_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid26); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid27); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid_DocInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tid_DocData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocInfoV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiseaseItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmergencyItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOverviewFilterDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiseaseListByCategoryRespListDiseases); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiseaseListByCategoryRespList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDrugListByCategoryRespListDrugs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDrugListByCategoryRespList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagTreeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiseaseAllDocsTagsChildren); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiseaseAllDocsTagsItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiseaseAllDocsBaseInfoRespTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeTagInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHomeContentDataRespTopicSort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrugCostItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrugCost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveItemQualitySort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopupData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiseaseCostEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeedbackSuggest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadSearchResultFeedBackEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthPartnerDocsV2Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthDocsInfoV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAuthPartnerDocsV2Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExamDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExamReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrcmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrcmReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrcmReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RcmDoc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrcmResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryJkNewsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryJkNewsContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryJkHotEventInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUinByOpenidReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUinByOpenidResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCCheckTokenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CCCheckTokenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMyCommunityListInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMyCommunityListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMyCommunityListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUserPosInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUserFollowing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchDoUserDocRelationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserDocRelationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDocRelationUsersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDocRelationItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserDocRelationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDocsRelationCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDocsRelationCountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushToUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushToUserResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetESResultReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SDocEsIndexItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGetESResultResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MedBaike_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoniterLogReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_MedBaike_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   119,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_MedBaike_proto_goTypes,
		DependencyIndexes: file_MedBaike_proto_depIdxs,
		EnumInfos:         file_MedBaike_proto_enumTypes,
		MessageInfos:      file_MedBaike_proto_msgTypes,
	}.Build()
	File_MedBaike_proto = out.File
	file_MedBaike_proto_rawDesc = nil
	file_MedBaike_proto_goTypes = nil
	file_MedBaike_proto_depIdxs = nil
}
