// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: MedBaike.proto

package MedBaike

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DocServiceClient is the client API for DocService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocServiceClient interface {
	GetDocDataInfo(ctx context.Context, in *GetDocDataInfoReq, opts ...grpc.CallOption) (*GetDocDataInfoResp, error)
	GetAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Address, error)
}

type docServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDocServiceClient(cc grpc.ClientConnInterface) DocServiceClient {
	return &docServiceClient{cc}
}

func (c *docServiceClient) GetDocDataInfo(ctx context.Context, in *GetDocDataInfoReq, opts ...grpc.CallOption) (*GetDocDataInfoResp, error) {
	out := new(GetDocDataInfoResp)
	err := c.cc.Invoke(ctx, "/MedBaike.DocService/GetDocDataInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *docServiceClient) GetAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/MedBaike.DocService/GetAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocServiceServer is the server API for DocService service.
// All implementations must embed UnimplementedDocServiceServer
// for forward compatibility
type DocServiceServer interface {
	GetDocDataInfo(context.Context, *GetDocDataInfoReq) (*GetDocDataInfoResp, error)
	GetAddress(context.Context, *Address) (*Address, error)
	mustEmbedUnimplementedDocServiceServer()
}

// UnimplementedDocServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDocServiceServer struct {
}

func (UnimplementedDocServiceServer) GetDocDataInfo(context.Context, *GetDocDataInfoReq) (*GetDocDataInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocDataInfo not implemented")
}
func (UnimplementedDocServiceServer) GetAddress(context.Context, *Address) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddress not implemented")
}
func (UnimplementedDocServiceServer) mustEmbedUnimplementedDocServiceServer() {}

// UnsafeDocServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocServiceServer will
// result in compilation errors.
type UnsafeDocServiceServer interface {
	mustEmbedUnimplementedDocServiceServer()
}

func RegisterDocServiceServer(s grpc.ServiceRegistrar, srv DocServiceServer) {
	s.RegisterService(&DocService_ServiceDesc, srv)
}

func _DocService_GetDocDataInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocDataInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocServiceServer).GetDocDataInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MedBaike.DocService/GetDocDataInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocServiceServer).GetDocDataInfo(ctx, req.(*GetDocDataInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocService_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocServiceServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MedBaike.DocService/GetAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocServiceServer).GetAddress(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

// DocService_ServiceDesc is the grpc.ServiceDesc for DocService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DocService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MedBaike.DocService",
	HandlerType: (*DocServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDocDataInfo",
			Handler:    _DocService_GetDocDataInfo_Handler,
		},
		{
			MethodName: "GetAddress",
			Handler:    _DocService_GetAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "MedBaike.proto",
}
